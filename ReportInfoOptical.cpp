// (s.dhole 2012-04-19 17:11) - PLID 49341 new Optical report class

#include "stdafx.h"
#include "ReportInfo.h"
#include "Reports.h"
#include "GlobalReportUtils.h"
#include "InvUtils.h"

CString CReportInfo::GetSqlOptical(long nSubLevel, long nSubRepNum) const
{
	CString strSQL, strArSql;
	COleDateTime dtNext;
	COleDateTimeSpan  OneDay(1,0,0,0);
	switch (nID) {
		case 709:	//Glasses Order Cost/Profit Analysis By Provider
			/* Version History
				TES 7/1/2011 - PLID 44167 - Created.  Somewhat modeled on the Case History profit analysis reports, but the structure's different
					enough that it's pretty much a brand-new report
					// (s.dhole 2012-04-19 17:26) - PLID 49341 move from InfoInventory To ptical module
					// (s.dhole 2012-06-14 17:26) - PLID 50929 This is not active report , I am not removing ContactLensOrderInfoT  from SQl. 
					This report has to rewrite to support new table structure and no way to test this report since not active any more 
			*/
			return _T(
				"SELECT GlassesOrderT.ID AS OrderID, GlassesOrderT.Description, GlassesOrderT.LocationID AS LocID, LocationsT.Name AS Location, "
				"GlassesOrderT.PersonID AS PatID, PatientsT.UserDefinedID, "
				"PersonPat.Last + ', ' + PersonPat.First + ' ' + PersonPat.Middle AS PatientName, "
				"GlassesOrderT.GlassesOrderType AS OrderType, "
				"CASE WHEN GlassesOrderT.GlassesOrderType = 1/*vwotSpectacleLens*/ THEN 'Glasses Order' "
				"WHEN GlassesOrderT.GlassesOrderType = 3/*vwotContactLensPatient*/ THEN 'Contact Lens Order' END AS TypeOfOrderDesc, "
				"PersonSupplier.Company AS Supplier, GlassesOrderT.OrderCreateDate, GlassesOrderT.ProviderID AS ProvID, "
				"PersonProv.Last + ', ' + PersonProv.First + ' ' + PersonProv.Middle AS ProvName, GlassesOrderT.Date AS OrderDate, "
				"GlassesOrderT.FrameCost, GlassesOrderT.LensCost, COALESCE(ContactLensOrderInfoT.Cost,0) AS ContactLensCost, "
				"GlassesOrderServiceT.Type, dbo.GetChargeTotal(ChargesT.ID) AS ChargeAmount, "
				"Round(Convert(money, ((( LineItemT.Amount * ChargesT.Quantity *  "
				"	(CASE WHEN CPTMultiplier1 Is Null THEN 1 ELSE CPTMultiplier1 END) *  "
				"	(CASE WHEN CPTMultiplier2 Is Null THEN 1 ELSE CPTMultiplier2 END) *  "
				"	(CASE WHEN CPTMultiplier3 Is Null THEN 1 ELSE CPTMultiplier3 END) *  "
				"	(CASE WHEN CPTMultiplier4 Is Null THEN 1 ELSE CPTMultiplier4 END)) *  "
				"	CASE WHEN [TotalPercentOff] IS NULL THEN 1 ELSE (1.0 - (Convert(float,[TotalPercentOff])/100.0)) END  ) -  "
				"	CASE WHEN LineItemT.Amount > 0 THEN COALESCE([TotalDiscount],0) ELSE 0 END  )  ), 2) AS ChargeAmountPreTax, "
				"LineItemT.Description AS ChargeDescription, LineItemT.Date AS ChargeDate, LineItemT.InputDate AS ChargeInputDate, "
				"BillsT.Date AS BillDate "
				" "
				"FROM "
				" "
				"GlassesOrderT INNER JOIN GlassesOrderServiceT ON GlassesOrderT.ID = GlassesOrderServiceT.GlassesOrderID "
				"LEFT JOIN LocationsT ON GlassesOrderT.LocationID = LocationsT.ID "
				"LEFT JOIN (PersonT PersonPat INNER JOIN PatientsT ON PersonPat.ID = PatientsT.PersonID) ON GlassesOrderT.PersonID = PersonPat.ID "
				"LEFT JOIN PersonT PersonSupplier ON GlassesOrderT.SupplierID = PersonSupplier.ID "
				"LEFT JOIN PersonT PersonProv ON GlassesOrderT.ProviderID = PersonProv.ID "
				"LEFT JOIN ContactLensOrderInfoT ON GlassesOrderT.ContactLensOrderInfoID = ContactLensOrderInfoT.ID "
				"INNER JOIN ChargesT ON GlassesOrderServiceT.ID = ChargesT.GlassesOrderServiceID "
				"INNER JOIN (SELECT * FROM LineItemT WHERE Deleted = 0) AS LineItemT ON ChargesT.ID = LineItemT.ID "
				"LEFT JOIN (SELECT ChargeID, Sum(Percentoff) as TotalPercentOff, Sum(Discount) As TotalDiscount "
				" FROM ChargeDiscountsT WHERE Deleted = 0 GROUP BY ChargeID) TotalDiscountsQ "
				"ON ChargesT.ID = TotalDiscountsQ.ChargeID "
				"LEFT JOIN BillsT ON ChargesT.BillID = BillsT.ID "
				"WHERE GlassesOrderT.IsDelete = 0");

			break;

		case 726:	// Frame Sold - By Manufacturer
			/* Version History
				// (s.dhole 2012-04-19 17:59) - PLID 49791  Created.  
			*/
			return _T(" SELECT LocationsT.ID AS LocID, LocationsT.Name AS LocationName, ISNULL(ProvPerson_Q.First,'') AS ProviderFirst, ISNULL(ProvPerson_Q.Middle,'') AS ProviderMiddle,  "
					"ISNULL(ProvPerson_Q.Last,'') AS ProviderLast, CASE WHEN GlassesOrderT.GlassesOrderType = 1 THEN 'Glasses Order' ELSE 'Contact Lens Order' END AS GlassesOrderType, "
					"GlassesOrderT.GlassesOrderType AS GlassesOrderTypeID, GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName,  "
					"ProductT.LastCost AS ProductDefaultCost, CASE WHEN ProductT.IsContactLens IS NOT NULL AND  "
					"ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND  "
					"ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, ProductT.FramesDataID, GlassesOrderT.Description AS OrderDescription,  "
					"GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,  "
					"BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID, CONVERT(int,  "
					"GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf, CONVERT(money,  "
					"GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,  "
					"GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,  "
					"GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2)  "
					"AS ItemPriceAfterDiscount, CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2)  "
					"AS TotalDiscount, GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName,  "
					"OpticianPerson_Q.First AS OpticianFirstName, OpticianPerson_Q.Middle AS OpticianMiddleName, OpticianPerson_Q.Last AS OpticianLastName,  "
					"ISNULL(OpticianPerson_Q.ID,-1) AS OpticianID, SupplierPersonT.Address1 AS SupplierAddress1, SupplierPersonT.Address2 AS SupplierAddress2,  "
					"SupplierPersonT.City AS SupplierCity, SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip,  "
					"SupplierPersonT.WorkPhone AS SupplierWorkPhone, SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax,  "
					"ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID, GlassesOrderT.UpdateDate AS OrderUpdateDate, PersonT.First AS PatientFirstName,  "
					"PersonT.Middle AS PatientMiddleName, PersonT.Last AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '')  "
					"+ ', ' + ISNULL(PersonT.First, ' ') + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, GlassesOrderT.PersonID AS PatID,  "
					"ISNULL(GlassesOrderT.ProviderID,-1) AS ProvID, FramesDataT.ColorDescription, ISNULL(FramesDataT.StyleName, '<None>') AS StyleName,  "
					"ISNULL(FramesDataT.ManufacturerName, '<None>') AS ManufacturerName, FramesDataT.ColorCode, GlassesOrderServiceT.ServiceID,  "
					"CASE WHEN GlassesOrderT.ProviderID IS NULL THEN ' <None>' ELSE ISNULL(ProvPerson_Q.Last,'') + ', ' + ISNULL(ProvPerson_Q.First,'') + ' ' + ISNULL(ProvPerson_Q.Middle,'') END AS ProvName,  "
					"CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE ISNULL(OpticianPerson_Q.Last, '') + ', ' + ISNULL(OpticianPerson_Q.First, '')  "
					"+ ' ' + ISNULL(OpticianPerson_Q.Middle, '') END AS OpticianName, GlassesCatalogDesignsT.DesignName, GlassesCatalogDesignsT.DesignCode,  "
					"GlassesCatalogMaterialsT.MaterialName, GlassesCatalogMaterialsT.MaterialCode, GlassesCatalogTreatmentsT.TreatmentName,  "
					"GlassesCatalogTreatmentsT.TreatmentCode "
					"FROM    BillsT RIGHT OUTER JOIN "
					"PatientsT INNER JOIN "
					"PersonT ON PatientsT.PersonID = PersonT.ID INNER JOIN "
					"ServiceT INNER JOIN "
					"GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN "
					"LocationsT INNER JOIN "
					"GlassesOrderT ON LocationsT.ID = GlassesOrderT.LocationID ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID INNER JOIN "
					"GlassesOrderStatusT ON GlassesOrderT.GlassesOrderStatusID = GlassesOrderStatusT.ID ON PersonT.ID = GlassesOrderT.PersonID INNER JOIN "
					"FramesDataT INNER JOIN "
					"ProductT ON FramesDataT.ID = ProductT.FramesDataID ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN "
					"GlassesCatalogTreatmentsT ON GlassesOrderServiceT.GlassesCatalogTreatmentsID = GlassesCatalogTreatmentsT.ID LEFT OUTER JOIN "
					"GlassesCatalogMaterialsT ON GlassesOrderServiceT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID LEFT OUTER JOIN "
					"GlassesCatalogDesignsT ON GlassesOrderServiceT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID ON  "
					"BillsT.ID = GlassesOrderT.BillID LEFT OUTER JOIN "
					"PersonT AS ProvPerson_Q ON GlassesOrderT.ProviderID = ProvPerson_Q.ID LEFT OUTER JOIN "
					"ProvidersT AS Optician_Q INNER JOIN "
					"PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID LEFT OUTER JOIN "
					"(SELECT GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,  "
					"GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,  "
					"GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))  "
					"/ 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal "
					"FROM GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN "
					"GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID "
					"GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON  "
					"ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN "
					"(SELECT GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt "
					"FROM (SELECT ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,  "
					"ChargePaysT.AmountApplied "
					"FROM (SELECT ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID "
					"FROM ChargesT AS ChargesT_2 LEFT OUTER JOIN "
					"LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN "
					"(SELECT DISTINCT BillsT_1.ID AS BillID "
					"FROM BillsT AS BillsT_1 LEFT OUTER JOIN "
					"BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN "
					"(SELECT DISTINCT ChargesT_1.BillID "
					"FROM LineItemT AS LineItemT_2 INNER JOIN "
					"ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID "
					"WHERE (LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON  "
					"BillsT_1.ID = ChargesSubQ.BillID "
					"WHERE (BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON  "
					"ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID "
					"WHERE (LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND  "
					"(OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))  "
					"AS ValidChargesT LEFT OUTER JOIN "
					"(SELECT AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)  "
					"AS AmountApplied "
					"FROM LineItemT AS LineItemT_1 INNER JOIN "
					"PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN "
					"AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID "
					"WHERE (LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1 )  AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL) "
					"GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)  "
					"AS GlassesOrderServicePaymentQ "
					"GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN "
					"SupplierT INNER JOIN "
					"PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID "
					"WHERE (GlassesOrderT.IsDelete = 0) AND (ProductT.FramesDataID IS NOT NULL ) ");

			break;

		case 730:	// Optical Product Sale By Optician
			/* Version History
				// (s.dhole 2012-05-09 15:49) - PLID 49787 Created.  
			*/
				return _T(" SELECT LocationsT.ID AS LocID, LocationsT.Name AS LocationName, ISNULL(ProvPerson_Q.First,'') AS ProviderFirst, ISNULL(ProvPerson_Q.Middle,'') AS ProviderMiddle,   "
					" ISNULL(ProvPerson_Q.Last,'') AS ProviderLast,   "
					" CASE WHEN GlassesOrderT.GlassesOrderType = 1 THEN 'Glasses Order' ELSE 'Contact Lens Order' END AS GlassesOrderType,   "
					" GlassesOrderT.GlassesOrderType AS GlassesOrderTypeID, GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName,   "
					" ProductT.LastCost AS ProductDefaultCost, CASE WHEN ProductT.IsContactLens IS NOT NULL AND   "
					" ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND   "
					" ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, ProductT.FramesDataID, GlassesOrderT.Description AS OrderDescription,   "
					" GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,   "
					" BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID  AS GlassesOrderStatusID , CONVERT(int,   "
					" GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf, CONVERT(money,   "
					" GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS ItemPriceAfterDiscount,   "
					" CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS TotalDiscount,   "
					" GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName, ISNULL(OpticianPerson_Q.First,'') AS OpticianFirstName,   "
					" ISNULL(OpticianPerson_Q.Middle,'') AS OpticianMiddleName, ISNULL(OpticianPerson_Q.Last,'') AS OpticianLastName, ISNULL(OpticianPerson_Q.ID,-1) AS OpticianID,   "
					" ISNULL(SupplierPersonT.Address1,'') AS SupplierAddress1, ISNULL(SupplierPersonT.Address2,'') AS SupplierAddress2, SupplierPersonT.City AS SupplierCity,   "
					" SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip, SupplierPersonT.WorkPhone AS SupplierWorkPhone,   "
					" SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax, ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID,   "
					" GlassesOrderT.UpdateDate AS OrderUpdateDate, ISNULL(PersonT.First,'') AS PatientFirstName, ISNULL(PersonT.Middle,'') AS PatientMiddleName,   "
					" ISNULL(PersonT.Last,'') AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '') + ', ' + ISNULL(PersonT.First, ' ')   "
					" + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, GlassesOrderT.PersonID AS PatID, ISNULL(GlassesOrderT.ProviderID,-1) AS ProvID,   "
					" GlassesOrderServiceT.ServiceID, "
					" CASE WHEN GlassesOrderT.ProviderID IS NULL THEN ' <None>' ELSE ISNULL(ProvPerson_Q.Last,'') + ', ' + ISNULL(ProvPerson_Q.First,'') + ' ' + ISNULL(ProvPerson_Q.Middle,'') END AS ProvName,   "
					" CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE  ISNULL(OpticianPerson_Q.Last,'') + ', ' + ISNULL(OpticianPerson_Q.First,'') + ' ' + ISNULL(OpticianPerson_Q.Middle,'') END AS OpticianName, GlassesCatalogDesignsT.DesignName,   "
					" GlassesCatalogDesignsT.DesignCode, GlassesCatalogMaterialsT.MaterialName, GlassesCatalogMaterialsT.MaterialCode,   "
					" GlassesCatalogTreatmentsT.TreatmentName, GlassesCatalogTreatmentsT.TreatmentCode  "
					" FROM PatientsT INNER JOIN  "
					" PersonT ON PatientsT.PersonID = PersonT.ID INNER JOIN  "
					" ServiceT INNER JOIN  "
					" GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN  "
					" LocationsT INNER JOIN  "
					" GlassesOrderT ON LocationsT.ID = GlassesOrderT.LocationID ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID INNER JOIN  "
					" GlassesOrderStatusT ON GlassesOrderT.GlassesOrderStatusID = GlassesOrderStatusT.ID ON   "
					" PersonT.ID = GlassesOrderT.PersonID LEFT OUTER JOIN  "
					" GlassesCatalogTreatmentsT ON GlassesOrderServiceT.GlassesCatalogTreatmentsID = GlassesCatalogTreatmentsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogMaterialsT ON GlassesOrderServiceT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogDesignsT ON GlassesOrderServiceT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID LEFT OUTER JOIN  "
					" BillsT ON GlassesOrderT.BillID = BillsT.ID LEFT OUTER JOIN  "
					" ProductT ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN  "
					" PersonT AS ProvPerson_Q ON GlassesOrderT.ProviderID = ProvPerson_Q.ID LEFT OUTER JOIN  "
					" ProvidersT AS Optician_Q INNER JOIN  "
					" PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))   "
					" / 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal  "
					" FROM GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN  "
					" GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID  "
					" GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON   "
					" ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt  "
					" FROM (SELECT  ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,   "
					" ChargePaysT.AmountApplied  "
					" FROM (SELECT  ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID  "
					" FROM ChargesT AS ChargesT_2 LEFT OUTER JOIN  "
					" LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN  "
					" (SELECT DISTINCT BillsT_1.ID AS BillID  "
					" FROM BillsT AS BillsT_1 LEFT OUTER JOIN  "
					" BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN  "
					" (SELECT DISTINCT ChargesT_1.BillID  "
					" FROM LineItemT AS LineItemT_2 INNER JOIN  "
					" ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID  "
					" WHERE(LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON   "
					" BillsT_1.ID = ChargesSubQ.BillID  "
					" WHERE(BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON   "
					" ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND   "
					" (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))   "
					" AS ValidChargesT LEFT OUTER JOIN  "
					" (SELECT  AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)   "
					" AS AmountApplied  "
					" FROM LineItemT AS LineItemT_1 INNER JOIN  "
					" PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN  "
					" AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1 )  AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL)  "
					" GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)   "
					" AS GlassesOrderServicePaymentQ  "
					" GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN  "
					" SupplierT INNER JOIN  "
					" PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID  "
					" WHERE  (GlassesOrderT.IsDelete = 0) ");

			break;
			case 731:	// Optical Orders - By Supplier
			/* Version History
				// (s.dhole 2012-05-10 13:59) - PLID 49785
			*/
				return _T(" SELECT LocationsT.ID AS LocID, LocationsT.Name AS LocationName, ISNULL(ProvPerson_Q.First,'') AS ProviderFirst, ISNULL(ProvPerson_Q.Middle,'') AS ProviderMiddle,   "
					" ISNULL(ProvPerson_Q.Last,'') AS ProviderLast,   "
					" CASE WHEN GlassesOrderT.GlassesOrderType = 1 THEN 'Glasses Order' ELSE 'Contact Lens Order' END AS GlassesOrderType,   "
					" GlassesOrderT.GlassesOrderType AS GlassesOrderTypeID, GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName,   "
					" ProductT.LastCost AS ProductDefaultCost, CASE WHEN ProductT.IsContactLens IS NOT NULL AND   "
					" ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND   "
					" ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, ProductT.FramesDataID, GlassesOrderT.Description AS OrderDescription,   "
					" GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,   "
					" BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID AS GlassesOrderStatusID , CONVERT(int,   "
					" GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf, CONVERT(money,   "
					" GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS ItemPriceAfterDiscount,   "
					" CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS TotalDiscount,   "
					" GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName, ISNULL(OpticianPerson_Q.First,'') AS OpticianFirstName,   "
					" ISNULL(OpticianPerson_Q.Middle,'') AS OpticianMiddleName, ISNULL(OpticianPerson_Q.Last,'') AS OpticianLastName, ISNULL(OpticianPerson_Q.ID,-1) AS OpticianID,   "
					" ISNULL(SupplierPersonT.Address1,'') AS SupplierAddress1, ISNULL(SupplierPersonT.Address2,'') AS SupplierAddress2, SupplierPersonT.City AS SupplierCity,   "
					" SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip, SupplierPersonT.WorkPhone AS SupplierWorkPhone,   "
					" SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax, ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID,   "
					" GlassesOrderT.UpdateDate AS OrderUpdateDate, ISNULL(PersonT.First,'') AS PatientFirstName, ISNULL(PersonT.Middle,'') AS PatientMiddleName,   "
					" ISNULL(PersonT.Last,'') AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '') + ', ' + ISNULL(PersonT.First, ' ')   "
					" + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, GlassesOrderT.PersonID AS PatID, ISNULL(GlassesOrderT.ProviderID,-1) AS ProvID,   "
					" GlassesOrderServiceT.ServiceID, "
					" CASE WHEN GlassesOrderT.ProviderID IS NULL THEN ' <None>' ELSE ISNULL(ProvPerson_Q.Last,'') + ', ' + ISNULL(ProvPerson_Q.First,'') + ' ' + ISNULL(ProvPerson_Q.Middle,'') END AS ProvName,   "
					" CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE  ISNULL(OpticianPerson_Q.Last,'') + ', ' + ISNULL(OpticianPerson_Q.First,'') + ' ' + ISNULL(OpticianPerson_Q.Middle,'') END AS OpticianName, GlassesCatalogDesignsT.DesignName,   "
					" GlassesCatalogDesignsT.DesignCode, GlassesCatalogMaterialsT.MaterialName, GlassesCatalogMaterialsT.MaterialCode,   "
					" GlassesCatalogTreatmentsT.TreatmentName, GlassesCatalogTreatmentsT.TreatmentCode  "
					" FROM PatientsT INNER JOIN  "
					" PersonT ON PatientsT.PersonID = PersonT.ID INNER JOIN  "
					" ServiceT INNER JOIN  "
					" GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN  "
					" LocationsT INNER JOIN  "
					" GlassesOrderT ON LocationsT.ID = GlassesOrderT.LocationID ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID INNER JOIN  "
					" GlassesOrderStatusT ON GlassesOrderT.GlassesOrderStatusID = GlassesOrderStatusT.ID ON   "
					" PersonT.ID = GlassesOrderT.PersonID LEFT OUTER JOIN  "
					" GlassesCatalogTreatmentsT ON GlassesOrderServiceT.GlassesCatalogTreatmentsID = GlassesCatalogTreatmentsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogMaterialsT ON GlassesOrderServiceT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogDesignsT ON GlassesOrderServiceT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID LEFT OUTER JOIN  "
					" BillsT ON GlassesOrderT.BillID = BillsT.ID LEFT OUTER JOIN  "
					" ProductT ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN  "
					" PersonT AS ProvPerson_Q ON GlassesOrderT.ProviderID = ProvPerson_Q.ID LEFT OUTER JOIN  "
					" ProvidersT AS Optician_Q INNER JOIN  "
					" PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))   "
					" / 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal  "
					" FROM GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN  "
					" GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID  "
					" GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON   "
					" ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt  "
					" FROM (SELECT  ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,   "
					" ChargePaysT.AmountApplied  "
					" FROM (SELECT  ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID  "
					" FROM ChargesT AS ChargesT_2 LEFT OUTER JOIN  "
					" LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN  "
					" (SELECT DISTINCT BillsT_1.ID AS BillID  "
					" FROM BillsT AS BillsT_1 LEFT OUTER JOIN  "
					" BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN  "
					" (SELECT DISTINCT ChargesT_1.BillID  "
					" FROM LineItemT AS LineItemT_2 INNER JOIN  "
					" ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID  "
					" WHERE(LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON   "
					" BillsT_1.ID = ChargesSubQ.BillID  "
					" WHERE(BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON   "
					" ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND   "
					" (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))   "
					" AS ValidChargesT LEFT OUTER JOIN  "
					" (SELECT  AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)   "
					" AS AmountApplied  "
					" FROM LineItemT AS LineItemT_1 INNER JOIN  "
					" PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN  "
					" AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1 ) AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL)  "
					" GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)   "
					" AS GlassesOrderServicePaymentQ  "
					" GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN  "
					" SupplierT INNER JOIN  "
					" PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID  "
					" WHERE  (GlassesOrderT.IsDelete = 0) ");
			break;
			case 732:	// Optical Orders - By Status
			/* Version History
				// (s.dhole 2012-05-10 13:59) - PLID 49789
			*/
				return _T(" SELECT LocationsT.ID AS LocID, LocationsT.Name AS LocationName, ISNULL(ProvPerson_Q.First,'') AS ProviderFirst, ISNULL(ProvPerson_Q.Middle,'') AS ProviderMiddle,   "
					" ISNULL(ProvPerson_Q.Last,'') AS ProviderLast,   "
					" CASE WHEN GlassesOrderT.GlassesOrderType = 1 THEN 'Glasses Order' ELSE 'Contact Lens Order' END AS GlassesOrderType,   "
					" GlassesOrderT.GlassesOrderType AS GlassesOrderTypeID, GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName,   "
					" ProductT.LastCost AS ProductDefaultCost, CASE WHEN ProductT.IsContactLens IS NOT NULL AND   "
					" ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND   "
					" ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, ProductT.FramesDataID, GlassesOrderT.Description AS OrderDescription,   "
					" GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,   "
					" BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID AS GlassesOrderStatusID , CONVERT(int,   "
					" GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf, CONVERT(money,   "
					" GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS ItemPriceAfterDiscount,   "
					" CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS TotalDiscount,   "
					" GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName, ISNULL(OpticianPerson_Q.First,'') AS OpticianFirstName,   "
					" ISNULL(OpticianPerson_Q.Middle,'') AS OpticianMiddleName, ISNULL(OpticianPerson_Q.Last,'') AS OpticianLastName, ISNULL(OpticianPerson_Q.ID,-1) AS OpticianID,   "
					" ISNULL(SupplierPersonT.Address1,'') AS SupplierAddress1, ISNULL(SupplierPersonT.Address2,'') AS SupplierAddress2, SupplierPersonT.City AS SupplierCity,   "
					" SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip, SupplierPersonT.WorkPhone AS SupplierWorkPhone,   "
					" SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax, ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID,   "
					" GlassesOrderT.UpdateDate AS OrderUpdateDate, ISNULL(PersonT.First,'') AS PatientFirstName, ISNULL(PersonT.Middle,'') AS PatientMiddleName,   "
					" ISNULL(PersonT.Last,'') AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '') + ', ' + ISNULL(PersonT.First, ' ')   "
					" + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, GlassesOrderT.PersonID AS PatID, ISNULL(GlassesOrderT.ProviderID,-1) AS ProvID,   "
					" GlassesOrderServiceT.ServiceID, "
					" CASE WHEN GlassesOrderT.ProviderID IS NULL THEN ' <None>' ELSE ISNULL(ProvPerson_Q.Last,'') + ', ' + ISNULL(ProvPerson_Q.First,'') + ' ' + ISNULL(ProvPerson_Q.Middle,'') END AS ProvName,   "
					" CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE  ISNULL(OpticianPerson_Q.Last,'') + ', ' + ISNULL(OpticianPerson_Q.First,'') + ' ' + ISNULL(OpticianPerson_Q.Middle,'') END AS OpticianName, GlassesCatalogDesignsT.DesignName,   "
					" GlassesCatalogDesignsT.DesignCode, GlassesCatalogMaterialsT.MaterialName, GlassesCatalogMaterialsT.MaterialCode,   "
					" GlassesCatalogTreatmentsT.TreatmentName, GlassesCatalogTreatmentsT.TreatmentCode  "
					" FROM PatientsT INNER JOIN  "
					" PersonT ON PatientsT.PersonID = PersonT.ID INNER JOIN  "
					" ServiceT INNER JOIN  "
					" GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN  "
					" LocationsT INNER JOIN  "
					" GlassesOrderT ON LocationsT.ID = GlassesOrderT.LocationID ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID INNER JOIN  "
					" GlassesOrderStatusT ON GlassesOrderT.GlassesOrderStatusID = GlassesOrderStatusT.ID ON   "
					" PersonT.ID = GlassesOrderT.PersonID LEFT OUTER JOIN  "
					" GlassesCatalogTreatmentsT ON GlassesOrderServiceT.GlassesCatalogTreatmentsID = GlassesCatalogTreatmentsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogMaterialsT ON GlassesOrderServiceT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogDesignsT ON GlassesOrderServiceT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID LEFT OUTER JOIN  "
					" BillsT ON GlassesOrderT.BillID = BillsT.ID LEFT OUTER JOIN  "
					" ProductT ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN  "
					" PersonT AS ProvPerson_Q ON GlassesOrderT.ProviderID = ProvPerson_Q.ID LEFT OUTER JOIN  "
					" ProvidersT AS Optician_Q INNER JOIN  "
					" PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))   "
					" / 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal  "
					" FROM GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN  "
					" GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID  "
					" GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON   "
					" ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt  "
					" FROM (SELECT  ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,   "
					" ChargePaysT.AmountApplied  "
					" FROM (SELECT  ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID  "
					" FROM ChargesT AS ChargesT_2 LEFT OUTER JOIN  "
					" LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN  "
					" (SELECT DISTINCT BillsT_1.ID AS BillID  "
					" FROM BillsT AS BillsT_1 LEFT OUTER JOIN  "
					" BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN  "
					" (SELECT DISTINCT ChargesT_1.BillID  "
					" FROM LineItemT AS LineItemT_2 INNER JOIN  "
					" ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID  "
					" WHERE(LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON   "
					" BillsT_1.ID = ChargesSubQ.BillID  "
					" WHERE(BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON   "
					" ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND   "
					" (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))   "
					" AS ValidChargesT LEFT OUTER JOIN  "
					" (SELECT  AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)   "
					" AS AmountApplied  "
					" FROM LineItemT AS LineItemT_1 INNER JOIN  "
					" PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN  "
					" AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1 )  AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL)  "
					" GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)   "
					" AS GlassesOrderServicePaymentQ  "
					" GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN  "
					" SupplierT INNER JOIN  "
					" PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID  "
					" WHERE  (GlassesOrderT.IsDelete = 0) ");
			break;
			case 733:	// Items Sold Off The shelf
			/* Version History
				// (s.dhole 2012-05-22 17:59) - PLID 50577
			*/
				return _T(" SELECT LocationsT.ID AS LocID, LocationsT.Name AS LocationName, ISNULL(ProvPerson_Q.First,'') AS ProviderFirst, ISNULL(ProvPerson_Q.Middle,'') AS ProviderMiddle,   "
					" ISNULL(ProvPerson_Q.Last,'') AS ProviderLast,   "
					" CASE WHEN GlassesOrderT.GlassesOrderType = 1 THEN 'Glasses Order' ELSE 'Contact Lens Order' END AS GlassesOrderType,   "
					" GlassesOrderT.GlassesOrderType AS GlassesOrderTypeID, GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName,   "
					" ProductT.LastCost AS ProductDefaultCost, CASE WHEN ProductT.IsContactLens IS NOT NULL AND   "
					" ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND   "
					" ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, ProductT.FramesDataID, GlassesOrderT.Description AS OrderDescription,   "
					" GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,   "
					" BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID AS GlassesOrderStatusID , CONVERT(int,   "
					" GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf AS IsOffTheShelf, CONVERT(money,   "
					" GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,   "
					" GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS ItemPriceAfterDiscount,   "
					" CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2) AS TotalDiscount,   "
					" GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName, ISNULL(OpticianPerson_Q.First,'') AS OpticianFirstName,   "
					" ISNULL(OpticianPerson_Q.Middle,'') AS OpticianMiddleName, ISNULL(OpticianPerson_Q.Last,'') AS OpticianLastName, ISNULL(OpticianPerson_Q.ID,-1) AS OpticianID,   "
					" ISNULL(SupplierPersonT.Address1,'') AS SupplierAddress1, ISNULL(SupplierPersonT.Address2,'') AS SupplierAddress2, SupplierPersonT.City AS SupplierCity,   "
					" SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip, SupplierPersonT.WorkPhone AS SupplierWorkPhone,   "
					" SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax, ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID,   "
					" GlassesOrderT.UpdateDate AS OrderUpdateDate, ISNULL(PersonT.First,'') AS PatientFirstName, ISNULL(PersonT.Middle,'') AS PatientMiddleName,   "
					" ISNULL(PersonT.Last,'') AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '') + ', ' + ISNULL(PersonT.First, ' ')   "
					" + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, GlassesOrderT.PersonID AS PatID, ISNULL(GlassesOrderT.ProviderID,-1) AS ProvID,   "
					" GlassesOrderServiceT.ServiceID, "
					" CASE WHEN GlassesOrderT.ProviderID IS NULL THEN ' <None>' ELSE ISNULL(ProvPerson_Q.Last,'') + ', ' + ISNULL(ProvPerson_Q.First,'') + ' ' + ISNULL(ProvPerson_Q.Middle,'') END AS ProvName,   "
					" CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE  ISNULL(OpticianPerson_Q.Last,'') + ', ' + ISNULL(OpticianPerson_Q.First,'') + ' ' + ISNULL(OpticianPerson_Q.Middle,'') END AS OpticianName, GlassesCatalogDesignsT.DesignName,   "
					" GlassesCatalogDesignsT.DesignCode, GlassesCatalogMaterialsT.MaterialName, GlassesCatalogMaterialsT.MaterialCode,   "
					" GlassesCatalogTreatmentsT.TreatmentName, GlassesCatalogTreatmentsT.TreatmentCode  "
					" FROM PatientsT INNER JOIN  "
					" PersonT ON PatientsT.PersonID = PersonT.ID INNER JOIN  "
					" ServiceT INNER JOIN  "
					" GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN  "
					" LocationsT INNER JOIN  "
					" GlassesOrderT ON LocationsT.ID = GlassesOrderT.LocationID ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID INNER JOIN  "
					" GlassesOrderStatusT ON GlassesOrderT.GlassesOrderStatusID = GlassesOrderStatusT.ID ON   "
					" PersonT.ID = GlassesOrderT.PersonID LEFT OUTER JOIN  "
					" GlassesCatalogTreatmentsT ON GlassesOrderServiceT.GlassesCatalogTreatmentsID = GlassesCatalogTreatmentsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogMaterialsT ON GlassesOrderServiceT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID LEFT OUTER JOIN  "
					" GlassesCatalogDesignsT ON GlassesOrderServiceT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID LEFT OUTER JOIN  "
					" BillsT ON GlassesOrderT.BillID = BillsT.ID LEFT OUTER JOIN  "
					" ProductT ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN  "
					" PersonT AS ProvPerson_Q ON GlassesOrderT.ProviderID = ProvPerson_Q.ID LEFT OUTER JOIN  "
					" ProvidersT AS Optician_Q INNER JOIN  "
					" PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,   "
					" GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))   "
					" / 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal  "
					" FROM GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN  "
					" GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID  "
					" GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON   "
					" ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN  "
					" (SELECT  GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt  "
					" FROM (SELECT  ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,   "
					" ChargePaysT.AmountApplied  "
					" FROM (SELECT  ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID  "
					" FROM ChargesT AS ChargesT_2 LEFT OUTER JOIN  "
					" LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN  "
					" (SELECT DISTINCT BillsT_1.ID AS BillID  "
					" FROM BillsT AS BillsT_1 LEFT OUTER JOIN  "
					" BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN  "
					" (SELECT DISTINCT ChargesT_1.BillID  "
					" FROM LineItemT AS LineItemT_2 INNER JOIN  "
					" ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID  "
					" WHERE(LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON   "
					" BillsT_1.ID = ChargesSubQ.BillID  "
					" WHERE(BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON   "
					" ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND   "
					" (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))   "
					" AS ValidChargesT LEFT OUTER JOIN  "
					" (SELECT  AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)   "
					" AS AmountApplied  "
					" FROM LineItemT AS LineItemT_1 INNER JOIN  "
					" PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN  "
					" AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN  "
					" LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID  "
					" WHERE(LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1 ) AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL)  "
					" GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)   "
					" AS GlassesOrderServicePaymentQ  "
					" GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN  "
					" SupplierT INNER JOIN  "
					" PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID  "
					" WHERE  (GlassesOrderT.IsDelete = 0) AND GlassesOrderServiceT.IsOffTheShelf =1  ");
			break;
			case 734:	// Contact Lens sold - By Manufacturer
			/* Version History
				// (s.dhole 2012-05-23 09:43) - PLID 49786 New Report
			*/
				return _T("SELECT LocationsT.ID AS LocID, LocationsT.Name AS LocationName, ISNULL(ProvPerson_Q.First, '') AS ProviderFirst, ISNULL(ProvPerson_Q.Middle, '')  "
					"AS ProviderMiddle, ISNULL(ProvPerson_Q.Last, '') AS ProviderLast,  "
					"CASE WHEN GlassesOrderT.GlassesOrderType = 1 THEN 'Glasses Order' ELSE 'Contact Lens Order' END AS GlassesOrderType,  "
					"GlassesOrderT.GlassesOrderType AS GlassesOrderTypeID, GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName,  "
					"ProductT.LastCost AS ProductDefaultCost, CASE WHEN ProductT.IsContactLens IS NOT NULL AND  "
					"ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND  "
					"ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, GlassesOrderT.Description AS OrderDescription,  "
					"GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,  "
					"BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID, CONVERT(int,  "
					"GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf, CONVERT(money,  "
					"GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,  "
					"GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,  "
					"GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2)  "
					"AS ItemPriceAfterDiscount, CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2)  "
					"AS TotalDiscount, GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName, ISNULL(OpticianPerson_Q.First, '')  "
					"AS OpticianFirstName, ISNULL(OpticianPerson_Q.Middle, '') AS OpticianMiddleName, ISNULL(OpticianPerson_Q.Last, '') AS OpticianLastName,  "
					"ISNULL(OpticianPerson_Q.ID, - 1) AS OpticianID, ISNULL(SupplierPersonT.Address1, '') AS SupplierAddress1, ISNULL(SupplierPersonT.Address2, '')  "
					"AS SupplierAddress2, SupplierPersonT.City AS SupplierCity, SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip,  "
					"SupplierPersonT.WorkPhone AS SupplierWorkPhone, SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax,  "
					"ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID, GlassesOrderT.UpdateDate AS OrderUpdateDate, ISNULL(PersonT.First, '') AS PatientFirstName,  "
					"ISNULL(PersonT.Middle, '') AS PatientMiddleName, ISNULL(PersonT.Last, '') AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '')  "
					"+ ', ' + ISNULL(PersonT.First, ' ') + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, GlassesOrderT.PersonID AS PatID,  "
					"ISNULL(GlassesOrderT.ProviderID, - 1) AS ProvID, GlassesOrderServiceT.ServiceID, CASE WHEN GlassesOrderT.ProviderID IS NULL  "
					"THEN ' <None>' ELSE ISNULL(ProvPerson_Q.Last, '') + ', ' + ISNULL(ProvPerson_Q.First, '') + ' ' + ISNULL(ProvPerson_Q.Middle, '') END AS ProvName,  "
					"CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE ISNULL(OpticianPerson_Q.Last, '') + ', ' + ISNULL(OpticianPerson_Q.First, '')  "
					"+ ' ' + ISNULL(OpticianPerson_Q.Middle, '') END AS OpticianName, GlassesContactLensDataT.ProductName AS ContactLensName,  "
					"GlassesContactLensDataT.Tint, GlassesContactLensDataT.LensesPerBox,  "
					"CASE WHEN GlassesContactLensDataT.GlassesContactLensTypeID IS NULL  THEN -1 "
					" ELSE GlassesContactLensDataT.GlassesContactLensTypeID END AS GlassesContactLensTypeID,  "
					"CASE WHEN GlassesContactLensDataT.ContactLensManufacturerID IS NULL THEN -1 "
					"ELSE GlassesContactLensDataT.ContactLensManufacturerID END AS ContactLensManufacturerID, "
					" CASE WHEN GlassesContactLensDataT.ContactLensManufacturerID IS NULL  "
					"THEN ' <None>' ELSE ContactLensManufacturersT.Name END AS ManufacturerName,  "
					"CASE WHEN GlassesContactLensDataT.GlassesContactLensTypeID IS NULL  "
					"THEN ' <None>' ELSE GlassesContactLensTypeT.ContactLensType END AS ContactLensType "
					"FROM  BillsT RIGHT OUTER JOIN "
					"PatientsT INNER JOIN "
					"PersonT ON PatientsT.PersonID = PersonT.ID INNER JOIN "
					"ServiceT INNER JOIN "
					"GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN "
					"LocationsT INNER JOIN "
					"GlassesOrderT ON LocationsT.ID = GlassesOrderT.LocationID ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID INNER JOIN "
					"GlassesOrderStatusT ON GlassesOrderT.GlassesOrderStatusID = GlassesOrderStatusT.ID ON PersonT.ID = GlassesOrderT.PersonID INNER JOIN "
					"GlassesContactLensDataT INNER JOIN "
					"ProductT ON GlassesContactLensDataT.ID = ProductT.GlassesContactLensDataID ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN "
					"GlassesContactLensTypeT ON GlassesContactLensDataT.GlassesContactLensTypeID = GlassesContactLensTypeT.ID LEFT OUTER JOIN "
					"ContactLensManufacturersT ON GlassesContactLensDataT.ContactLensManufacturerID = ContactLensManufacturersT.ID ON  "
					"BillsT.ID = GlassesOrderT.BillID LEFT OUTER JOIN "
					"PersonT AS ProvPerson_Q ON GlassesOrderT.ProviderID = ProvPerson_Q.ID LEFT OUTER JOIN "
					"ProvidersT AS Optician_Q INNER JOIN "
					"PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID LEFT OUTER JOIN "
					"(SELECT     GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,  "
					"GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,  "
					"GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))  "
					"/ 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal "
					"FROM  GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN "
					"GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID "
					"GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON  "
					"ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN "
					"(SELECT GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt "
					"FROM (SELECT     ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,  "
					"ChargePaysT.AmountApplied "
					"FROM (SELECT ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID "
					"FROM ChargesT AS ChargesT_2 LEFT OUTER JOIN "
					"LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN "
					"(SELECT DISTINCT BillsT_1.ID AS BillID "
					"FROM BillsT AS BillsT_1 LEFT OUTER JOIN "
					"BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN "
					"(SELECT DISTINCT ChargesT_1.BillID "
					"FROM LineItemT AS LineItemT_2 INNER JOIN "
					"ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID "
					"WHERE  (LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON  "
					"BillsT_1.ID = ChargesSubQ.BillID "
					"WHERE  (BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON  "
					"ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID "
					"WHERE  (LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND  "
					"(OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))  "
					"AS ValidChargesT LEFT OUTER JOIN "
					"(SELECT AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)  "
					"AS AmountApplied "
					"FROM LineItemT AS LineItemT_1 INNER JOIN "
					"PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN "
					"AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN "
					"LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID "
					"WHERE (LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1 )  AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL) "
					"GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)  "
					"AS GlassesOrderServicePaymentQ "
					"GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN "
					"SupplierT INNER JOIN "
					"PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID "
					"WHERE (GlassesOrderT.IsDelete = 0) AND (GlassesOrderServiceT.IsDefaultProduct = 1 and ProductT.IsContactLens IS NOT NULL) ");
			break;
		case 736:	// Optical Orders Capture Rate
			/* Version History
				// (s.dhole 2012-05-23 09:43) - PLID 49790 New Report
				// (d.lange 2014-01-16 09:51) - PLID 59166 - Account for orders linked with an EMN that don't have an order provider selected
			*/
				
				return _T("SELECT     LocationsT.ID AS LocID, LocationsT.Name AS LocationName, "
				"ISNULL(OrderPerson_Q.First, '') AS ProviderFirst, "
				"ISNULL(OrderPerson_Q.Middle, '') AS ProviderMiddle, "
				"ISNULL(OrderPerson_Q.Last, '') AS ProviderLast, CASE WHEN GlassesOrderT.GlassesOrderType = 1 OR "
				"OrderableEmnsQ.HasGlassesOrderData = 1 THEN 'Glasses' WHEN GlassesOrderT.GlassesOrderType = 3 OR "
				"OrderableEmnsQ.HasContactLensData = 1 THEN 'Contact Lens' END AS RowType, "
				" CASE WHEN  OrderableEmnsQ.HasGlassesOrderData = 1 THEN 1  "
				" WHEN OrderableEmnsQ.HasContactLensData = 1 THEN 3 END  AS GlassesOrderTypeID,  "
				"GlassesOrderT.GlassesJobNote AS Note, ServiceT.Name AS ProductName, ProductT.LastCost AS ProductDefaultCost,  "
				"CASE WHEN ProductT.IsContactLens IS NOT NULL AND ProductT.IsContactLens = 1 THEN 'Contact' WHEN ProductT.FramesDataID IS NOT NULL AND  "
				"ProductT.FramesDataID > 0 THEN 'Frame' ELSE 'Other' END AS ProductType, ProductT.FramesDataID, GlassesOrderT.Description AS OrderDescription,  "
				"GlassesOrderT.Date AS OrderDate, ISNULL(SupplierPersonT.Company, ' <None>') AS OrderSupplier, GlassesOrderT.ShipToPatient,  "
				"BillsT.Date AS BillDate, GlassesOrderT.GlassesOrderNumber AS VisionWebOrderNo, GlassesOrderT.GlassesOrderStatusID, CONVERT(int,  "
				"GlassesOrderServiceT.Quantity) AS ItemQuantity, GlassesOrderServiceT.IsOffTheShelf, CONVERT(money,  "
				"GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity, 2) AS ItemCost, CONVERT(money,  "
				"GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) AS ItemPrice, CONVERT(money,  "
				"GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity, 2) - CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2)  "
				"AS ItemPriceAfterDiscount, CONVERT(money, Payment_Q.ApplyAmt, 2) AS AmtPayment, CONVERT(money, ISNULL(ChargeDiscountQ.DiscountTotal, 0), 2)  "
				"AS TotalDiscount, GlassesOrderT.ID AS OrderNo, GlassesOrderT.InvoiceNo, GlassesOrderStatusT.OrderStatusName, ISNULL(OpticianPerson_Q.First, '')  "
				"AS OpticianFirstName, ISNULL(OpticianPerson_Q.Middle, '') AS OpticianMiddleName, ISNULL(OpticianPerson_Q.Last, '') AS OpticianLastName,  "
				"ISNULL(OpticianPerson_Q.ID, - 1) AS OpticianID, ISNULL(SupplierPersonT.Address1, '') AS SupplierAddress1, ISNULL(SupplierPersonT.Address2, '')  "
				"AS SupplierAddress2, SupplierPersonT.City AS SupplierCity, SupplierPersonT.State AS SupplierState, SupplierPersonT.Zip AS SupplierZip,  "
				"SupplierPersonT.WorkPhone AS SupplierWorkPhone, SupplierPersonT.Email AS SupplierEmail, SupplierPersonT.Fax AS SupplierFax,  "
				"ISNULL(GlassesOrderT.SupplierID, - 1) AS SupplierID, GlassesOrderT.UpdateDate AS OrderUpdateDate, ISNULL(PersonT.First, '') AS PatientFirstName,  "
				"ISNULL(PersonT.Middle, '') AS PatientMiddleName, ISNULL(PersonT.Last, '') AS PatientLastName, PatientsT.UserDefinedID, ISNULL(PersonT.Last, '')  "
				"+ ', ' + ISNULL(PersonT.First, ' ') + ' ' + ISNULL(PersonT.Middle, ' ') AS PatientFullName, EMRMasterT.PatientID AS PatID,  "
				"ISNULL(EmrProvidersT.ProviderID, - 1) AS ProvID, GlassesOrderServiceT.ServiceID, "
				"CASE WHEN EmrProvidersT.ProviderID IS NULL THEN ' <None>' ELSE ISNULL(EMRProvPerson_Q.Last, '') + ', ' + ISNULL(EMRProvPerson_Q.First, '') + ' ' + ISNULL(EMRProvPerson_Q.Middle, '') END AS ProvName,  "
				"CASE WHEN OpticianPerson_Q.ID IS NULL THEN ' <None>' ELSE ISNULL(OpticianPerson_Q.Last, '') + ', ' + ISNULL(OpticianPerson_Q.First, '')  "
				"+ ' ' + ISNULL(OpticianPerson_Q.Middle, '') END AS OpticianName, GlassesCatalogDesignsT.DesignName, GlassesCatalogDesignsT.DesignCode,  "
				"GlassesCatalogMaterialsT.MaterialName, GlassesCatalogMaterialsT.MaterialCode, GlassesCatalogTreatmentsT.TreatmentName,  "
				"GlassesCatalogTreatmentsT.TreatmentCode, EMRMasterT.ID AS EMREmnId, GlassesOrderT.EMNID AS OrderEMNID, EMRMasterT.Date AS EMNDate "
				"FROM GlassesOrderStatusT INNER JOIN "
				"ServiceT INNER JOIN "
				"GlassesOrderServiceT ON ServiceT.ID = GlassesOrderServiceT.ServiceID INNER JOIN "
				"GlassesOrderT ON GlassesOrderServiceT.GlassesOrderID = GlassesOrderT.ID ON  "
				"GlassesOrderStatusT.ID = GlassesOrderT.GlassesOrderStatusID RIGHT OUTER JOIN "
				"LocationsT INNER JOIN "
				"PersonT AS EMRProvPerson_Q INNER JOIN "
				"(SELECT     EMRDetailsT.EMRID, EMRInfoT.HasGlassesOrderData, EMRInfoT.HasContactLensData "
				"FROM          EMRDetailsT INNER JOIN "
				"EMRInfoT ON EMRDetailsT.EMRInfoID = EMRInfoT.ID INNER JOIN "
				"EMRTopicsT ON EMRTopicsT.EMRID = EMRDetailsT.EMRID "
				"WHERE      (EMRInfoT.HasGlassesOrderData = 1) AND (EMRDetailsT.Deleted = 0) AND (EMRTopicsT.Deleted = 0) OR "
				"(EMRDetailsT.Deleted = 0) AND (EMRTopicsT.Deleted = 0) AND (EMRInfoT.HasContactLensData = 1) "
				"GROUP BY EMRDetailsT.EMRID, EMRInfoT.HasGlassesOrderData, EMRInfoT.HasContactLensData) AS OrderableEmnsQ INNER JOIN "
				"EMRMasterT ON OrderableEmnsQ.EMRID = EMRMasterT.ID INNER JOIN "
				"EmrProvidersT ON EMRMasterT.ID = EmrProvidersT.EmrID INNER JOIN "
				"PatientsT INNER JOIN "
				"PersonT ON PatientsT.PersonID = PersonT.ID ON EMRMasterT.PatientID = PersonT.ID ON EMRProvPerson_Q.ID = EmrProvidersT.ProviderID ON  "
				"LocationsT.ID = EMRMasterT.LocationID ON "
				"GlassesOrderT.EMNID = EMRMasterT.ID AND GlassesOrderT.IsDelete = 0 LEFT OUTER JOIN "
				"ProvidersT AS Optician_Q INNER JOIN "
				"PersonT AS OpticianPerson_Q ON Optician_Q.PersonID = OpticianPerson_Q.ID ON GlassesOrderT.OpticianID = Optician_Q.PersonID "
				"LEFT JOIN ProvidersT AS OrderProv_Q "
				"INNER JOIN PersonT AS OrderPerson_Q "
				"ON OrderProv_Q.PersonID = OrderPerson_Q.ID "
				"ON GlassesOrderT.ProviderID = OrderProv_Q.PersonID "
				"LEFT OUTER JOIN "
				"GlassesCatalogTreatmentsT ON GlassesOrderServiceT.GlassesCatalogTreatmentsID = GlassesCatalogTreatmentsT.ID LEFT OUTER JOIN "
				"GlassesCatalogMaterialsT ON GlassesOrderServiceT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID LEFT OUTER JOIN "
				"GlassesCatalogDesignsT ON GlassesOrderServiceT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID LEFT OUTER JOIN "
				"BillsT ON GlassesOrderT.BillID = BillsT.ID LEFT OUTER JOIN "
				"ProductT ON ServiceT.ID = ProductT.ID LEFT OUTER JOIN "
				"(SELECT     GlassesOrderServiceDiscountsT.GlassesOrderServiceID, SUM(ROUND(CONVERT(money,  "
				"GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity), 2) - ROUND(CONVERT(money,  "
				"GlassesOrderServiceQ.Price * GlassesOrderServiceQ.Quantity * (CASE WHEN (PercentOff IS NULL) THEN 1 ELSE ((100 - CONVERT(float, PercentOff))  "
				"/ 100) END) - (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)) AS DiscountTotal "
				"FROM          GlassesOrderServiceT AS GlassesOrderServiceQ INNER JOIN "
				"GlassesOrderServiceDiscountsT ON GlassesOrderServiceQ.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID "
				"GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID) AS ChargeDiscountQ ON  "
				"ChargeDiscountQ.GlassesOrderServiceID = GlassesOrderServiceT.ID LEFT OUTER JOIN "
				"(SELECT     GlassesOrderServiceID, SUM(AmountApplied) AS ApplyAmt "
				"FROM          (SELECT     ValidChargesT.ChargeID, ValidChargesT.GlassesOrderServiceID, ChargePaysT.AppliedPaymentID, ChargePaysT.DestinationID,  "
				"ChargePaysT.AmountApplied "
				"FROM          (SELECT     ChargesT_2.ID AS ChargeID, ChargesT_2.GlassesOrderServiceID "
				"FROM          ChargesT AS ChargesT_2 LEFT OUTER JOIN "
				"LineItemT AS LineItemT_3 ON ChargesT_2.ID = LineItemT_3.ID INNER JOIN "
				"(SELECT DISTINCT BillsT_1.ID AS BillID "
				"FROM          BillsT AS BillsT_1 LEFT OUTER JOIN "
				"BillCorrectionsT ON BillsT_1.ID = BillCorrectionsT.OriginalBillID INNER JOIN "
				"(SELECT DISTINCT ChargesT_1.BillID "
				"FROM          LineItemT AS LineItemT_2 INNER JOIN "
				"ChargesT AS ChargesT_1 ON LineItemT_2.ID = ChargesT_1.ID "
				"WHERE      (LineItemT_2.Deleted = 0) AND (LineItemT_2.Type = 10)) AS ChargesSubQ ON  "
				"BillsT_1.ID = ChargesSubQ.BillID "
				"WHERE      (BillsT_1.Deleted = 0) AND (BillCorrectionsT.ID IS NULL) AND (BillsT_1.EntryType = 1)) AS ValidBillsQ ON  "
				"ChargesT_2.BillID = ValidBillsQ.BillID LEFT OUTER JOIN "
				"LineItemCorrectionsT AS OrigLineItemsT ON ChargesT_2.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN "
				"LineItemCorrectionsT AS VoidingLineItemsT ON ChargesT_2.ID = VoidingLineItemsT.VoidingLineItemID "
				"WHERE      (LineItemT_3.Deleted = 0) AND (LineItemT_3.Type = 10) AND (ChargesT_2.GlassesOrderServiceID IS NOT NULL) AND  "
				"(OrigLineItemsT.OriginalLineItemID IS NULL) AND (VoidingLineItemsT.VoidingLineItemID IS NULL))  "
				"AS ValidChargesT LEFT OUTER JOIN "
				"(SELECT     AppliesT.SourceID AS AppliedPaymentID, AppliesT.DestID AS DestinationID, SUM(AppliesT.Amount)  "
				"AS AmountApplied "
				"FROM          LineItemT AS LineItemT_1 INNER JOIN "
				"PaymentsT ON LineItemT_1.ID = PaymentsT.ID INNER JOIN "
				"AppliesT ON PaymentsT.ID = AppliesT.SourceID LEFT OUTER JOIN "
				"LineItemCorrectionsT AS OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID LEFT OUTER JOIN "
				"LineItemCorrectionsT AS VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID "
				"WHERE      (LineItemT_1.Deleted = 0) AND (LineItemT_1.Type = 1) AND (OrigLineItemsT.OriginalLineItemID IS NULL) AND  "
				"(VoidingLineItemsT.VoidingLineItemID IS NULL) "
				"GROUP BY AppliesT.DestID, AppliesT.SourceID) AS ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID)  "
				"AS GlassesOrderServicePaymentQ "
				"GROUP BY GlassesOrderServiceID) AS Payment_Q ON GlassesOrderServiceT.ID = Payment_Q.GlassesOrderServiceID LEFT OUTER JOIN "
				"SupplierT INNER JOIN "
				"PersonT AS SupplierPersonT ON SupplierT.PersonID = SupplierPersonT.ID ON GlassesOrderT.SupplierID = SupplierT.PersonID "
				"WHERE     (EMRMasterT.Deleted = 0) AND (EmrProvidersT.Deleted = 0) ");
			case 735:	// Optical Order Cost/Profit Analysis
				/* Version History
					// (j.dinatale 2012-05-22 11:49) - PLID 47400 - Created.  
				*/
				return _T(
					"SELECT  "
					"GlassesOrderT.ID AS OrderID,  "
					"GlassesOrderT.Description,   "
					"GlassesOrderT.LocationID AS LocID,   "
					"LocationsT.Name AS Location,   "
					"GlassesOrderT.PersonID AS PatID,   "
					"PatientsT.UserDefinedID,   "
					"PatPersonT.Last + ', ' + PatPersonT.First + ' ' + PatPersonT.Middle AS PatientName,   "
					"GlassesOrderT.GlassesOrderType AS OrderType,   "
					"CASE   "
					"WHEN GlassesOrderT.GlassesOrderType = 1/*vwotSpectacleLens*/   "
					"	THEN 'Glasses Order'   "
					"WHEN GlassesOrderT.GlassesOrderType = 3/*vwotContactLensPatient*/   "
					"	THEN 'Contact Lens Order'   "
					"END AS TypeOfOrderDesc,   "
					"SuppPersonT.Company AS Supplier,   "
					"GlassesOrderT.OrderCreateDate,   "
					"GlassesOrderT.ProviderID AS ProvID,   "
					"ProvPersonT.Last + ', ' + ProvPersonT.First + ' ' + ProvPersonT.Middle AS ProvName,   "
					"GlassesOrderT.OpticianID AS OpticianID,   "
					"OptPersonT.Last + ', ' + OptPersonT.First + ' ' + OptPersonT.Middle AS OpticianName,   "
					"GlassesOrderT.Date AS OrderDate,  "
					"ServiceT.Name AS ServiceName,  "
					"GlassesOrderServiceT.Quantity AS Qty,  "
					"GlassesOrderServiceT.OpticalLineItemCost AS UnitCost,  "
					"GlassesOrderServiceT.Price AS UnitPrice,  "
					"ROUND(CONVERT(money, (GlassesOrderServiceT.OpticalLineItemCost * GlassesOrderServiceT.Quantity), 2), 2) AS TotalCost,  "
					"ROUND(CONVERT(money, (GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity), 2), 2) AS TotalPrice,  "
					"COALESCE(GlassesServiceTotalDiscountsT.DiscountTotal, 0) AS DiscountTotal,  "
					"ROUND(CONVERT(money, ((GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity) - COALESCE(DiscountTotal, 0)), 2), 2) AS LineTotal,  "
					"COALESCE(AppliedPaysT.AmountApplied, 0) AS CurrPayAmount  "
					"FROM  "
					"GlassesOrderT  "
					"INNER JOIN GlassesOrderServiceT ON GlassesOrderT.ID = GlassesOrderServiceT.GlassesOrderID  "
					"LEFT JOIN (  "
					"	SELECT GlassesOrderServiceDiscountsT.GlassesOrderServiceID,  "
					"	SUM(  "
					"		ROUND((CONVERT(money,   "
					"		(GlassesOrderServiceT.Price * GlassesOrderServiceT.Quantity)  "
					"		* (CASE WHEN PercentOff IS NULL THEN 0 ELSE (CONVERT(float, PercentOff) / 100) END), 2)  "
					"		+ (CASE WHEN Discount IS NULL THEN 0 ELSE Discount END)), 2)  "
					"	) AS DiscountTotal  "
					"	FROM  "
					"	GlassesOrderServiceT  "
					"	INNER JOIN GlassesOrderServiceDiscountsT ON GlassesOrderServiceT.ID = GlassesOrderServiceDiscountsT.GlassesOrderServiceID  "
					"	WHERE GlassesOrderServiceT.ID IS NOT NULL "
					"	GROUP BY GlassesOrderServiceDiscountsT.GlassesOrderServiceID  "
					") GlassesServiceTotalDiscountsT ON GlassesOrderServiceT.ID = GlassesServiceTotalDiscountsT.GlassesOrderServiceID  "
					"LEFT JOIN (  "
					"	SELECT * FROM  "
					"	(  "
					"		SELECT   "
					"		ChargesT.ID AS ChargeID, GlassesOrderServiceID AS GlassesOrderServiceID   "
					"		FROM ChargesT  "
					"		LEFT JOIN LineItemT ON ChargesT.ID = LineItemT.ID  "
					"		INNER JOIN (   "
					"			SELECT DISTINCT BillsT.ID AS BillID   "
					"			FROM BillsT   "
					"			LEFT JOIN BillCorrectionsT ON BillsT.ID = BillCorrectionsT.OriginalBillID   "
					"			INNER JOIN (   "
					"				SELECT DISTINCT BillID   "
					"				FROM   "
					"				LineItemT   "
					"				INNER JOIN ChargesT ON LineItemT.ID = ChargesT.ID   "
					"				WHERE LineItemT.Deleted = 0 AND LineItemT.Type = 10  "
					"			) ChargesSubQ ON BillsT.ID = ChargesSubQ.BillID   "
					"			WHERE   "
					"			BillsT.Deleted = 0 AND BillCorrectionsT.ID IS NULL   "
					"			AND BillsT.EntryType = 1   "
					"		) AS ValidBillsQ ON ChargesT.BillID = ValidBillsQ.BillID  "
					"		LEFT JOIN LineItemCorrectionsT OrigLineItemsT ON ChargesT.ID = OrigLineItemsT.OriginalLineItemID  "
					"		LEFT JOIN LineItemCorrectionsT VoidingLineItemsT ON ChargesT.ID = VoidingLineItemsT.VoidingLineItemID  "
					"		WHERE   "
					"		LineItemT.Deleted = 0 AND LineItemT.Type = 10  "
					"		AND (OrigLineItemsT.OriginalLineItemID IS NULL AND VoidingLineItemsT.VoidingLineItemID IS NULL)  "
					"	) ValidChargesT  "
					"	LEFT JOIN (  "
					"		SELECT   "
					"		AppliesT.DestID AS DestinationID,   "
					"		SUM(COALESCE(AppliesT.Amount, 0)) AS AmountApplied  "
					"		FROM  "
					"		LineItemT  "
					"		INNER JOIN PaymentsT ON LineItemT.ID = PaymentsT.ID  "
					"		INNER JOIN AppliesT ON PaymentsT.ID = AppliesT.SourceID  "
					"		LEFT JOIN LineItemCorrectionsT OrigLineItemsT ON PaymentsT.ID = OrigLineItemsT.OriginalLineItemID  "
					"		LEFT JOIN LineItemCorrectionsT VoidingLineItemsT ON PaymentsT.ID = VoidingLineItemsT.VoidingLineItemID  "
					"		WHERE LineItemT.Deleted = 0 AND LineItemT.Type = 1 "
					"		AND (OrigLineItemsT.OriginalLineItemID IS NULL AND VoidingLineItemsT.VoidingLineItemID IS NULL)  "
					"		GROUP BY AppliesT.DestID "
					"	) ChargePaysT ON ValidChargesT.ChargeID = ChargePaysT.DestinationID  "
					") AppliedPaysT ON GlassesOrderServiceT.ID =  AppliedPaysT.GlassesOrderServiceID  "
					"LEFT JOIN LocationsT ON GlassesOrderT.LocationID = LocationsT.ID   "
					"LEFT JOIN PersonT PatPersonT ON GlassesOrderT.PersonID = PatPersonT.ID  "
					"LEFT JOIN PatientsT ON GlassesOrderT.PersonID = PatientsT.PersonID  "
					"LEFT JOIN PersonT SuppPersonT ON GlassesOrderT.SupplierID = SuppPersonT.ID   "
					"LEFT JOIN PersonT ProvPersonT ON GlassesOrderT.ProviderID = ProvPersonT.ID  "
					"LEFT JOIN PersonT OptPersonT ON GlassesOrderT.OpticianID = OptPersonT.ID  "
					"LEFT JOIN ServiceT ON GlassesOrderServiceT.ServiceID = ServiceT.ID  "
					"WHERE GlassesOrderT.IsDelete = 0 ");
				break;
		default:
		return _T("");
		break;
	}
}




