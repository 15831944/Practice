// VisionWebOrderDlg.cpp : implementation file
//

#include "stdafx.h"
#include "InventoryRc.h"
#include "VisionWebOrderDlg.h"
#include "InvVisionWebUtils.h"
#include "InvGlassesCatalogSetupDlg.h"
#include "MultiSelectDlg.h"
#include "InvView.h"
#include "AuditTrail.h"
#include "InvGlassesOrderConfirmationDlg.h"
#include "Barcode.h"
#include "ReportInfo.h"
#include "GlobalReportUtils.h"
#include "Reports.h"
#include <SharedInsuranceUtils.h>
#include "EMRPreviewPopupDlg.h"
#include "InternationalUtils.h"
#include "GlassesEMNPrescriptionList.h"
#include "boost/date_time/posix_time/posix_time.hpp"
#include "BillingDlg.h"
#include "ChargeDiscountDlg.h"
#include "InvFrameSelection.h"
#include <foreach.h>	// (j.dinatale 2013-03-29 09:20) - PLID 55936
#include "InvVisionWebDlg.h"
#include <OpticalUtils.h>

//TES 9/23/2010 - PLID 40539 - Created
// CVisionWebOrderDlg dialog

IMPLEMENT_DYNAMIC(CVisionWebOrderDlg, CNxDialog)

//TES 11/24/2010 - PLID 40864 - 0 and -1 are both valid values for prescription numbers, so use this define for "null" variables.
#define INVALID_RX_VALUE	-1000
CVisionWebOrderDlg::CVisionWebOrderDlg(CWnd* pParent /*=NULL*/)
	: CNxDialog(CVisionWebOrderDlg::IDD, pParent)
{
	// (s.dhole 2010-12-20 12:04) - PLID 40538 Check if order imnformation has been change
	m_bOrderChanged=FALSE;

	m_nOrderID = -1; 
	m_nPendingPatientID = -1;
	m_bFormattingField = false;
	m_nSupplierID = -1;
	m_nLensRxID = -1;
	m_nLeftRxDetailID = -1;
	m_nRightRxDetailID = -1; 
	m_nLeftLensOtherInfoID = -1;
	m_nRightLensOtherInfoID = -1;
	m_bAutoGenerateDescription = false;
	m_nLeftDesignID = -1;
	m_nRightDesignID = -1;
	m_nFrameTypeID = -1;
	m_nLeftMaterialID = -1;
	m_nRightMaterialID = -1;
	m_dSavedSphereL = INVALID_RX_VALUE;
	m_dSavedSphereR = INVALID_RX_VALUE;
	m_dSavedCylL = INVALID_RX_VALUE;
	m_dSavedCylR = INVALID_RX_VALUE;
	m_nSavedAxisL = INVALID_RX_VALUE;
	m_nSavedAxisR = INVALID_RX_VALUE;
	m_dSavedAdditionL = INVALID_RX_VALUE;
	m_dSavedAdditionR = INVALID_RX_VALUE;
	m_dSavedPrismL = INVALID_RX_VALUE;
	m_dSavedPrismR = INVALID_RX_VALUE;

	m_dSavedSecdPrismL = INVALID_RX_VALUE;
	m_dSavedSecdPrismR = INVALID_RX_VALUE;
	m_dSavedDistPdL = INVALID_RX_VALUE;
	m_dSavedDistPdR = INVALID_RX_VALUE;
	m_dSavedNearPdL = INVALID_RX_VALUE;
	m_dSavedNearPdR = INVALID_RX_VALUE;
	m_dSavedHeightL = INVALID_RX_VALUE;
	m_dSavedHeightR = INVALID_RX_VALUE;
	m_dSavedThicknessL = INVALID_RX_VALUE;
	m_dSavedThicknessR = INVALID_RX_VALUE;
	m_dSavedBoxA = INVALID_RX_VALUE;
	m_dSavedBoxB = INVALID_RX_VALUE;
	m_dSavedED = INVALID_RX_VALUE;
	m_dSavedDBL = INVALID_RX_VALUE;
	m_bLensesIdentical = true;
	m_bDesignHasParameters = false;
	m_bParameterListLoaded = false;
	m_nLocationID = -1;
	m_nPatientID = -1;
	m_bFrameChanged = false;
	m_nEmnID = -1;
	m_pEMRPreviewPopupDlg = NULL;
	m_nProviderID = -1;
	m_nPendingProviderID = -1;
	//m_nCurrentFrameProductID = -1;
	// (s.dhole 2012-03-15 15:39) - PLID 48821
	/*m_nLeftDesignCptID = -1;
	m_nRightDesignCptID = -1;*/
	m_bLeftDesignBillPerLens = FALSE;
	m_bRightDesignBillPerLens = FALSE;
	// (s.dhole 2012-03-15 15:39) - PLID 48821
	/*m_nLeftMaterialCptID = -1;
	m_nRightMaterialCptID = -1;*/
	m_bLeftMaterialBillPerLens = FALSE;
	m_bRightMaterialBillPerLens = FALSE;
	m_vwot = vwotSpectacleLens; //TES 5/24/2011 - PLID 43737 - Default to a Glasses Order
	m_bLoadingFrameFromData = false;
	m_bFrameCostChangedByUser = false;
	//m_bLensCostChangedByUser = false;
	//m_bCLCostChangedByUser = false;
	m_bChangingFrameCost = false;
	/*m_bChangingLensCost = false;
	m_bChangingCLCost = false;*/
	// (s.dhole 2012-04-09 12:05) - PLID 49518
	m_nFrameID =-1;
	m_nSavedFrameID =-1;
	m_nFrameProductID=-1;
	m_nSavedFrameProductID=-1;
	m_nRowID = 1;
	// (s.dhole 2012-03-15 15:41) - PLID 48811
	m_bSavedFrameToBeOrdered = FALSE;
	// (s.dhole 2012-04-16 11:22) - PLID 49728 
	m_bIsGlassesBilled = FALSE;
	// (s.dhole 2012-04-16 12:59) - PLID 49729 
	m_bIsGlassesvisionPlanExist= FALSE;
	// (s.dhole 2012-04-26 17:38) - PLID 49992
	m_nInsuredPartyID =-1;
	// (s.dhole 2012-05-07 18:16) - PLID 50131
	m_strGlassesInvoiceNo="";
	m_arLenseServiceInfo.RemoveAll();

	// (j.dinatale 2012-05-11 12:48) - PLID 50206
	m_strSavedOpticianName = "<None>";

	// (b.spivey, November 15, 2012) - PLID 53422 - init the flag. 
	// (j.dinatale 2013-02-11 10:19) - PLID 55093 - we now handle the off the shelf flag different, need to keep track if the 
	//		user manually changes something and what the last value for the manual set was
	m_bSoldOffShelfManualSet = false;
	m_bSoldOffShelfManualLastVal = false;

	m_bIncreaseItemToBillQty = true;	// (j.dinatale 2013-04-30 11:22) - PLID 56458 - keep track if we are increasing quantity (by default we do)
}

CVisionWebOrderDlg::~CVisionWebOrderDlg()
{
}

void CVisionWebOrderDlg::DoDataExchange(CDataExchange* pDX)
{
	CNxDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CVisionWebOrderDlg)
	DDX_Control(pDX, IDOK, m_nxbOK);
	DDX_Control(pDX, IDCANCEL, m_nxbCancel);
	DDX_Control(pDX, IDC_SPHERE_L, m_nxeSphereL);
	DDX_Control(pDX, IDC_SPHERE_R, m_nxeSphereR);
	DDX_Control(pDX, IDC_CYLINDER_L, m_nxeCylinderL);
	DDX_Control(pDX, IDC_CYLINDER_R, m_nxeCylinderR);
	DDX_Control(pDX, IDC_AXIS_L, m_nxeAxisL);
	DDX_Control(pDX, IDC_AXIS_R, m_nxeAxisR);
	DDX_Control(pDX, IDC_ADDITION_L, m_nxeAddnL);
	DDX_Control(pDX, IDC_ADDITION_R, m_nxeAddnR);
	DDX_Control(pDX, IDC_PRISM_L, m_nxePrismL);
	DDX_Control(pDX, IDC_PRISM_R, m_nxePrismR);
	DDX_Control(pDX, IDC_SECONDARY_PRISM_L, m_nxeSecdPrismL);
	DDX_Control(pDX, IDC_SECONDARY_PRISM_R, m_nxeSecdPrismR); 
	DDX_Control(pDX, IDC_BASE_L, m_nxeBaseL);
	DDX_Control(pDX, IDC_BASE_R, m_nxeBaseR);
	DDX_Control(pDX, IDC_SECONDARY_BASE_R, m_nxeBase2R);
	DDX_Control(pDX, IDC_SECONDARY_BASE_L, m_nxeBase2L); 
	DDX_Control(pDX, IDC_DIST_PD_L, m_nxeDistPDL);
	DDX_Control(pDX, IDC_DIST_PD_R, m_nxeDistPDR);
	DDX_Control(pDX, IDC_NEAR_PD_L, m_nxeNearPDL);
	DDX_Control(pDX, IDC_NEAR_PD_R, m_nxeNearPDR);
	DDX_Control(pDX, IDC_HEIGHT_L, m_nxeHeightL);
	DDX_Control(pDX, IDC_HEIGHT_R, m_nxeHeightR);
	DDX_Control(pDX, IDC_TREATMENT_COMMENTS_L, m_nxeTreatmentCommentsL);
	DDX_Control(pDX, IDC_TREATMENT_COMMENTS_R, m_nxeTreatmentCommentsR);
	DDX_Control(pDX, IDC_A_BOX, m_nxeABox);
	DDX_Control(pDX, IDC_B_BOX, m_nxeBBox);
	DDX_Control(pDX, IDC_DBL, m_nxeDbl);
	DDX_Control(pDX, IDC_ED, m_nxeED);
	DDX_Control(pDX, IDC_THICKNESS_L, m_nxeThicknessL);
	DDX_Control(pDX, IDC_THICKNESS_R, m_nxeThicknessR);
	DDX_Control(pDX, IDC_MANUFACTURER, m_nxeManufacturer);
	DDX_Control(pDX, IDC_STYLE, m_nxeStyle);
	DDX_Control(pDX, IDC_FRAME_COLOR, m_nxeColor);
	DDX_Control(pDX, IDC_TEMPLE_LENGTH, m_nxeTempleLength);
	DDX_Control(pDX, IDC_EYE_SIZE, m_nxeEyeSize);
	DDX_Control(pDX, IDC_SPECIAL_INSTRUCTIONS, m_nxeSpecialInstructions);
	DDX_Control(pDX, IDC_CATALOG_SETUP, m_nxbCatalogSetup);
	DDX_Control(pDX, IDC_VISIONWEB_ORDER_DESCRIPTION, m_nxeDescription);
	DDX_Control(pDX, IDC_TREATMENTS_LABEL_L, m_nxlTreatmentsL);
	DDX_Control(pDX, IDC_TREATMENTS_LABEL_R, m_nxlTreatmentsR);
	//DDX_Control(pDX, IDC_SUBMIT_TO_VISIONWEB, m_nxbSubmitToVisionWeb);
	DDX_Control(pDX, IDC_COPY_PRESCRIPTION, m_nxbCopyPrescription);
	DDX_Control(pDX, IDC_COPY_LENS, m_nxbCopyLens);
	DDX_Control(pDX, IDC_COPY_LENS_DESIGN, m_nxbCopyLensDesign);
	DDX_Control(pDX, IDC_CUSTOMIZE, m_nxbCustomize);
	DDX_Control(pDX, ID_GLASSES_ORDER_PRINTPREVIEWBTN, m_nxbPrintPreview);
	DDX_Control(pDX, ID_GLASSES_RX_PRINTPREVIEWBTN, m_nxbPrintPreviewRx);
	DDX_Control(pDX, IDC_CREATED_FROM_EMN, m_nxsCreatedFromEmn);
	DDX_Control(pDX, IDC_PREVIEW_EMN, m_nxbPreviewEmn);
	DDX_Control(pDX, IDC_SELECT_SERVICE_CODES, m_nxbServiceCodes);
	DDX_Control(pDX, IDC_SELECT_PRODUCTS, m_nxbProducts);
	DDX_Control(pDX, IDC_FRAME_COST, m_nxeFrameCost);
	DDX_Control(pDX, IDC_SELECT_PRISCRIPTION, m_nxbSelectPrescriptions);
	DDX_Control(pDX, IDC_GLASSES_ORD_INVO_NO, m_nxGlassesInvoiceNo);
	
}


BEGIN_MESSAGE_MAP(CVisionWebOrderDlg, CNxDialog)
	ON_BN_CLICKED(IDC_CATALOG_SETUP, &CVisionWebOrderDlg::OnCatalogSetup)
	ON_MESSAGE(NXM_NXLABEL_LBUTTONDOWN, OnLabelClick)
	ON_WM_SETCURSOR()
	ON_BN_CLICKED(IDC_COPY_PRESCRIPTION, &CVisionWebOrderDlg::OnCopyPrescription)
	ON_BN_CLICKED(IDC_COPY_LENS, &CVisionWebOrderDlg::OnCopyLens)
	ON_BN_CLICKED(IDC_COPY_LENS_DESIGN, &CVisionWebOrderDlg::OnCopyLensDesign)
	
	ON_EN_KILLFOCUS(IDC_VISIONWEB_ORDER_DESCRIPTION, &CVisionWebOrderDlg::OnKillfocusVisionwebOrderDescription)
	ON_EN_CHANGE(IDC_SPHERE_R, &CVisionWebOrderDlg::OnEnChangeSphereR)
	ON_EN_CHANGE(IDC_SPHERE_L, &CVisionWebOrderDlg::OnEnChangeSphereL)
	ON_EN_KILLFOCUS(IDC_TREATMENT_COMMENTS_R, &CVisionWebOrderDlg::OnKillfocusTreatmentCommentsR)
	ON_EN_KILLFOCUS(IDC_TREATMENT_COMMENTS_L, &CVisionWebOrderDlg::OnKillfocusTreatmentCommentsL)
	ON_BN_CLICKED(IDC_CUSTOMIZE, &CVisionWebOrderDlg::OnCustomize)
	ON_MESSAGE(WM_BARCODE_SCAN, &CVisionWebOrderDlg::OnBarcodeScan)
	ON_BN_CLICKED(IDOK2, &CVisionWebOrderDlg::OnBtnOredrPrintPreview)
	ON_BN_CLICKED(ID_GLASSES_RX_PRINTPREVIEWBTN, &CVisionWebOrderDlg::OnBtnOredrPrintPreviewRx)
	ON_BN_CLICKED(IDC_PREVIEW_EMN, &CVisionWebOrderDlg::OnPreviewEmn)
	ON_BN_CLICKED(IDC_SELECT_SERVICE_CODES, &CVisionWebOrderDlg::OnSelectServiceCodes)
	ON_BN_CLICKED(IDC_SELECT_PRODUCTS, &CVisionWebOrderDlg::OnSelectProducts)
	ON_EN_SETFOCUS(IDC_CYLINDER_R, &CVisionWebOrderDlg::OnSetFocusCylinderR)
	ON_EN_SETFOCUS(IDC_CYLINDER_L, &CVisionWebOrderDlg::OnSetFocusCylinderL)
	ON_WM_TIMER()
	ON_EN_KILLFOCUS(IDC_LENS_COST, &CVisionWebOrderDlg::OnKillfocusLensCost)
	ON_EN_KILLFOCUS(IDC_FRAME_COST, &CVisionWebOrderDlg::OnKillfocusFrameCost)
	ON_BN_CLICKED(IDC_SELECT_PRISCRIPTION, &CVisionWebOrderDlg::OnBnClickedSelectPriscription)
	ON_BN_CLICKED(IDC_CHK_FRAME_TO_BE_ORDERED, &CVisionWebOrderDlg::OnBnClickedChkFrameToBeOrdered)
	ON_EN_KILLFOCUS(IDC_THICKNESS_R, &CVisionWebOrderDlg::OnEnKillfocusThicknessR)
	ON_EN_KILLFOCUS(IDC_THICKNESS_L, &CVisionWebOrderDlg::OnEnKillfocusThicknessL)
END_MESSAGE_MAP()

enum PatientColumns
{
	pcID = 0,
	pcUserDefinedID = 1,
	pcName = 2,
};

enum LocationColumns
{
	lcID = 0,
	lcName = 1,
	
};

enum SupplierColumns
{
	scID = 0,
	scName = 1,
	scVisionWebID = 2,// (s.dhole 2010-11-12 11:54) - PLID 
	scArchived = 4, //(c.copits 2011-09-27) PLID 45112 - Disable "Glasses Catalog" button for inactive suppliers
};

enum OrderTypeColumns
{
	otcID = 0,
	otcName = 1,
};

enum JobTypeColumns
{
	jtcCode = 0,
	jtcName = 1,
};

enum FrameTypeColumns
{
	ftcID = 0,
	ftcName = 1,
};

// (s.dhole 2012-03-15 15:41) - PLID 48821 Remove ldcCptID
enum LensDesignColumns
{
	ldcID = 0,
	ldcName = 1,
	ldcCode = 2,
	ldcHasParams = 3, //TES 12/8/2010 - PLID 41715 - Added, tracks whether this design has any associated custom parameters
	ldcProcessTypeID = 4,
	ldcProcessTypeName = 5,
	ldcBillPerLens = 6,	//TES 5/20/2010 - PLID 43790
	ldcPrompt = 7,	// (j.dinatale 2013-03-29 09:20) - PLID 55936
};

// (s.dhole 2012-03-15 15:41) - PLID 48821 Remove lmcCptID
enum LensMaterialColumns
{
	lmcID = 0,
	lmcName = 1,
	lmcCode = 2,
	lmcProcessTypeID = 3,
	lmcProcessTypeName = 4,
	lmcBillPerLens = 5, //TES 5/22/2011 - PLID 43790
	lmcPrompt = 6,	// (j.dinatale 2013-03-29 09:20) - PLID 55936
};

// (s.dhole 2012-03-15 15:41) - PLID 48926 Remove ltcCptID
enum LensTreatmentColumns
{
	ltcID = 0,
	ltcName = 1,
	ltcCode = 2,
	ltcProcessTypeID = 3,
	ltcProcessTypeName = 4,
	ltcBillPerLens = 5,	//TES 5/22/2011 - PLID 43790
};

enum ThicknessTypeColumns
{
	ttcCode = 0,
	ttcName = 1,
};

enum FrameColumns
{
	fcServiceID = 0,
	fcServiceName = 1,
	fcLastCost = 2,
	fcPrice = 3,
	fcBarcode =4, 
	fcID = 5,
	fcSource = 6, //TES 4/6/2011 - PLID 43103
	fcManufacturer = 7,
	fcStyle = 8,
	fcColor = 9,
	fcA = 10,
	fcB = 11,
	fcDBL = 12,
	fcED = 13,
	fcTemple = 14,
	fcEye = 15,
	fcFPCCode = 16, //TES 12/16/2010 - PLID 41867
	fcBrand = 17, // (b.savon 2012-01-10 14:37) - PLID 46663
	fcCollection = 18, // (b.savon 2012-01-10 14:37) - PLID 46663
	fcBridge = 19, 
	fcFrameSize = 20 ,
	fcInsCode = 21,	// (j.dinatale 2013-02-27 12:22) - PLID 53423
};

//TES 12/14/2010 - PLID 41106
// (s.dhole 2012-04-25 17:05) - PLID 49992 
// (s.dhole 2012-06-05 10:45) - PLID 50777 Added Responsibility, Category
enum VisionPlanColumns
{
	vpcName = 0,
	vpcPriority = 1,
	vpcPersonID = 2,
	vpcCategoryCategoryType =3,
	vpcResponsibility =4,
	vpcCategory =5,
};

//TES 4/8/2011 - PLID 43058
enum ProviderColumns
{
	prcID = 0,
	prcName = 1,
};

//TES 4/12/2011 - PLID 43248
// (s.dhole 2012-03-15 15:44) - PLID 47398 added asccCost
enum AvailableServiceCodesColumns
{
	asccID = 0,
	asccCode = 1,
	asccSubCode = 2,
	asccDescription = 3,
	asccCost= 4,
	asccPrice = 5,
	asccBarcode = 6,
};

//TES 4/12/2011 - PLID 43248
// (s.dhole 2012-03-15 15:44) - PLID 48811 change order
enum AvailableProductsColumns
{
	apcID = 0,
	apcDescription = 1,
	apcCost = 2, //TES 6/30/2011 - PLID 44166
	apcPrice = 3,
	apcBarcode = 4, //r.wilson 3/5/2012 PLID 48294
	apcInsCode = 5,	// (j.dinatale 2013-02-27 14:29) - PLID 53423
};


//TES 4/12/2011 - PLID 43248
// (s.dhole 2012-03-15 15:47) - PLID 48357 added extra column 
// (s.dhole 2012-03-28 12:22) - PLID 43785 Discount Columns
// (s.dhole 2012-04-24 09:26) - PLID 47398 sscCost sscSavedCost
enum SelectedServicesColumns
{
	sscRowID =0 ,
	sscID =1 ,
	sscServiceID =2 ,
	sscCode =3 ,
	sscDescription =4 ,
	sscCost=5 ,
	sscSavedCost=6 ,
	sscPrice=7 ,
	sscSavedPrice=8 ,
	sscQty= 9,
	sscSavedQty=10 ,
	sscType=11 ,
	sscSavedType=12,
	sscDesignID=13 ,
	sscMaterialID=14 ,
	sscTreatmentID=15 ,
	sscIsOD=16 ,
	sscIsOS= 17 ,
	sscIsDefaultProduct= 18 ,
	sscIsOffTheShelf= 19 ,
	sscDiscount = 20 ,
	sscTotal = 21 ,
	sscVisionResp = 22 ,
	sscPatientResp = 23 ,
};

//TES 5/25/2011 - PLID 43737
enum ContactLensProductColumns
{
	clpcID = 0,
	clpcName = 1,
	clpcBarcode = 2,
};

// (j.dinatale 2012-04-09 14:18) - PLID 49536
namespace GlassesOrderOpticianList{
	enum GlassesOrderOpticianCols{
		ID = 0,
		Name = 1,
	};
};


//TES 4/6/2011 - PLID 43103 - Include frames that were created directly as Products (if they're still active), rather than being imported from the catalog.
#define DEFAULT_FRAMES_WHERE_CLAUSE	" (FramesDataT.IsCatalog = 0 OR FramesDataT.FPC Is Null) AND COALESCE(ServiceT.Active,1) = 1 "

// CVisionWebOrderDlg message handlers
using namespace ADODB;
using namespace NXDATALIST2Lib;
BOOL CVisionWebOrderDlg::OnInitDialog()
{
	CNxDialog::OnInitDialog();

	try {

		//TES 3/14/2011 - PLID 43103 - Bulk cache properties
		//TES 4/20/2011 - PLID 43288 - Added GlassesOrder_AutoAddFrameProduct
		//TES 5/13/2011 - PLID 43703 - Added GlassesOrder_DefaultCylinderNegative
		//TES 5/16/2011 - PLID 43701 - Added GlassesOrder_CopyPatientRx
		// (s.dhole 2011-11-23 17:13) - PLID 44160 Added IsRxExpirationdateRequired
		//r.wilson 3/12/2012 PLID 47609 - Added InvGlassesOrder_AutoCalcExpirationDateLength
		//r.wilson 4/23/2012 PLID 43702 - Added Inventory_AutoCheckShipToPatient
		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - Inventory_OptOrderOneIncreaseItemQty
		g_propManager.CachePropertiesInBulk("CVisionWebOrderDlg", propNumber,
			"(Username = '<None>' OR Username = '%s') AND ( \r\n"
			"	Name = 'GlassesOrderDlg_ShowOnlyProductFrames' \r\n"
			"	OR Name = 'VisionWeb_AutoCheckSubmit' \r\n"
			// (s.dhole 2012-03-12 11:23) - PLID  49925 Remove Save ToBeOrdered
			//"	OR Name = 'GlassesOrder_AutoAddFrameProduct' \r\n"
			"	OR Name = 'GlassesOrder_DefaultCylinderNegative' \r\n"
			"	OR Name = 'GlassesOrder_CopyPatientRx' \r\n"
			"	OR Name = 'IsRxExpirationdateRequired' \r\n"
			"	OR Name = 'InvGlassesOrder_AutoCalcExpirationDateLength' \r\n"
			"	OR Name = 'Inventory_AutoCheckShipToPatient' \r\n"
			"	OR Name = 'InvContactLensOrder_SoldOffShelfDefaultOn' \r\n"
			"	OR Name = 'Inventory_OptOrderOneIncreaseItemQty' \r\n"
			") \r\n"
			, _Q(GetCurrentUserName()));

		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - need to keep track if we are increasing the qty or not
		m_bIncreaseItemToBillQty = !!(GetRemotePropertyInt("Inventory_OptOrderOneIncreaseItemQty", 1, 0, "<None>", true));

		// (b.spivey, November 14, 2012) - PLID 53422 - this is a bool, not a BOOL or an int.
		// (b.spivey, November 26, 2012) - PLID 53422 - Default to not checked. 
		m_bAutoCheckSoldOffShelfNewOrder = !!(GetRemotePropertyInt("InvContactLensOrder_SoldOffShelfDefaultOn", 0, 0, "<None>", true));

		// (b.savon 2012-01-10 17:16) - PLID 46663 - Remember column widths automatically for Frames dropdown
		// (s.dhole 2012-04-17 16:01) - PLID 49518 change VisionOrderFrameColumnWidths to GlassesOrderFrameColumnWidths 
		g_propManager.CachePropertiesInBulk("CVisionWebOrderDlg_Columns", propText,
		"(Username = '<None>' OR Username = '%s') AND \r\n"
		"(Name = 'GlassesOrderFrameColumnWidths' \r\n"
		")"
		, _Q(GetCurrentUserName()));

		//TES 9/23/2010 - PLID 40539 - Set up our controls.
		//NxIconify
		m_nxbOK.AutoSet(NXB_OK);
		m_nxbCancel.AutoSet(NXB_CANCEL);
		m_nxbCopyPrescription.AutoSet(NXB_DOWN);
		m_nxbCopyLens.AutoSet(NXB_DOWN);
		m_nxbCopyLensDesign.AutoSet(NXB_DOWN);
		// (s.dhole 2012-01-12 12:22) - PLID 47396 Set text limit
		m_nxeSphereR.SetLimitText(8);
		m_nxeSphereL.SetLimitText(8);
		m_nxeCylinderR.SetLimitText(8);
		m_nxeCylinderL.SetLimitText(8);
		m_nxeAxisR.SetLimitText(8);
		m_nxeAxisL.SetLimitText(8);
		m_nxeAddnR.SetLimitText(8);
		m_nxeAddnL.SetLimitText(8);
		m_nxeAddnR.SetLimitText(8);
		m_nxeAddnL.SetLimitText(8);
		m_nxePrismL.SetLimitText(8);
		m_nxePrismR.SetLimitText(8);

		m_nxeSecdPrismL.SetLimitText(8);
		m_nxeSecdPrismR.SetLimitText(8);
		m_nxeDistPDR.SetLimitText(8);
		m_nxeDistPDL.SetLimitText(8);

		m_nxeNearPDR.SetLimitText(8);
		m_nxeNearPDL.SetLimitText(8);
		m_nxeHeightR.SetLimitText(8);
		m_nxeHeightL.SetLimitText(8);
		// (s.dhole 2012-05-07 18:16) - PLID 50131
		m_nxGlassesInvoiceNo.SetLimitText(18);

				//Set text limits.
		// (s.dhole 2012-02-07 09:51) - PLID 48004 Cahnge max limit to 15
		m_nxeBaseL.SetLimitText(15);
		m_nxeBaseR.SetLimitText(15);
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - set limit. 
		// (s.dhole 2012-02-07 09:51) - PLID 48004 Cahnge max limit to 15
		m_nxeBase2R.SetLimitText(15);
		m_nxeBase2L.SetLimitText(15); 

		m_nxbSelectPrescriptions.AutoSet(NXB_MODIFY);
		/// (s.dhole 2011-03-22 13:22) - PLID 42898 Print Preview Button Order
		m_nxbPrintPreview.AutoSet(NXB_PRINT_PREV);
		// (s.dhole 2011-05-04 12:55) - PLID 42953 Print Preview Button Rx
		m_nxbPrintPreviewRx.AutoSet(NXB_PRINT_PREV);
		//TES 3/23/2011 - PLID 42975
		m_nxbPreviewEmn.AutoSet(NXB_INSPECT);
		// (s.dhole 2011-04-05 09:44) - PLID 43039 set button style as modify
		m_nxbCatalogSetup.AutoSet(NXB_MODIFY );
		// (s.dhole 2011-05-16 12:12) - PLID 41986 Load bmp to Setup   checkbox button
		m_hBitmap = ::LoadBitmap(AfxGetApp()->m_hInstance, MAKEINTRESOURCE(IDB_VISIONWEB_SUBMIT_TO_LOGO));
			((CButton*)GetDlgItem(IDC_SUBMIT_TO_VISIONWEB))->SetBitmap(m_hBitmap);
		// (s.dhole 2012-01-18 13:24) - PLID 47455 Disabled button
		GetDlgItem(IDC_SELECT_PRISCRIPTION)->EnableWindow(FALSE);

		m_nxeTreatmentCommentsL.SetLimitText(255);
		m_nxeTreatmentCommentsR.SetLimitText(255);
		m_nxeSpecialInstructions.SetLimitText(255);
		m_nxeDescription.SetLimitText(255);

		//(r.wilson 4/19/2013) pl PLID 56307 - Set Text Limit
		m_nxeTempleLength.SetLimitText(10);
		m_nxeEyeSize.SetLimitText(3);

		//Set up our multiple treatment labels.
		m_nxlTreatmentsL.SetColor(0x00FFB9A8);
		m_nxlTreatmentsL.SetText("");
		m_nxlTreatmentsL.SetType(dtsHyperlink);
		m_nxlTreatmentsL.SetSingleLine();
		m_nxlTreatmentsR.SetColor(0x00FFB9A8);
		m_nxlTreatmentsR.SetText("");
		m_nxlTreatmentsR.SetType(dtsHyperlink);
		m_nxlTreatmentsR.SetSingleLine();
		// (s.dhole 2012-01-18 13:24) - PLID 47455 Disabled button
		IRowSettingsPtr pNewRow;
		//TES 4/8/2011 - PLID 43058
		m_pDate = BindNxTimeCtrl(this, IDC_VISIONWEB_ORDER_DATE);
		// (s.dhole 2011-04-27 10:48) - PLID 43451 
		m_pRxDate =BindNxTimeCtrl(this, IDC_GLASSES_ORDER_RX_DATE);
		// (s.dhole 2011-06-15 17:11) - PLID 43813
		m_pRxExpirationDate =BindNxTimeCtrl(this, IDC_GLASSES_ORDER_RX_DATE_EXPIRATION);
		
		// (s.dhole 2012-04-12 08:55) - PLID  43785 Discount Calculation
		SetDlgItemText(IDC_GLS_ORD_VISION_RESP_AMT,FormatCurrencyForInterface(COleCurrency(0,0)) ) ;
		SetDlgItemText(IDC_GLS_ORD_PATIENT_RESP_AMT,FormatCurrencyForInterface(COleCurrency(0,0))) ;
		SetDlgItemText(IDC_GLS_ORD_TOTAL_AMT,FormatCurrencyForInterface(COleCurrency(0,0))) ;

		//Datalists
		m_pPatient = BindNxDataList2Ctrl(IDC_VISIONWEB_PATIENT);

		// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
		// (s.dhole 2012-05-24 10:35) - PLID 48249 Order need location
		m_pLocation = BindNxDataList2Ctrl(IDC_VISIONWEB_LOCATION,true);
		//m_pLocation->Requery(); 
		
		// (s.dhole 2012-02-20 13:05) - PLID 48249 <No Location>  will be loaction
		m_pSupplier = BindNxDataList2Ctrl(IDC_VISIONWEB_SUPPLIER,false);
		
		//r.wilson 2012-20-2 PLID 46773   -> Moved code that was here to the function UpdateSupplierDataList
		// Loads the supplier datalist with values
		UpdateSupplierDataList();
		//(s.dhole 2012-02-08 17:18) - PLID 48033 Supplier can be optional
		// Append first Row and  <None>
		pNewRow = m_pSupplier->GetNewRow();
		pNewRow->PutValue(scID, -1);
		pNewRow->PutValue(scName, _bstr_t(" <None> "));
		pNewRow->PutValue(scArchived, (bool)FALSE);
		m_pSupplier->AddRowBefore(pNewRow, m_pSupplier->GetFirstRow());
	
		m_pJobType = BindNxDataList2Ctrl(IDC_VISIONWEB_JOB_TYPE, false);
		// (s.dhole 2012-02-08 16:54) - PLID 47979  first row should be <none>
		for(long i = vwjtNone; i < vwjt_LastEnum; i++) {
			pNewRow = m_pJobType->GetNewRow();
			pNewRow->PutValue(jtcCode, _bstr_t(GetVisionWebJobTypeCode((VisionWebJobType)i)));
			pNewRow->PutValue(jtcName, _bstr_t(GetVisionWebJobTypeDescription((VisionWebJobType)i)));
			m_pJobType->AddRowAtEnd(pNewRow,NULL);
		}
		// (s.dhole 2012-02-08 16:54) - PLID 47979  set first row 
		m_pJobType->FindByColumn( jtcCode,_bstr_t(""),NULL,g_cvarTrue );

		m_pLensDesignL = BindNxDataList2Ctrl(IDC_VISIONWEB_LENS_DESIGN_L, false);
		m_pLensDesignR = BindNxDataList2Ctrl(IDC_VISIONWEB_LENS_DESIGN_R, false);
		m_pLensMaterialL = BindNxDataList2Ctrl(IDC_VISIONWEB_LENS_MATERIAL_L, false);
		m_pLensMaterialR = BindNxDataList2Ctrl(IDC_VISIONWEB_LENS_MATERIAL_R, false);
		m_pLensTreatmentsL = BindNxDataList2Ctrl(IDC_VISIONWEB_LENS_TREATMENT_L, false);
		m_pLensTreatmentsR = BindNxDataList2Ctrl(IDC_VISIONWEB_LENS_TREATMENT_R, false);
		m_pFrameType = BindNxDataList2Ctrl(IDC_VISIONWEB_FRAME_TYPE, false);
		
		m_pThicknessType = BindNxDataList2Ctrl(IDC_VISIONWEB_THICKNESS_TYPE, false);

		// (j.dinatale 2012-04-09 19:26) - PLID 49536 - optician field
		m_pdlOpticianList = BindNxDataList2Ctrl(IDC_GLASSES_ORDER_OPTICIAN, true);
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOpticianList->GetNewRow();
			if(pRow){
				pRow->PutValue(GlassesOrderOpticianList::ID, -1);
				pRow->PutValue(GlassesOrderOpticianList::Name, "<None>");
				m_pdlOpticianList->AddRowBefore(pRow, m_pdlOpticianList->GetFirstRow());
			}
		}
		
		pNewRow = m_pThicknessType->GetNewRow();
		pNewRow->PutValue(ttcCode, _bstr_t("DRS"));
		pNewRow->PutValue(ttcName, _bstr_t("Lab decides best thickness"));
		m_pThicknessType->AddRowAtEnd(pNewRow, NULL);
		pNewRow = m_pThicknessType->GetNewRow();
		pNewRow->PutValue(ttcCode, _bstr_t("CTR"));
		pNewRow->PutValue(ttcName, _bstr_t("Center thickness"));
		m_pThicknessType->AddRowAtEnd(pNewRow, NULL);
		pNewRow = m_pThicknessType->GetNewRow();
		pNewRow->PutValue(ttcCode, _bstr_t("DRL"));
		pNewRow->PutValue(ttcName, _bstr_t("Thickness at drilling point"));
		m_pThicknessType->AddRowAtEnd(pNewRow, NULL);
		
	// (s.dhole 2012-02-20 17:54) - PLID 47979 Default thickness is <None>
		pNewRow = m_pThicknessType->GetNewRow();
		pNewRow->PutValue(ttcCode, _bstr_t(""));
		pNewRow->PutValue(ttcName, _bstr_t(" <None> "));
		m_pThicknessType->AddRowBefore(pNewRow, m_pThicknessType->GetFirstRow());
		m_pThicknessType->SetSelByColumn(ttcCode, _bstr_t(""));
		m_pThicknessType->CurSel = m_pThicknessType->GetFirstRow();
		ReflectThicknessType();
		
		m_pFrame = BindNxDataList2Ctrl(IDC_FRAME, false);
		
		//TES 12/14/2010 - PLID 41106 - Don't requery until we have a patient.
		m_pVisionPlans = BindNxDataList2Ctrl(IDC_VISION_PLANS, false);
		
		//TES 4/8/2011 - PLID 43058 - Added Provider
		m_pProvider = BindNxDataList2Ctrl(IDC_VISIONWEB_PROVIDER);

		//TES 4/12/2011 - PKLID 43248 - Added lists of available and selected services
		m_pServiceCodeList = BindNxDataList2Ctrl(IDC_AVAILABLE_SERVICE_CODES);
		m_pProductList = BindNxDataList2Ctrl(IDC_AVAILABLE_PRODUCTS, false);
		m_pServices = BindNxDataList2Ctrl(IDC_GLASSES_ORDER_SERVICES, false);

		//TES 4/12/2011 - PLID 43248 - Default to the Service Codes list
		CheckDlgButton(IDC_SELECT_SERVICE_CODES, BST_CHECKED);
		OnSelectServiceCodes();

		 
		//TES 9/23/2010 - PLID 40539 - If we were given an order ID, load it.
		if(m_nOrderID != -1) {
			LoadExistingOrder();
		}
		else {
			
			// (s.dhole 2012-06-21 09:08) - PLID 47396
			GetDlgItem(IDC_VISIONWEB_FRAME_TYPE)->EnableWindow(FALSE);
			// (s.dhole 2012-04-25 17:08) - PLID 49992
			m_pVisionPlans->Requery();

			m_pFrame->Requery(); 
			// (s.dhole 2012-02-02 10:15) - PLID 47396
			AddFirstRowToFrame();

			//TES 10/11/2010 - PLID 40539 - Default the location to the current location
			// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
			m_nLocationID = GetCurrentLocationID();
			SetLocation(GetCurrentLocationName());
			

			//TES 4/8/2011 - PLID 43058 - Default the Date field to today
			m_pDate->SetDateTime(COleDateTime::GetCurrentTime());
		
			//TES 6/29/2011 - PLID 44166 - Default the Cost fields to $0.00
			m_bChangingFrameCost = true;
			SetDlgItemText(IDC_FRAME_COST, FormatCurrencyForInterface(COleCurrency(0,0)));
			m_bChangingFrameCost = false;
			//m_bChangingLensCost = true;
			//SetDlgItemText(IDC_LENS_COST, FormatCurrencyForInterface(COleCurrency(0,0)));
			//m_bChangingLensCost = false;
			//m_bChangingCLCost = true;
			
			//TES 10/29/2010 - PLID 41197 - If this is a new order, we know we want to auto-generate the description.
			m_bAutoGenerateDescription = true;

			//TES 11/17/2010 - PLID 41528 - This is a new order, so auto-check the 'Submit To VisionWeb' box.
			AutoCheckSubmitBox();

			RefreshCatalogLists();
			//TES 12/9/2010 - PLID 40539 - The designs are refreshed separately.
			RefreshDesignLists();
			
			//TES 5/24/2011 - PLID 43737 - Show the appropriate controls for our order type
			ReflectOrderType();
			//(s.Dhole 2012-06-20) - PLID 48821 - Should call from else
			//TES 12/2/2010 - PLID 40539 - Enable the other fields if a Sphere value is entered.
			ReflectUsedLenses();
			//(s.Dhole 2012-07-03) - PLID 48821 - Should set this flag if we do not load order date
			m_bLensesIdentical = true;
		}
		// (s.dhole 2010-11-12 17:01) - PLID 41470 Disabled all Save and 
		if (!(GetCurrentUserPermissions(bioInvGlassesOrderTab) & ( sptWrite))) 
		{
			GetDlgItem(IDOK)->EnableWindow(FALSE);
			GetDlgItem(IDC_SUBMIT_TO_VISIONWEB)->EnableWindow(FALSE);
			GetDlgItem(IDC_CATALOG_SETUP)->EnableWindow(FALSE);
			GetDlgItem(ID_GLASSES_ORDER_PRINTPREVIEWBTN)->EnableWindow(FALSE);	// (s.dhole 2011-05-04 12:55) - PLID 42898 Disabled this button
			GetDlgItem(ID_GLASSES_RX_PRINTPREVIEWBTN)->EnableWindow(FALSE);// (s.dhole 2011-05-04 12:55) - PLID 42953 Disabled this button
			
		}
		// (c.haag 2010-11-29) - PLID 41124 - Update the title bar text based on the selected patient
		//TES 12/14/2010 - PLID 41106 - Renamed
		ReflectCurrentPatient();

		

		//TES 12/10/2010 - PLID 41109 - Register for barcode scans (we'll use them on frames).
		GetMainFrame()->RegisterForBarcodeScan(this);
		
		//TES 3/23/2011 - PLID 42975 - Show/Hide the controls related to the EMN this order was created from
		ReflectEmn();

	
		// (b.savon 2012-01-10 15:07) - PLID 46663 - Restore column widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			RestoreColumnWidths();
		}
	ApplyBilledSetting();
	//r.wilson 2/24/2012 -  PLID 43702  
	// Check preferences to see if we should automatically check the "ship to patient" checkbox
	//Note: only do this on new orders
	if(GetRemotePropertyInt("Inventory_AutoCheckShipToPatient", 1, 0, GetCurrentUserName(), true) && m_nOrderID == -1)
	{		
		CWnd *pwnd=GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT);
		((CButton *)pwnd)->SetCheck(TRUE);
	}
	// (s.dhole 2012-04-16 12:59) - PLID 49729 visionPlan not exist than hide vision ammount date
	CVisionWebOrderDlg::ApplyVisionPlanSetting();

	
	}NxCatchAll(__FUNCTION__);

	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}


void CVisionWebOrderDlg::LoadExistingOrder()
{
	//TES 9/23/2010 - PLID 40539 - Load from data.
	//TES 11/17/2010 - PLID 41528 - Added Submitted
	//TES 11/24/2010 - PLID 40864 - Added some information for auditing
	//TES 12/16/2010 - PLID 41867 - Information about the frame is now all copied into VisionWebFramesDataT.
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	//TES 3/23/2011 - PLID 42975 - Added EmnID, EmnDescription
	// (s.dhole 2011-03-29 17:46) - PLID 43040 added GlassesOrderT.GlassesOrderNumber, GlassesOrderT.OrderUploadDate 
	//TES 4/8/2011 - PLID 43058 - Added Date and ProviderID
	// (s.dhole 2011-04-27 10:48) - PLID 43451 Added LensRxT.RxDate
	//TES 5/25/2011 - PLID 43737 - Added ContactLensOrderInfoID
	// (s.dhole 2011-06-15 17:50) - PLID 43813 Added RxExpirationDate 
	//TES 6/29/2011 - PLID 44166 - Added FrameCost and LensCost
	// (s.dhole 2012-03-12 11:55) 48811 GlassesOrderT.FrameToBeOrdered 
	// (j.dinatale 2012-03-27 11:33) - PLID 49201 - load the bill ID of the bill this order is linked with
	// (s.dhole 2012-04-06 09:05) - PLID Frame  49518 load GlassesFramesDataID,FrameProductID
	// (j.dinatale 2012-04-09 19:12) - PLID 49536 - load the OpticianID	
	// (r.wilson 4/11/2012) PLID 43741 - Changed GlassesOrderStatus to GlassesOrderStatusID
	// (j.dinatale 2012-04-23 15:40) - PLID 49201 - only load valid and not voided or original bills
	// (s.dhole 2012-04-25 16:55) - PLID  added InsuredPartyID
	// (j.dinatale 2012-05-02 10:35) - PLID 49536 - pull foward the optician's name
	// (s.dhole 2012-05-08 08:51) - PLID 50131 Added GlassesOrderT.InvoiceNo  
	// (s.dhole 2012-06-14 10:03) - PLID 50929 Remove  GlassesOrderT.ContactLensOrderInfoID
	_RecordsetPtr rsOrderInfo = CreateParamRecordset("SELECT GlassesOrderT.LocationID, GlassesOrderT.PersonID, SupplierID, "
		"GlassesSupplierLocationID, GlassesOrderT.Description, GlassesOrderType,GlassesOrderStatusID, GlassesCatalogFrameTypeID, "
		"GlassesJobType, GlassesJobNote, ShipToPatient, "
		"ValidBillsQ.BillID AS BillID, "
		"LensRxT.RxDate,  LensRxT.RxExpirationDate," 
		"LensRxID, LensRxT.LeftLensDetailRxID, LensRxT.RightLensDetailRxID, "
		"LeftGlassesOrderOtherInfoID, RightGlassesOrderOtherInfoID, "
		" ShapeA , ShapeB , ShapeED , ShapeHalfDbl, "
		"CASE WHEN GlassesOrderT.ID IN (SELECT GlassesOrderID FROM GlassesOrderHistoryT) THEN 1 ELSE 0 END AS Submitted, "
		"PersonT.Last + ', ' + PersonT.First + ' ' + PersonT.Middle AS PatientName, LocationsT.Name AS LocationName, "
		"PersonSupplier.Company AS SupplierName, "
		"GlassesFramesDataT.StyleName, GlassesFramesDataT.ColorDescription, GlassesFramesDataT.ManufacturerName, "
		"GlassesFramesDataT.Temple, GlassesFramesDataT.Eye, GlassesFramesDataT.FPC, "
		"GlassesOrderT.EmnID, EmrMasterT.Description AS EmnDescription,  "
		"GlassesOrderT.GlassesOrderNumber, GlassesOrderT.OrderUploadDate, "
		"GlassesOrderT.Date, GlassesOrderT.ProviderID, "
		"PersonProvider.Last + ', ' + PersonProvider.First + ' ' + PersonProvider.Middle AS ProviderName, "
		"FrameCost, LensCost, GlassesOrderT.FrameToBeOrdered, "
		"GlassesFramesDataT.ID AS GlassesFramesDataID, "
		" GlassesOrderT.FrameProductID, "
		"GlassesOrderT.OpticianID AS OpticianID, (OpticiansT.Last + ', ' + OpticiansT.First + ' ' + OpticiansT.Middle) AS OpticianName, "
		"GlassesOrderT.InsuredPartyID , GlassesOrderT.InvoiceNo  "
		"FROM GlassesOrderT LEFT JOIN LensRxT ON GlassesOrderT.LensRxID = LensRxT.ID "
		"LEFT JOIN PersonT ON GlassesOrderT.PersonID = PersonT.ID "
		"LEFT JOIN LocationsT ON GlassesOrderT.LocationID = LocationsT.ID "
		"LEFT JOIN PersonT PersonSupplier ON GlassesOrderT.SupplierID = PersonSupplier.ID "
		"LEFT JOIN GlassesFramesDataT ON GlassesOrderT.GlassesFramesDataID = GlassesFramesDataT.ID "
		"LEFT JOIN EmrMasterT ON GlassesOrderT.EmnID = EmrMasterT.ID "
		"LEFT JOIN PersonT PersonProvider ON GlassesOrderT.ProviderID = PersonProvider.ID "
		"LEFT JOIN ( "
		"	SELECT DISTINCT BillsT.ID AS BillID "
		"	FROM BillsT "
		"	LEFT JOIN BillCorrectionsT ON BillsT.ID = BillCorrectionsT.OriginalBillID "
		"	INNER JOIN ( "
		"		SELECT DISTINCT BillID "
		"		FROM "
		"		LineItemT "
		"		INNER JOIN ChargesT ON LineItemT.ID = ChargesT.ID "
		" 		WHERE LineItemT.Deleted = 0 "
		"	) ChargesSubQ ON BillsT.ID = ChargesSubQ.BillID "
		"	WHERE BillsT.Deleted = 0 AND BillCorrectionsT.ID IS NULL "
		" ) AS ValidBillsQ ON  "
		"GlassesOrderT.BillID = ValidBillsQ.BillID "
		"LEFT JOIN PersonT OpticiansT ON GlassesOrderT.OpticianID = OpticiansT.ID "
		"WHERE IsDelete=0 AND GlassesOrderT.ID = {INT}", m_nOrderID);
	if(rsOrderInfo->eof) {
		//TES 9/23/2010 - PLID 40539 - How can this order not exist?
		MsgBox(MB_ICONERROR, "This VisionWeb Order could not be loaded.  It may have been deleted by another user.");
		EndDialog(IDCANCEL);
	}

	//TES 5/24/2011 - PLID 43737 - First, pull the order type, that will affect what other information we load.
	m_vwot = (VisionWebOrderType)AdoFldByte(rsOrderInfo, "GlassesOrderType");
	
	ReflectOrderType();

	//TES 6/29/2011 - PLID 44381 - Make sure not to requery the list until after ReflectOrderType,
	// because that now sets the embedded combo for the type column.
	//TES 4/12/2011 - PLID 43248 - The services just need to requery the datalist


	// (s.dhole 2011-03-29 17:46) -  PLID 43035 added GlassesOrderT.GlassesOrderNumber, GlassesOrderT.OrderUploadDate 
	if (AdoFldString(rsOrderInfo, "GlassesOrderNumber", "")!="")
	{
		m_strVisoinWebOrderID_DT= FormatString( ";  VisionWeb Order #: %s;  Date Of Submission: %s" ,  AdoFldString(rsOrderInfo, "GlassesOrderNumber", ""),
		FormatDateTimeForInterface(  AdoFldDateTime(rsOrderInfo, "OrderUploadDate" ), NULL, dtoDate ));
	}
	else
	{
		m_strVisoinWebOrderID_DT="";
	}
		// (s.dhole 2012-05-07 18:16) - PLID 50131
	m_strGlassesInvoiceNo =AdoFldString(rsOrderInfo, "InvoiceNo","");
	SetDlgItemText(IDC_GLASSES_ORD_INVO_NO,  m_strGlassesInvoiceNo );

	
	m_nInsuredPartyID=AdoFldLong(rsOrderInfo, "InsuredPartyID", -1);
	// (s.dhole 2012-06-04 17:51) - PLID 49992
	if (m_nInsuredPartyID>0 ){
		m_bIsGlassesvisionPlanExist =TRUE;
	}
	else	{
		m_bIsGlassesvisionPlanExist =FALSE;
	}
	// (j.dinatale 2012-03-27 11:37) - PLID 49201 - show the billID if we have one!
	long nBillID = AdoFldLong(rsOrderInfo, "BillID", -1);
	if(nBillID != -1){
		CString strBillLabelText;
		strBillLabelText.Format("Bill No. %li", nBillID);
		SetDlgItemText(IDC_GLS_ORD_BILL_LABEL, strBillLabelText);
		m_bIsGlassesBilled = TRUE;
	}
	
		
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have frame data
	if(m_vwot == vwotSpectacleLens) {
		// (s.dhole 2010-11-08 11:30) - PLID 40539
		DOUBLE dShapeA= AdoFldDouble(rsOrderInfo, "ShapeA",0.0);// (s.dhole 2010-11-08 11:30) - PLID 40539
		DOUBLE dShapeB= AdoFldDouble(rsOrderInfo, "ShapeB",0.0);// (s.dhole 2010-11-08 11:30) - PLID 40539
		DOUBLE dShapeED= AdoFldDouble(rsOrderInfo, "ShapeED",0.0);// (s.dhole 2010-11-08 11:30) - PLID 40539
		DOUBLE dShapeDBL= AdoFldDouble(rsOrderInfo, "ShapeHalfDbl",0.0);// (s.dhole 2010-11-08 11:30) - PLID 40539
		if (dShapeA>0) {
			SetDlgItemText(IDC_A_BOX,  AsString(dShapeA));
			//TES 11/30/2010 - PLID 40864 - Cache for auditing
			m_dSavedBoxA = dShapeA;
		}
		else {
			SetDlgItemText(IDC_A_BOX,  "");
		}
		if (dShapeB>0) {
			SetDlgItemText(IDC_B_BOX,  AsString(dShapeB));
			//TES 11/30/2010 - PLID 40864 - Cache for auditing
			m_dSavedBoxB = dShapeB;
		}
		else  {
			SetDlgItemText(IDC_B_BOX,  "");
		}
		if (dShapeED>0) {
			SetDlgItemText(IDC_ED, AsString(dShapeED));
			//TES 11/30/2010 - PLID 40864 - Cache for auditing
			m_dSavedED = dShapeED;
		}
		else {
			SetDlgItemText(IDC_ED, "");
		}

		if (dShapeDBL>0) {
			SetDlgItemText(IDC_DBL,  AsString(dShapeDBL));
			//TES 11/30/2010 - PLID 40864 - Cache for auditing
			m_dSavedDBL = dShapeDBL;
		}
		else {
			SetDlgItemText(IDC_DBL,  "");
		}

		//TES 6/29/2011 - PLID 44166 - Load the Frame Cost
		_variant_t varFrameCost = rsOrderInfo->Fields->GetItem("FrameCost")->Value;
		m_bChangingFrameCost = true;
		SetDlgItemVar(IDC_FRAME_COST, varFrameCost);
		m_bChangingFrameCost = false;
		m_cySavedFrameCost = VarCurrency(varFrameCost);
	}

	//TES 9/23/2010 - PLID 40539 - Patient
	long nPatientID = AdoFldLong(rsOrderInfo, "PersonID");
	//TES 11/24/2010 - PLID 40864 - Cache original value
	m_strSavedPatientName = AdoFldString(rsOrderInfo, "PatientName", "");
	long nSel = m_pPatient->TrySetSelByColumn_Deprecated(pcID, nPatientID);
	if(nSel == sriNoRow) {
		//maybe it's inactive?
		_RecordsetPtr rsPatient = CreateParamRecordset("SELECT Last +  ', ' + First + ' ' + Middle AS Name FROM PersonT "
			"WHERE ID = {INT}", nPatientID);
		if(!rsPatient->eof) {
			m_nPendingPatientID = nPatientID;
			m_pPatient->PutComboBoxText(_bstr_t(AdoFldString(rsPatient, "Name", "")));
		}
		else {
			m_pPatient->PutCurSel(NULL);
		}
	}
	else if(nSel == sriNoRowYet_WillFireEvent) {
		m_nPendingPatientID = nPatientID;
	}

	//TES 9/23/2010 - PLID 40539 - Location
	// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
	m_nLocationID = AdoFldLong(rsOrderInfo, "LocationID",-1);
	//TES 11/24/2010 - PLID 40864 - Cache original value
	m_strSavedLocationName = AdoFldString(rsOrderInfo, "LocationName", "");
	// (s.dhole 2012-02-20 15:32) - PLID 48249 location can be optional
	// (s.dhole 2012-05-24 10:33) - PLID 48249 location is not optional
	if (m_nLocationID==-1)
		m_strSavedLocationName = " <No Location> ";
	SetLocation(m_strSavedLocationName);

	//TES 4/8/2011 - PLID 43058 - Provider (can be NULL)
	m_nProviderID = AdoFldLong(rsOrderInfo, "ProviderID", -1);
	m_strSavedProviderName = AdoFldString(rsOrderInfo, "ProviderName", "");
	if(m_nProviderID != -1) {
		long nSel = m_pProvider->TrySetSelByColumn_Deprecated(prcID, m_nProviderID);
		if(nSel == sriNoRow) {
			//maybe it's inactive?
			_RecordsetPtr rsProvider = CreateParamRecordset("SELECT Last +  ', ' + First + ' ' + Middle AS Name FROM PersonT "
				"WHERE ID = {INT}", m_nProviderID);
			if(!rsProvider->eof) {
				m_nPendingProviderID = m_nProviderID;
				m_pProvider->PutComboBoxText(_bstr_t(AdoFldString(rsProvider, "Name", "")));
			}
			else {
				m_pProvider->PutCurSel(NULL);
			}
		}
		else if(nSel == sriNoRowYet_WillFireEvent) {
			m_nPendingProviderID = m_nProviderID;
		}
	}
	else {
		m_pProvider->CurSel = NULL;
	}


	//TES 9/23/2010 - PLID 40539 - Supplier
	// (s.dhole 2012-02-16 12:12) - PLID 
	m_nSupplierID = AdoFldLong(rsOrderInfo, "SupplierID",-1);
	//TES 11/24/2010 - PLID 40864 - Cache original value
	
	// (s.dhole 2012-02-20 16:38) - PLID 48033 Supplier can be optional
	if (m_nSupplierID > -1){
		m_strSavedSupplierName = AdoFldString(rsOrderInfo, "SupplierName", "");
	}
	else {
		m_strSavedSupplierName = " <None> ";
	}
	//Now that we've got a supplier, load the supplier-specific lists
	RefreshCatalogLists();

	//Description
	CString strDescription = AdoFldString(rsOrderInfo, "Description","");
	SetDlgItemText(IDC_VISIONWEB_ORDER_DESCRIPTION, strDescription);
	//TES 11/24/2010 - PLID 40864 - Cache original value
	m_strSavedDescription = strDescription;

	// (s.dhole 2010-11-12 15:18) - PLID If order status is submitted than do not allow user to change order
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses		
	// (r.wilson 4/11/2012) PLID 43741 - Changed GlassesOrderStatus to GlassesOrderStatusID
	// OrderStatus
	long nOrderStatus = AdoFldLong(rsOrderInfo, "GlassesOrderStatusID", -1);
	if(nOrderStatus == 2) {
		GetDlgItem(IDOK)->EnableWindow(FALSE);
		GetDlgItem(IDC_SUBMIT_TO_VISIONWEB)->EnableWindow(FALSE);
		GetDlgItem(ID_GLASSES_ORDER_PRINTPREVIEWBTN)->EnableWindow(FALSE);	// (s.dhole 2011-05-04 12:55) - PLID 42898 Disabled this button
		GetDlgItem(ID_GLASSES_RX_PRINTPREVIEWBTN)->EnableWindow(FALSE);// (s.dhole 2011-05-04 12:55) - PLID 42953 Disabled this button
	}


	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have frames.
	if(m_vwot == vwotSpectacleLens) {	
		//Frame Type
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		m_nFrameTypeID = AdoFldLong(rsOrderInfo, "GlassesCatalogFrameTypeID", -1);
		if(m_nFrameTypeID != -1) {
			m_pFrameType->SetSelByColumn(ftcID, m_nFrameTypeID);
		}
		//TES 11/29/2010 - PLID 40864 - Cache original value
		if(m_pFrameType->CurSel) {
			m_strSavedFrameType = VarString(m_pFrameType->CurSel->GetValue(ftcName));
		}
		else {
			// (s.dhole 2012-02-21 11:04) - PLID 47396 We may not be executing this code but in case
			m_strSavedFrameType = " <None> ";
		}

		//Frame
		//TES 12/16/2010 - PLID 41867 - This data is now all stored in VisionWebFramesDataT (instead of just a reference to FramesDataT),
		// so load it, and then go ahead and select the corresponding row if it happens to exist.
		CString strManufacturer = AdoFldString(rsOrderInfo, "ManufacturerName", "");
		SetDlgItemText(IDC_MANUFACTURER, strManufacturer);
		CString strStyle = AdoFldString(rsOrderInfo, "StyleName", "");
		SetDlgItemText(IDC_STYLE, strStyle);
		CString strColor = AdoFldString(rsOrderInfo, "ColorDescription", "");
		SetDlgItemText(IDC_FRAME_COLOR, strColor);
		CString strTempleLength = AdoFldString(rsOrderInfo, "Temple", "");
		//(r.wilson 4/19/2013) pl PLID 56307 - Store the loaded temple length so later we can compare it with whats in the textbox to 
		//									    determine if we should save or not.
		long nTempleLength = atoi(strTempleLength.GetString());
		if (nTempleLength > 0) {
			SetDlgItemText(IDC_TEMPLE_LENGTH, strTempleLength);
			m_strLoadedTempleLength = strTempleLength;
		}

		CString strEyeSize = AdoFldString(rsOrderInfo, "Eye", "");
		//(r.wilson 4/19/2013) pl PLID 56307 - Store the loaded eye size so later we can compare it with whats in the textbox to 
		//									    determine if we should save or not.
	
		long nEyeSize = atoi(strEyeSize.GetString());
		if(nEyeSize > 0){
			SetDlgItemText(IDC_EYE_SIZE, strEyeSize);
			m_strLoadedEyeSize = strEyeSize;
		}		
		CString strFPC = AdoFldString(rsOrderInfo, "FPC", "");
		// (s.dhole 2012-03-12 12:04) - PLID 48811
		m_bSavedFrameToBeOrdered  = AdoFldBool( rsOrderInfo, "FrameToBeOrdered", FALSE );
		SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED,m_bSavedFrameToBeOrdered );

		// (j.dinatale 2013-02-11 09:58) - PLID 55093 - if they are loading an existing order, we just assume it was manually set
		m_bSoldOffShelfManualLastVal = !!m_bSavedFrameToBeOrdered;
		m_bSoldOffShelfManualSet = true;

		// (s.dhole 2012-04-09 12:05) - PLID 49518 We should read product frame first then 
		_RecordsetPtr  rsFrameRec = CreateParamRecordset("SELECT TOP 1  FramesDataT.ID FROM FramesDataT INNER JOIN GlassesFramesDataT ON FramesDataT.FPC = GlassesFramesDataT.FPC AND FramesDataT.IsCatalog = GlassesFramesDataT.IsCatalog "
					" WHERE GlassesFramesDataT.ID  = {INT} ", AdoFldLong(rsOrderInfo, "GlassesFramesDataID", -1));
		if (!rsFrameRec->eof)
		{
			m_nFrameID = AdoFldLong(rsFrameRec, "ID", -1); 
			m_nSavedFrameID = m_nFrameID;
		}
		m_nFrameProductID = AdoFldLong(rsOrderInfo, "FrameProductID", -1); 

		if  (m_nFrameProductID==-1) 
		{
			_RecordsetPtr  rsFrameProductRec = CreateParamRecordset("SELECT TOP 1  ProductT.ID FROM ProductT INNER JOIN FramesDataT ON ProductT.FramesDataID = FramesDataT.ID "
			" WHERE FramesDataT.ID  = {INT}  ", m_nFrameID);
			if (!rsFrameProductRec ->eof)
			{
				m_nFrameProductID  = AdoFldLong(rsFrameProductRec , "ID", -1); 
			}
		}
        //s.dhole 06/27/2012  PLID 48821 Should disabled frame type if frame product is not exist 
		// since  ReflectUsedLenses function  will call if order not exist then we need to explicitly disabled this control
		if (m_nFrameProductID ==-1){
			GetDlgItem(IDC_VISIONWEB_FRAME_TYPE)->EnableWindow(FALSE);
		}

		m_nSavedFrameProductID =m_nFrameProductID; 
		//m_nCurrentFrameProductID=m_nFrameProductID; 
		// (s.dhole 2012-04-12 12:58) - PLID 49518 if product is inactive or deleted
		CString strFramWhere =  DEFAULT_FRAMES_WHERE_CLAUSE;
	
		if ( m_nFrameProductID>0){
			strFramWhere += FormatString(  " OR (ProductT.ID= %li ) " ,m_nFrameProductID); 
		}
		if (m_nFrameID>0){
			strFramWhere += FormatString(  " OR ((FramesDataT.IsCatalog = 1 )  and FramesDataT.FPC= '%s') " ,strFPC); 	
		}
		m_pFrame->WhereClause = bstr_t(strFramWhere );		
		m_pFrame->Requery(); 
		AddFirstRowToFrame();
		if(!strFPC.IsEmpty()) {
			long nSel = m_pFrame->TrySetSelByColumn_Deprecated(fcFPCCode, _bstr_t(strFPC));
			if(nSel == sriNoRow) {
				//TES 4/20/2011 - PLID 43275 - maybe it's inactive?
				// (s.dhole 2012-04-06 09:05) - PLID Frame  49518 load  frame name from serviceT or GlassesFramesDataT since we try to load existing order 
				_RecordsetPtr  rsFrame;
					if (m_nFrameProductID>0){
						rsFrame = CreateParamRecordset("Select Name  from serviceT  WHERE ID = {INT} ",m_nFrameProductID );
					}
					else if (m_nFrameID>0){
						rsFrame = CreateParamRecordset(
					" SELECT (ISNULL( FramesDataT.CollectionName,'')  + ', '  + ISNULL( FramesDataT.BrandName,'')  +  \r\n"
					" ', ' + ISNULL( FramesDataT.StyleName,'')  + ', ' +  ISNULL( FramesDataT.ColorDescription,'')  +  \r\n"
					" ', ' + ISNULL(FramesDataT.ColorCode,'') + ', ' + ' ' + ISNULL( FramesDataT.Eye,'') + ' - ' +  \r\n"
					" ISNULL(FramesDataT.Bridge,'') +  + ' - '  + ISNULL(FramesDataT.Temple,'')) as Name \r\n"
  					" FROM FramesDataT INNER JOIN GlassesFramesDataT  ON FramesDataT.FPC= GlassesFramesDataT.FPC    \r\n"
					" AND FramesDataT.ISCatalog = 1 AND GlassesFramesDataT.ID= {INT}  \r\n", m_nFrameID);
					}
				if( (m_nFrameID>0 || m_nFrameProductID>0)  && (!rsFrame->eof)) {
					m_strPendingFrameFPC = strFPC;
					//TES 6/7/2011 - PLID 43275 - Remember that we're loading from data
					m_bLoadingFrameFromData = true;
					m_pFrame->PutComboBoxText(_bstr_t(AdoFldString(rsFrame, "Name", "")));
					m_strSavedFrame =AdoFldString(rsFrame, "Name", "");
				}
				else {
					m_pFrame->PutCurSel(NULL);
				}
			}
		}
		else {
			// (s.dhole 2012-02-06 15:00) - PLID  47396
			m_strSavedFrame = " <None> ";
			m_pFrame->PutComboBoxText(_bstr_t(" <None> "));
			SetFrameFields(TRUE,FALSE);
		}
	}

	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have job type or job note
	if(m_vwot == vwotSpectacleLens) {	
		//Job Type
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		CString strJobType = AdoFldString(rsOrderInfo, "GlassesJobType", "");
		if(!strJobType.IsEmpty()) {
			m_pJobType->SetSelByColumn(jtcCode, _bstr_t(strJobType));
		}
		//TES 11/29/2010 - PLID 40864 - Cache original value
		if(m_pJobType->CurSel) {
			m_strSavedJobType = VarString(m_pJobType->CurSel->GetValue(jtcName));
		}
		else {
			// (s.dhole 2012-02-21 09:47) - PLID 47979 This is condition is not possible but as precautions added this code
			m_strSavedJobType = "<None>";
		}

		//Job Note
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		CString strJobNote = AdoFldString(rsOrderInfo, "GlassesJobNote", "");
		SetDlgItemText(IDC_SPECIAL_INSTRUCTIONS, strJobNote);
		//TES 11/29/2010 - PLID 40864 - Cache original value
		m_strSavedJobNote = strJobNote;

		//TES 6/29/2011 - PLID 44166 - Save the Lens Cost
		_variant_t varLensCost = rsOrderInfo->Fields->GetItem("LensCost")->Value;
		
		m_bChangingLensCost = true;
		SetDlgItemVar(IDC_LENS_COST, varLensCost);
		m_bChangingLensCost = false;

		m_cySavedLensCost = VarCurrency(varLensCost);
		// (s.dhole 2010-06-11 10:18) - PLID 50927 Support historical Lens cost 
		// if this value is more than 0 then Show control else hide it, since we are not supporting this anymore
		if (varLensCost.vt== VT_CY  &&  VarCurrency(varLensCost) >COleCurrency(0,0)){
			GetDlgItem(IDC_LENS_COST)->ShowWindow(SW_SHOW );
			GetDlgItem(IDC_LENS_COST_LABEL)->ShowWindow(SW_SHOW );
		}
		else{
			GetDlgItem(IDC_LENS_COST)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_LENS_COST_LABEL)->ShowWindow(SW_HIDE );
		}
	}

	//Remember our LensRxID
	m_nLensRxID = AdoFldLong(rsOrderInfo, "LensRxID", -1);

	//TES 3/23/2011 - PLID 42975 - Added EmnID and EmnDescription
	m_nEmnID = AdoFldLong(rsOrderInfo, "EmnID", -1);
	m_nLastEMN  =m_nEmnID; 
	m_nEMNPatientID =nPatientID ;
	
	m_strEmnDescription = AdoFldString(rsOrderInfo, "EmnDescription", "");

	//TES 4/8/2011 - PLID 43058 - Date
	m_dtSavedDate = AdoFldDateTime(rsOrderInfo, "Date");
	m_pDate->SetDateTime(m_dtSavedDate);
	// (s.dhole 2011-04-27 10:48) - PLID 43451 
	_variant_t varRxDate = rsOrderInfo->Fields->Item["RxDate"]->Value;
	if(varRxDate.vt == VT_DATE) {
		m_dtSavedRxDate = VarDateTime(varRxDate);
		m_pRxDate->SetDateTime(VarDateTime(varRxDate));
	}
	else {
		m_pRxDate->Clear();
	}
	// (s.dhole 2011-06-15 17:11) - PLID 43813 Expiration Date
	_variant_t varRxExpirationDate = rsOrderInfo->Fields->Item["RxExpirationDate"]->Value;
	if(varRxExpirationDate.vt == VT_DATE) {
		m_dtSavedRxExpiration = VarDateTime(varRxExpirationDate);
		m_pRxExpirationDate->SetDateTime(VarDateTime(varRxExpirationDate));
	}
	else {
		m_pRxExpirationDate->Clear();
	}

	//Left Lens
	m_nLeftRxDetailID = AdoFldLong(rsOrderInfo, "LeftLensDetailRxID", -1);
	if(m_nLeftRxDetailID != -1) {
		//Pull the lens information.
		// (b.spivey, October 17, 2011) - PLID 44918 - Added SecondaryPrismValue. 
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - select base2 value
		_RecordsetPtr rsLensInfo = CreateParamRecordset("SELECT PrescriptionSphere, FarHalfPd, CylinderValue, CylinderAxis, "
			"AdditionValue, PrismValue, SecondaryPrismValue, PrismAxis, PrismAxisStr, NearHalfPd, SegHeight,PrismAxis2, PrismAxisStr2 "
			"FROM LensDetailRxT WHERE ID = {INT}", m_nLeftRxDetailID);

		DOUBLE dSphere = AdoFldDouble(rsLensInfo, "PrescriptionSphere");
		SetDlgItemText(IDC_SPHERE_L, AsString(dSphere));
		FormatPrescriptionNumber(IDC_SPHERE_L, pnfSignedFloat);
		//TES 11/24/2010 - PLID 40864 - Cache original value
		m_dSavedSphereL = dSphere;

		_variant_t varCylinder = rsLensInfo->Fields->GetItem("CylinderValue")->Value;
		if(varCylinder.vt != VT_NULL) {
			SetDlgItemText(IDC_CYLINDER_L, AsString(varCylinder));
			FormatPrescriptionNumber(IDC_CYLINDER_L, pnfSignedFloat);
			//TES 11/24/2010 - PLID 40864 - Cache original value
			m_dSavedCylL = VarDouble(varCylinder);
		}

		_variant_t varAxis = rsLensInfo->Fields->GetItem("CylinderAxis")->Value;
		if(varAxis.vt != VT_NULL) {
			SetDlgItemText(IDC_AXIS_L, AsString(varAxis));
			//TES 11/24/2010 - PLID 40864 - Cache original value
			m_nSavedAxisL = VarLong(varAxis);
		}

		_variant_t varAddition = rsLensInfo->Fields->GetItem("AdditionValue")->Value;
		if(varAddition.vt != VT_NULL) {
			SetDlgItemText(IDC_ADDITION_L, AsString(varAddition));
			FormatPrescriptionNumber(IDC_ADDITION_L, pnfUnsignedFloat);
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedAdditionL = VarDouble(varAddition);
		}

		_variant_t varPrism = rsLensInfo->Fields->GetItem("PrismValue")->Value;
		if(varPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_PRISM_L, AsString(varPrism));
			FormatPrescriptionNumber(IDC_PRISM_L, pnfUnsignedFloat);
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedPrismL = VarDouble(varPrism);
		}
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - set base 2 value. 
		// (b.spivey, October 17, 2011) - PLID 44918 - Added secondary prism
		_variant_t varSecdPrism = rsLensInfo->Fields->GetItem("SecondaryPrismValue")->Value;
		if (varSecdPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_PRISM_L, AsString(varSecdPrism)); 
			FormatPrescriptionNumber(IDC_SECONDARY_PRISM_L, pnfUnsignedFloat);
			m_dSavedSecdPrismL = VarDouble(varSecdPrism); 
		}

		_variant_t varAxisVal = rsLensInfo->Fields->GetItem("PrismAxis")->Value;
		if(varAxisVal.vt == VT_NULL) {
			SetDlgItemText(IDC_BASE_L, AdoFldString(rsLensInfo, "PrismAxisStr", ""));
		}
		else {
			SetDlgItemText(IDC_BASE_L, AsString(varAxisVal));
		}
		FormatPrescriptionNumber(IDC_BASE_L, pnfBase);
		//TES 11/29/2010 - PLID 40864 - Cache original value
		GetDlgItemText(IDC_BASE_L, m_strSavedBaseL);

		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - set base 2 value
		_variant_t varAxisVal2 = rsLensInfo->Fields->GetItem("PrismAxis2")->Value;
		if(varAxisVal2.vt == VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_BASE_L, AdoFldString(rsLensInfo, "PrismAxisStr2", ""));
		}
		else {
			SetDlgItemText(IDC_SECONDARY_BASE_L, AsString(varAxisVal2));
		}
		FormatPrescriptionNumber(IDC_SECONDARY_BASE_L, pnfBase);
		GetDlgItemText(IDC_SECONDARY_BASE_L, m_strSavedBaseL2);
		

		DOUBLE dDistPD = AdoFldDouble(rsLensInfo, "FarHalfPd");
		SetDlgItemText(IDC_DIST_PD_L, AsString(dDistPD));
		FormatPrescriptionNumber(IDC_DIST_PD_L, pnfNaturalFloat);
		//TES 11/29/2010 - PLID 40864 - Cache original value
		m_dSavedDistPdL = dDistPD;

		_variant_t varNearPD = rsLensInfo->Fields->GetItem("NearHalfPd")->Value;
		if(varNearPD.vt != VT_NULL) {
			SetDlgItemText(IDC_NEAR_PD_L, AsString(varNearPD));
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedNearPdL = VarDouble(varNearPD);
		}
		FormatPrescriptionNumber(IDC_NEAR_PD_L, pnfNaturalFloat);

		_variant_t varHeight = rsLensInfo->Fields->GetItem("SegHeight")->Value;
		if(varHeight.vt != VT_NULL) {
			SetDlgItemText(IDC_HEIGHT_L, AsString(varHeight));
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedHeightL = VarDouble(varHeight);
		}
		FormatPrescriptionNumber(IDC_HEIGHT_L, pnfNaturalFloat);
	}

	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't save to the GlassesOrderOtherInfoT table.
	if(m_vwot == vwotSpectacleLens) {	
		m_nLeftLensOtherInfoID = AdoFldLong(rsOrderInfo, "LeftGlassesOrderOtherInfoID", -1);
		if(m_nLeftLensOtherInfoID != -1) {
			//TES 11/29/2010 - PLID 40864 - Added extra information for auditing.
			//TES 12/8/2010 - PLID 41715 - Added HasParams
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			//TES 5/20/2011 - PLID 43790 - Added DesignCptID and DesignBillPerLens
			//TES 5/22/2011 - PLID 43790 - Added MaterialCptID and MaterialBillPerLens
			// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
			_RecordsetPtr rsOtherInfo = CreateParamRecordset("SELECT GlassesCatalogDesignsID, "
				"GlassesCatalogMaterialsID, TreatmentsComment, ThicknessType, ThicknessValue, "
				"GlassesCatalogDesignsT.DesignName, GlassesCatalogMaterialsT.MaterialName, "
				"CASE WHEN CustomParamsQ.DesignCode Is Null THEN 0 ELSE 1 END AS HasParams, "
				" GlassesCatalogDesignsT.BillPerLens AS DesignBillPerLens, "
				" GlassesCatalogMaterialsT.BillPerLens AS MaterialBillPerLens "
				"FROM GlassesOrderOtherInfoT "
				"LEFT JOIN GlassesCatalogDesignsT ON GlassesOrderOtherInfoT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID "
				"LEFT JOIN (SELECT DesignCode FROM GlassesDesignCustomParameterT GROUP BY DesignCode) CustomParamsQ "
				"ON GlassesCatalogDesignsT.DesignCode = CustomParamsQ.DesignCode "
				"LEFT JOIN GlassesCatalogMaterialsT ON GlassesOrderOtherInfoT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID "
				"WHERE GlassesOrderOtherInfoT.ID = {INT}", m_nLeftLensOtherInfoID);

			long nDesign = AdoFldLong(rsOtherInfo, "GlassesCatalogDesignsID", -1);
			if(nDesign != -1) {
				m_pLensDesignL->SetSelByColumn(ldcID, nDesign);
				if(AdoFldLong(rsOtherInfo, "HasParams")) {
					//TES 12/8/2010 - PLID 41715 - Reflect whether this design has associated parameters
					m_bDesignHasParameters = true;
					m_nxbCustomize.EnableWindow(TRUE);
				}
			}
			m_nLeftDesignID = nDesign;
			//TES 11/29/2010 - PLID 40864 - For auditing, remember the design name
			// (s.dhole 2012-02-20 16:38) - PLID 48033 Design  can be optional
			if (m_nLeftDesignID>-1) 
			{
				m_strSavedDesignNameL = AdoFldString(rsOtherInfo, "DesignName","");
			}
			else
			{
				m_strSavedDesignNameL = " <None> ";
			}

			//TES 5/20/2011 - PLID 43790 - Remember the billing information
			// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid Remove Cptid
			//m_nRightDesignCptID = AdoFldLong(rsOtherInfo, "DesignCptID", -1);

			// (j.dinatale 2013-04-03 16:02) - PLID 56074 - should be setting the left lense design bill per lens, not the right's
			m_bLeftDesignBillPerLens = AdoFldBool(rsOtherInfo, "DesignBillPerLens", FALSE);

			m_nLeftMaterialID = AdoFldLong(rsOtherInfo, "GlassesCatalogMaterialsID", -1);
			if(m_nLeftMaterialID != -1) {
				m_pLensMaterialL->SetSelByColumn(lmcID, m_nLeftMaterialID);
			}
			//TES 11/29/2010 - PLID 40864 - For auditing, remember the material name
			// (s.dhole 2012-02-20 17:54) - PLID 47979 material is optional  
			if(m_nLeftMaterialID  != -1) {
				m_strSavedMaterialNameL = AdoFldString(rsOtherInfo, "MaterialName", "");
			}
			else
			{
				m_strSavedMaterialNameL = " <None> ";
			}
			
			//TES 5/22/2011 - PLID 43790 - Remember the billing information
			// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
			//m_nRightMaterialCptID = AdoFldLong(rsOtherInfo, "MaterialCptID", -1);

			// (j.dinatale 2013-04-03 16:02) - PLID 56074 - should be setting the left lense material bill per lens, not the right's
			m_bLeftMaterialBillPerLens = AdoFldBool(rsOtherInfo, "MaterialBillPerLens", FALSE);

			//TES 11/29/2010 - PLID 40864 - For auditing, remember the comments
			m_strSavedTreatmentCommentsL = AdoFldString(rsOtherInfo, "TreatmentsComment","");
			SetDlgItemText(IDC_TREATMENT_COMMENTS_L, m_strSavedTreatmentCommentsL);

			m_pThicknessType->FindByColumn(ttcCode, _bstr_t( AdoFldString(rsOtherInfo,"ThicknessType","")),NULL, g_cvarTrue );
			
			ReflectThicknessType();
			//TES 11/29/2010 - PLID 40864 - Cache original value
			// (s.dhole 2012-02-20 17:54) - PLID 47979 Default thickness is <None>
			if(m_pThicknessType->CurSel && VarString(m_pThicknessType->CurSel->GetValue(ttcCode ) ) !="") {
				m_strSavedThicknessType = VarString(m_pThicknessType->CurSel->GetValue(ttcName));
			}
			else {
				m_strSavedThicknessType = " <None> ";
			}

			_variant_t varThickness = rsOtherInfo->Fields->GetItem("ThicknessValue")->Value;
			if(varThickness.vt != VT_NULL) {
				SetDlgItemText(IDC_THICKNESS_L, AsString(varThickness));
				//TES 11/29/2010 - PLID 40864 - Cache original value
				m_dSavedThicknessL = VarDouble(varThickness);
			}
			else {
				m_dSavedThicknessL = INVALID_RX_VALUE;
			}
			FormatPrescriptionNumber(IDC_THICKNESS_L, pnfNaturalFloat);

			//Pull the treatments.
			CString strTreatmentNames;
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			//TES 5/22/2011 - PLID 43790 - Added CptID and BillPerLens
			// (s.dhole 2012-03-06 12:39) - PLID 48926 Remove Cptid
			_RecordsetPtr rsTreatments = CreateParamRecordset("SELECT GlassesCatalogTreatmentID, TreatmentName, "
				"BillPerLens "
				"FROM GlassesOrderTreatmentsT INNER JOIN GlassesCatalogTreatmentsT "
				"ON GlassesOrderTreatmentsT.GlassesCatalogTreatmentID = GlassesCatalogTreatmentsT.ID "
				"WHERE GlassesOrderOtherInfoID = {INT}", m_nLeftLensOtherInfoID);
			while(!rsTreatments->eof) {
				//TES 5/22/2011 - PLID 43790 - Changed to a struct that includes billing information
				TreatmentInformation ti;
				ti.nTreatmentID = AdoFldLong(rsTreatments, "GlassesCatalogTreatmentID");
				// (s.dhole 2012-03-06 12:39) - PLID 48926 Remove Cptid
				//ti.nCptID = AdoFldLong(rsTreatments, "CptID", -1);
				ti.bBillPerLens = AdoFldBool(rsTreatments, "BillPerLens", FALSE);
				m_arLeftLensTreatments.Add(ti);
				strTreatmentNames += AdoFldString(rsTreatments, "TreatmentName") + ", ";
				rsTreatments->MoveNext();
			}
			if(m_arLeftLensTreatments.GetSize() == 0) {
				m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
				m_nxlTreatmentsL.ShowWindow(SW_HIDE);
			}
			else if(m_arLeftLensTreatments.GetSize() == 1) {
				strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
				m_pLensTreatmentsL->SetSelByColumn(ltcID, m_arLeftLensTreatments[0].nTreatmentID);
				m_nxlTreatmentsL.ShowWindow(SW_HIDE);
			}
			else {
				strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
				m_nxlTreatmentsL.SetText(strTreatmentNames);
				GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
				m_nxlTreatmentsL.ShowWindow(SW_SHOWNA);
			}
			//TES 11/29/2010 - PLID 40864 - Remember the treatment names for auditing
			m_strSavedTreatmentsL = strTreatmentNames;

		}
	}


	//Right Lens
	m_nRightRxDetailID = AdoFldLong(rsOrderInfo, "RightLensDetailRxID", -1);
	if(m_nRightRxDetailID != -1) {
		//Pull the lens information.
		// (b.spivey, October 17, 2011) - PLID 44918 - Added secondary prism value. 
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - select base2 value
		_RecordsetPtr rsLensInfo = CreateParamRecordset("SELECT PrescriptionSphere, FarHalfPd, CylinderValue, CylinderAxis, "
			"AdditionValue, PrismValue, SecondaryPrismValue, PrismAxis, PrismAxisStr, NearHalfPd, SegHeight, PrismAxis2, PrismAxisStr2 "
			"FROM LensDetailRxT WHERE ID = {INT}", m_nRightRxDetailID);

		DOUBLE dSphere = AdoFldDouble(rsLensInfo, "PrescriptionSphere");
		SetDlgItemText(IDC_SPHERE_R, AsString(dSphere));
		FormatPrescriptionNumber(IDC_SPHERE_R, pnfSignedFloat);
		//TES 11/24/2010 - PLID 40864 - Cache original value
		m_dSavedSphereR = dSphere;

		_variant_t varCylinder = rsLensInfo->Fields->GetItem("CylinderValue")->Value;
		if(varCylinder.vt != VT_NULL) {
			SetDlgItemText(IDC_CYLINDER_R, AsString(varCylinder));
			FormatPrescriptionNumber(IDC_CYLINDER_R, pnfSignedFloat);
			//TES 11/24/2010 - PLID 40864 - Cache original value
			m_dSavedCylR = VarDouble(varCylinder);
		}

		_variant_t varAxis = rsLensInfo->Fields->GetItem("CylinderAxis")->Value;
		if(varAxis.vt != VT_NULL) {
			SetDlgItemText(IDC_AXIS_R, AsString(varAxis));
			//TES 11/24/2010 - PLID 40864 - Cache original value
			m_nSavedAxisR = VarLong(varAxis);
		}

		_variant_t varAddition = rsLensInfo->Fields->GetItem("AdditionValue")->Value;
		if(varAddition.vt != VT_NULL) {
			SetDlgItemText(IDC_ADDITION_R, AsString(varAddition));
			FormatPrescriptionNumber(IDC_ADDITION_R, pnfUnsignedFloat);
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedAdditionR = VarDouble(varAddition);
		}

		_variant_t varPrism = rsLensInfo->Fields->GetItem("PrismValue")->Value;
		if(varPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_PRISM_R, AsString(varPrism));
			FormatPrescriptionNumber(IDC_PRISM_R, pnfUnsignedFloat);
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedPrismR = VarDouble(varPrism);
		}

		// (b.spivey, October 17, 2011) - PLID 44918 - Added secondary prism
		_variant_t varSecdPrism = rsLensInfo->Fields->GetItem("SecondaryPrismValue")->Value;
		if (varSecdPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_PRISM_R, AsString(varSecdPrism)); 
			FormatPrescriptionNumber(IDC_SECONDARY_PRISM_R, pnfUnsignedFloat);
			m_dSavedSecdPrismR = VarDouble(varSecdPrism); 
		}

		_variant_t varAxisVal = rsLensInfo->Fields->GetItem("PrismAxis")->Value;
		if(varAxisVal.vt == VT_NULL) {
			SetDlgItemText(IDC_BASE_R, AdoFldString(rsLensInfo, "PrismAxisStr", ""));
		}
		else {
			SetDlgItemText(IDC_BASE_R, AsString(varAxisVal));
		}
		FormatPrescriptionNumber(IDC_BASE_R, pnfBase);
		//TES 11/29/2010 - PLID 40864 - Cache original value
		GetDlgItemText(IDC_BASE_R, m_strSavedBaseR);

		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - set base 2 value
		_variant_t varAxisVal2 = rsLensInfo->Fields->GetItem("PrismAxis2")->Value;
		if(varAxisVal2.vt == VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_BASE_R, AdoFldString(rsLensInfo, "PrismAxisStr2", ""));
		}
		else {
			SetDlgItemText(IDC_SECONDARY_BASE_R, AsString(varAxisVal2));
		}
		FormatPrescriptionNumber(IDC_SECONDARY_BASE_R, pnfBase);
		GetDlgItemText(IDC_SECONDARY_BASE_R, m_strSavedBaseR2);

		DOUBLE dDistPD = AdoFldDouble(rsLensInfo, "FarHalfPd");
		SetDlgItemText(IDC_DIST_PD_R, AsString(dDistPD));
		FormatPrescriptionNumber(IDC_DIST_PD_R, pnfNaturalFloat);
		//TES 11/29/2010 - PLID 40864 - Cache original value
		m_dSavedDistPdR = dDistPD;

		_variant_t varNearPD = rsLensInfo->Fields->GetItem("NearHalfPd")->Value;
		if(varNearPD.vt != VT_NULL) {
			SetDlgItemText(IDC_NEAR_PD_R, AsString(varNearPD));
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedNearPdR = VarDouble(varNearPD);
		}
		FormatPrescriptionNumber(IDC_NEAR_PD_R, pnfNaturalFloat);

		_variant_t varHeight = rsLensInfo->Fields->GetItem("SegHeight")->Value;
		if(varHeight.vt != VT_NULL) {
			SetDlgItemText(IDC_HEIGHT_R, AsString(varHeight));
			//TES 11/29/2010 - PLID 40864 - Cache original value
			m_dSavedHeightR = VarDouble(varHeight);
		}
		FormatPrescriptionNumber(IDC_HEIGHT_R, pnfNaturalFloat);
	}
	//(s.Dhole 2012-06-20) - PLID 48821 - 
	// Disable controls if Spher value is not set
	// this is causing extra call to other functions
	{
		CString strSpherL="";
		CString strSpherR="";
		GetDlgItemText(IDC_SPHERE_L, strSpherL);
		GetDlgItemText(IDC_SPHERE_R, strSpherR);
		if (strSpherL.IsEmpty() && strSpherR.IsEmpty())  
		{
			ReflectUsedLenses();
		}
	}
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't save to the GlassesOrderOtherInfoT table.
	if(m_vwot == vwotSpectacleLens) {
		m_nRightLensOtherInfoID = AdoFldLong(rsOrderInfo, "RightGlassesOrderOtherInfoID", -1);
		if(m_nRightLensOtherInfoID != -1) {
			//TES 11/29/2010 - PLID 40864 - Added extra information for auditing.
			//TES 12/8/2010 - PLID 41715 - Added HasParams
			//TES 5/20/2011 - PLID 43790 - Added DesignCptID and DesignBillPerLens
			//TES 5/22/2011 - PLID 43790 - Added MaterialCptID and MaterialBillPerLens
			// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
			_RecordsetPtr rsOtherInfo = CreateParamRecordset("SELECT GlassesCatalogDesignsID, "
				"GlassesCatalogMaterialsID, TreatmentsComment, ThicknessType, ThicknessValue, "
				"GlassesCatalogDesignsT.DesignName, GlassesCatalogMaterialsT.MaterialName, "
				"CASE WHEN CustomParamsQ.DesignCode Is Null THEN 0 ELSE 1 END AS HasParams, "
				"GlassesCatalogDesignsT.BillPerLens AS DesignBillPerLens, "
				"GlassesCatalogMaterialsT.BillPerLens AS MaterialBillPerLens "
				"FROM GlassesOrderOtherInfoT "
				"LEFT JOIN GlassesCatalogDesignsT ON GlassesOrderOtherInfoT.GlassesCatalogDesignsID = GlassesCatalogDesignsT.ID "
				"LEFT JOIN (SELECT DesignCode FROM GlassesDesignCustomParameterT GROUP BY DesignCode) CustomParamsQ "
				"ON GlassesCatalogDesignsT.DesignCode = CustomParamsQ.DesignCode "
				"LEFT JOIN GlassesCatalogMaterialsT ON GlassesOrderOtherInfoT.GlassesCatalogMaterialsID = GlassesCatalogMaterialsT.ID "
				"WHERE GlassesOrderOtherInfoT.ID = {INT}", m_nRightLensOtherInfoID);

			long nDesign = AdoFldLong(rsOtherInfo, "GlassesCatalogDesignsID", -1);
			if(nDesign != -1) {
				m_pLensDesignR->SetSelByColumn(ldcID, nDesign);
				//TES 12/8/2010 - PLID 41715 - Reflect whether this design has custom parameters associated
				if(AdoFldLong(rsOtherInfo, "HasParams")) {
					m_bDesignHasParameters = true;
					m_nxbCustomize.EnableWindow(TRUE);
				}
			}
			m_nRightDesignID = nDesign;
			//TES 11/29/2010 - PLID 40864 - For auditing, remember the design name
			// (s.dhole 2012-02-20 16:38) - PLID 48033 Design  can be optional
			if (m_nRightDesignID>-1)
				m_strSavedDesignNameR = AdoFldString(rsOtherInfo, "DesignName","");
			else
				m_strSavedDesignNameR = " <None> ";
			//TES 12/6/2010 - PLID 41730 - Is this different from the left lens?
			if(m_strSavedDesignNameR != m_strSavedDesignNameL) {
				m_bLensesIdentical = false;
			}
			//TES 5/20/2011 - PLID 43790 - Remember the billing information
			// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
			//m_nRightDesignCptID = AdoFldLong(rsOtherInfo, "DesignCptID", -1);
			m_bRightDesignBillPerLens = AdoFldBool(rsOtherInfo, "DesignBillPerLens", FALSE);

			m_nRightMaterialID = AdoFldLong(rsOtherInfo, "GlassesCatalogMaterialsID", -1);
			if(m_nRightMaterialID != -1) {
				m_pLensMaterialR->SetSelByColumn(lmcID, m_nRightMaterialID);
			}
			//TES 11/29/2010 - PLID 40864 - For auditing, remember the material name
			// (s.dhole 2012-02-20 17:54) - PLID 47979 material is optional  
			if(m_nRightMaterialID != -1) {
				m_strSavedMaterialNameR = AdoFldString(rsOtherInfo, "MaterialName","");
			}
			else
			{
				m_strSavedMaterialNameR = " <None> ";
			}
			//TES 12/6/2010 - PLID 41730 - Is this different from the left lens?
			if(m_strSavedMaterialNameR != m_strSavedMaterialNameL) {
				m_bLensesIdentical = false;
			}
			//TES 5/22/2011 - PLID 43790 - Remember the billing information 
			// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove MaterialCptID
			//m_nRightMaterialCptID = AdoFldLong(rsOtherInfo, "MaterialCptID", -1);
			m_bRightMaterialBillPerLens = AdoFldBool(rsOtherInfo, "MaterialBillPerLens", FALSE);

			//TES 11/29/2010 - PLID 40864 - For auditing, remember the comments
			m_strSavedTreatmentCommentsR = AdoFldString(rsOtherInfo, "TreatmentsComment","");
			SetDlgItemText(IDC_TREATMENT_COMMENTS_R, m_strSavedTreatmentCommentsR);
			//TES 12/6/2010 - PLID 41730 - Is this different from the left lens?
			if(m_strSavedTreatmentCommentsR != m_strSavedTreatmentCommentsL) {
				m_bLensesIdentical = false;
			}

			//m_pThicknessType->SetSelByColumn(ttcCode, rsOtherInfo->Fields->GetItem("ThicknessType")->Value);
			m_pThicknessType->FindByColumn(ttcCode, _bstr_t( AdoFldString(rsOtherInfo,"ThicknessType","")),NULL, g_cvarTrue );
			ReflectThicknessType();
			//TES 11/29/2010 - PLID 40864 - Cache original value
			// (s.dhole 2012-02-20 17:54) - PLID 47979 Default thickness is <None>
			if(m_pThicknessType->CurSel && VarString(m_pThicknessType->CurSel->GetValue(ttcCode ) ) !="") {
				m_strSavedThicknessType = VarString(m_pThicknessType->CurSel->GetValue(ttcName));
			}
			else {
				m_strSavedThicknessType =  " <None> ";
			}
		

			_variant_t varThickness = rsOtherInfo->Fields->GetItem("ThicknessValue")->Value;
			if(varThickness.vt != VT_NULL) {
				SetDlgItemText(IDC_THICKNESS_R, AsString(varThickness));
				//TES 11/29/2010 - PLID 40864 - Cache original value
				m_dSavedThicknessR = VarDouble(varThickness);
			}
			else {
				m_dSavedThicknessR = INVALID_RX_VALUE;
			}
			FormatPrescriptionNumber(IDC_THICKNESS_L, pnfNaturalFloat);
			//TES 12/6/2010 - PLID 41730 - Is this different from the left lens?
			if(m_dSavedThicknessR != m_dSavedThicknessL) {
				m_bLensesIdentical = false;
			}

			//Pull the treatments.
			CString strTreatmentNames;
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			//TES 5/22/2011 - PLID 43790 - Added CptID and BillPerLens
			// (s.dhole 2012-03-15 15:58) - PLID 48296 remove Cptid
			_RecordsetPtr rsTreatments = CreateParamRecordset("SELECT GlassesCatalogTreatmentID, TreatmentName, "
				"BillPerLens "
				"FROM GlassesOrderTreatmentsT INNER JOIN GlassesCatalogTreatmentsT "
				"ON GlassesOrderTreatmentsT.GlassesCatalogTreatmentID = GlassesCatalogTreatmentsT.ID "
				"WHERE GlassesOrderOtherInfoID = {INT}", m_nRightLensOtherInfoID);
			while(!rsTreatments->eof) {
				//TES 5/22/2011 - PLID 43790 - Changed to a struct that includes billing information
				TreatmentInformation ti;
				ti.nTreatmentID = AdoFldLong(rsTreatments, "GlassesCatalogTreatmentID");
				// (s.dhole 2012-03-06 12:39) - PLID 48296 Remove Cptid
				//ti.nCptID = AdoFldLong(rsTreatments, "CptID", -1);
				ti.bBillPerLens = AdoFldBool(rsTreatments, "BillPerLens", FALSE);
				m_arRightLensTreatments.Add(ti);
				strTreatmentNames += AdoFldString(rsTreatments, "TreatmentName") + ", ";
				rsTreatments->MoveNext();
			}
			if(m_arRightLensTreatments.GetSize() == 0) {
				m_pLensTreatmentsR->SetSelByColumn(ltcID, (long)-1);
				m_nxlTreatmentsR.ShowWindow(SW_HIDE);
			}
			else if(m_arRightLensTreatments.GetSize() == 1) {
				strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
				m_pLensTreatmentsR->SetSelByColumn(ltcID, m_arRightLensTreatments[0].nTreatmentID);
				m_nxlTreatmentsR.ShowWindow(SW_HIDE);
			}
			else {
				strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
				m_nxlTreatmentsR.SetText(strTreatmentNames);
				GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_HIDE);
				m_nxlTreatmentsR.ShowWindow(SW_SHOWNA);
			}
			//TES 11/29/2010 - PLID 40864 - Remember the treatment names for auditing
			m_strSavedTreatmentsR = strTreatmentNames;
			//TES 12/6/2010 - PLID 41730 - Is this different from the left lens?
			if(m_strSavedTreatmentsR != m_strSavedTreatmentsL) {
				m_bLensesIdentical = false;
			}
		}
	}

	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have parameters
	if(m_vwot == vwotSpectacleLens) {
		//TES 12/8/2010 - PLID 41715 - Load custom parameter values
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		_RecordsetPtr rsParams = CreateParamRecordset("SELECT GlassesCustomParameterID, ParameterValue FROM GlassesOrderParameterT "
			"WHERE GlassesOrderID = {INT}", m_nOrderID);
		while(!rsParams->eof) {
			CString strID = AdoFldString(rsParams, "GlassesCustomParameterID");
			CString strValue = AdoFldString(rsParams, "ParameterValue");
			m_mapParamValues.SetAt(strID, strValue);
			m_mapSavedParamValues.SetAt(strID, strValue);
			rsParams->MoveNext();
		}
	}

	//TES 12/3/2010 - PLID 40539 - Now that we've set the location, requery the location-based lists.
	RefreshDesignLists();
	RefreshSupplierList();
	// (s.dhole 2012-03-12 12:51) - PLID 48821 
	LoadServiceList(); 	
	//TES 11/17/2010 - PLID 41528 - If this order hasn't already been submitted, auto-check the "Submit To VisionWeb" box.
	if(AdoFldLong(rsOrderInfo->Fields, "Submitted") == 0) {
		AutoCheckSubmitBox();
	}

	//r.wilson PLID 43702 - Load ShipToPatient
	if(AdoFldBool(rsOrderInfo, "ShipToPatient"))
	{
		CWnd *pwnd=GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT);
		((CButton *)pwnd)->SetCheck(TRUE);
	}

	// (j.dinatale 2012-04-10 10:44) - PLID 49536 - load the optician
	// (j.dinatale 2012-05-02 10:35) - PLID 49536 - pull foward the optician's name
	// (j.dinatale 2012-05-11 12:34) - PLID 50206 - save the optician name
	long nOpticianID = AdoFldLong(rsOrderInfo, "OpticianID", -1);
	CString strOpticianName = AdoFldString(rsOrderInfo, "OpticianName", "");

	if(strOpticianName.IsEmpty()){
		m_strSavedOpticianName = "<None>";
	}else{
		m_strSavedOpticianName = strOpticianName;
	}

	if(nOpticianID != -1){
		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOpticianList->FindByColumn(GlassesOrderOpticianList::ID, _variant_t(nOpticianID), NULL, VARIANT_FALSE);
		if(pRow){
			m_pdlOpticianList->CurSel = pRow;
		}else{
			// (j.dinatale 2012-05-02 10:38) - PLID 49536 - add the row if it doesnt already exist
			NXDATALIST2Lib::IRowSettingsPtr pNewOptRow = m_pdlOpticianList->GetNewRow();
			pNewOptRow->PutValue(GlassesOrderOpticianList::ID, nOpticianID);
			pNewOptRow->PutValue(GlassesOrderOpticianList::Name, _bstr_t(strOpticianName));

			m_pdlOpticianList->AddRowSorted(pNewOptRow, NULL);
			m_pdlOpticianList->CurSel = pNewOptRow;
		}
	}

}

BEGIN_EVENTSINK_MAP(CVisionWebOrderDlg, CNxDialog)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_PATIENT, 20, CVisionWebOrderDlg::OnTrySetSelFinishedVisionwebPatient, VTS_I4 VTS_I4)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_SUPPLIER, 16, CVisionWebOrderDlg::OnSelChosenVisionwebSupplier, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_TREATMENT_L, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLensTreatmentL, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_TREATMENT_R, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLensTreatmentR, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_FRAME, 16, CVisionWebOrderDlg::OnSelChosenFrame, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_THICKNESS_TYPE, 16, CVisionWebOrderDlg::OnSelChosenVisionwebThicknessType, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_PATIENT, 16, CVisionWebOrderDlg::OnSelChosenVisionwebPatient, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_PATIENT, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebPatient, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_DESIGN_R, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLensDesignR, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_DESIGN_L, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLensDesignL, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_SUPPLIER, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebSupplier, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_FRAME_TYPE, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebFrameType, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_MATERIAL_R, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensMaterialR, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_MATERIAL_L, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensMaterialL, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_DESIGN_R, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensDesignR, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_DESIGN_L, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensDesignL, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_TREATMENT_R, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensTreatmentR, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_TREATMENT_L, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensTreatmentL, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LOCATION, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebLocation, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LOCATION, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLocation, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_MATERIAL_R, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLensMaterialR, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LENS_MATERIAL_L, 16, CVisionWebOrderDlg::OnSelChosenVisionwebLensMaterialL, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_FRAME, 18, CVisionWebOrderDlg::OnRequeryFinishedFrame, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_LOCATION, 1, CVisionWebOrderDlg::OnSelChangingVisionwebLocation, VTS_DISPATCH VTS_PDISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISION_PLANS, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionPlans, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_THICKNESS_TYPE, 1, CVisionWebOrderDlg::OnSelChangingVisionwebThicknessType, VTS_DISPATCH VTS_PDISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_PROVIDER, 20, CVisionWebOrderDlg::OnTrySetSelFinishedVisionwebProvider, VTS_I4 VTS_I4)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_PROVIDER, 16, CVisionWebOrderDlg::OnSelChosenVisionwebProvider, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_AVAILABLE_SERVICE_CODES, 16, CVisionWebOrderDlg::OnSelChosenAvailableServiceCodes, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_AVAILABLE_PRODUCTS, 16, CVisionWebOrderDlg::OnSelChosenAvailableProducts, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_GLASSES_ORDER_SERVICES, 6, CVisionWebOrderDlg::OnRButtonDownGlassesOrderServices, VTS_DISPATCH VTS_I2 VTS_I4 VTS_I4 VTS_I4)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_PROVIDER, 18, CVisionWebOrderDlg::OnRequeryFinishedVisionwebProvider, VTS_I2)
ON_EVENT(CVisionWebOrderDlg, IDC_FRAME, 20, CVisionWebOrderDlg::OnTrySetSelFinishedFrame, VTS_I4 VTS_I4)
ON_EVENT(CVisionWebOrderDlg, IDC_GLASSES_ORDER_SERVICES, 10, CVisionWebOrderDlg::OnEditingFinishedGlassesOrderServices, VTS_DISPATCH VTS_I2 VTS_VARIANT VTS_VARIANT VTS_BOOL)
ON_EVENT(CVisionWebOrderDlg, IDC_GLASSES_ORDER_RX_DATE, 1, CVisionWebOrderDlg::KillFocusGlassesOrderRxDate, VTS_NONE)
ON_EVENT(CVisionWebOrderDlg, IDC_GLASSES_ORDER_SERVICES, 8, CVisionWebOrderDlg::EditingStartingGlassesOrderServices, VTS_DISPATCH VTS_I2 VTS_PVARIANT VTS_PBOOL)
ON_EVENT(CVisionWebOrderDlg, IDC_GLASSES_ORDER_SERVICES, 19, CVisionWebOrderDlg::LeftClickGlassesOrderServices, VTS_DISPATCH VTS_I2 VTS_I4 VTS_I4 VTS_I4)
ON_EVENT(CVisionWebOrderDlg, IDC_GLASSES_ORDER_OPTICIAN, 16, CVisionWebOrderDlg::SelChosenGlassesOrderOptician, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISION_PLANS, 16, CVisionWebOrderDlg::OnSelChosenVisionPlan, VTS_DISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISION_PLANS , 1, CVisionWebOrderDlg::SelChangingVisionPlan, VTS_DISPATCH VTS_PDISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_FRAME, 1, CVisionWebOrderDlg::OnSelChangingFrame, VTS_DISPATCH VTS_PDISPATCH)
ON_EVENT(CVisionWebOrderDlg, IDC_VISIONWEB_JOB_TYPE, 1, CVisionWebOrderDlg::OnSelChangingJobType, VTS_DISPATCH VTS_PDISPATCH)

END_EVENTSINK_MAP()

void CVisionWebOrderDlg::OnTrySetSelFinishedVisionwebPatient(long nRowEnum, long nFlags)
{
	try {

		if(nFlags == dlTrySetSelFinishedFailure) {
			//maybe it's inactive?
			_RecordsetPtr rsPatient = CreateParamRecordset("SELECT Last +  ', ' + First + ' ' + Middle AS Name FROM PersonT "
				"WHERE ID = {INT}", m_nPendingPatientID);
			if(!rsPatient->eof) {
				m_pPatient->PutComboBoxText(_bstr_t(AdoFldString(rsPatient, "Name", "")));
			}
			else 
				m_pPatient->PutCurSel(NULL);
		}
		else {
			m_nPendingPatientID = -1;
		}

		// (c.haag 2010-11-29) - PLID 41124 - Update the title bar text based on the selected patient
		//TES 12/14/2010 - PLID 41106 - Renamed
		ReflectCurrentPatient();

	}NxCatchAll(__FUNCTION__);
}

BOOL CVisionWebOrderDlg::OnCommand(WPARAM wParam, LPARAM lParam) 
{
	int nID;
	// (s.dhole, 2011-12-07 12:29) - PLID 46883 - set base 2 value
	//Determine how we want to format the field (default to pnfGeneralText, meaning "leave unchanged"
	PrescriptionNumberFormat pnf = pnfGeneralText;
	switch (HIWORD(wParam))
	{	case EN_KILLFOCUS:
			if (m_bFormattingField)
				break;
			switch (nID = LOWORD(wParam))
			{
			case IDC_SPHERE_L:
			case IDC_SPHERE_R:
			case IDC_CYLINDER_L:
			case IDC_CYLINDER_R:
				pnf = pnfSignedFloat;
				break;
			case IDC_ADDITION_L:
			case IDC_ADDITION_R:
			case IDC_PRISM_L:
			case IDC_PRISM_R:
			case IDC_SECONDARY_PRISM_L:
			case IDC_SECONDARY_PRISM_R:
				pnf = pnfUnsignedFloat;
				break;
			case IDC_BASE_L:
			case IDC_BASE_R:
			case IDC_SECONDARY_BASE_L:
			case IDC_SECONDARY_BASE_R:
				pnf = pnfBase;
				break;
			case IDC_DIST_PD_L:
			case IDC_DIST_PD_R:
			case IDC_NEAR_PD_L:
			case IDC_NEAR_PD_R:
			case IDC_HEIGHT_L:
			case IDC_HEIGHT_R:
			case IDC_THICKNESS_L:
			case IDC_THICKNESS_R:
			case IDC_DBL:
			case IDC_ED:
			case IDC_A_BOX:
			case IDC_B_BOX:			
				pnf = pnfNaturalFloat;
				break;
			case IDC_TEMPLE_LENGTH:
			case IDC_EYE_SIZE:
				pnf = pnfPosIntNullable;
				break;
			}
			
			m_bFormattingField = true;
			FormatPrescriptionNumber(nID, pnf);
			m_bFormattingField = false;
		break;
	}
	return CNxDialog::OnCommand(wParam, lParam);
}

//TES 3/22/2011 - PLID 42762 - Moved AsPrescriptionNumber to InvVisionWebUtils.cpp

void CVisionWebOrderDlg::FormatPrescriptionNumber(UINT nID, PrescriptionNumberFormat pnf)
{
	static CString str;
	GetDlgItemText(nID, str);
	SetDlgItemText(nID, AsPrescriptionNumber(str, pnf));
}

void CVisionWebOrderDlg::OnOK()
{
	try {
		//Validate the fields, this will also tell us which lenses to save.
		BOOL bSaveLeftLens = FALSE, bSaveRightLens = FALSE;
		if(!Validate(bSaveLeftLens, bSaveRightLens)) {
			return;
		}

		//r.wilson 2/22/2012 PLID 43702
		BOOL bShipToPatient = ((CButton*) GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT))->GetCheck();
		BOOL bSubmitToVisionWeb = ((CButton*) GetDlgItem(IDC_SUBMIT_TO_VISIONWEB))->GetCheck();

		//r.wilson VisionWeb doesn't support shipping to the patient so one has to give
		if(bShipToPatient && bSubmitToVisionWeb)
		{
			AfxMessageBox("VisionWeb does not support direct shipping to the patient.");
			return;
		}

		//Now save
		Save(bSaveLeftLens, bSaveRightLens);
		// (s.dhole 2010-12-20 12:04) - PLID 40538 Check if order imnformation has been change
		m_bOrderChanged=TRUE;
		//TES 11/9/2010 - PLID 40539 - Only upload if the box is checked.
		if(IsDlgButtonChecked(IDC_SUBMIT_TO_VISIONWEB)) {
			// (s.dhole 2010-12-02 09:09) - PLID 41125 Glasses order confirmation
			CInvGlassesOrderConfirmationDLG dlg(this); //// PLID 42835 Add Dialog to Maintain Glasses Catalog custom items
			dlg.m_nOrderID = m_nOrderID ;
			if (dlg.DoModal()!=IDOK) 
			{
				return;
			}
		}

		// (b.savon 2012-01-10 17:21) - PLID 46663 - Save Column Widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			SaveColumnWidths();
		}

		//TES 3/23/2011 - PLID 42975 - Consolidated this code
		CloseCleanup(IDOK);
	
		CNxDialog::OnOK();
		
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnCancel()
{
	try {
		
		// (b.savon 2012-01-10 17:21) - PLID 46663 - Save Column Widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			SaveColumnWidths();
		}

		//TES 3/23/2011 - PLID 42975 - Consolidated this code
		CloseCleanup(IDCANCEL);

		CNxDialog::OnCancel();
	}
	NxCatchAll(__FUNCTION__);
}

BOOL CVisionWebOrderDlg::Validate(OUT BOOL &bSaveLeftLens, OUT BOOL &bSaveRightLens)

{
	// (s.dhole 2012-02-21 13:00) - PLID  42499
	CString strError = "";
	CString strErrorRxOD = "";
	CString strErrorRxOS = "";
	CString strErrorOther = "";
	// (s.dhole 2012-02-21 13:02) - PLID 47396 
	bool bISVisionWebOrder = FALSE;
	if (IsDlgButtonChecked(IDC_SUBMIT_TO_VISIONWEB))
		bISVisionWebOrder =TRUE;
	//Patient
	if(m_pPatient->CurSel == NULL && m_nPendingPatientID == -1) {
		MsgBox("You must select a Patient");
		return FALSE;
	}

		//r.wilson 2/22/2012 PLID 43702
		BOOL bShipToPatient = ((CButton*) GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT))->GetCheck();
		BOOL bSubmitToVisionWeb = ((CButton*) GetDlgItem(IDC_SUBMIT_TO_VISIONWEB))->GetCheck();

		// (r.wilson 5/9/2012) PLID 43702 VisionWeb doesn't support shipping to the patient so one has to give
		if(bShipToPatient && bSubmitToVisionWeb)
		{
			MsgBox("VisionWeb does not support direct shipping to the patient.");
			return FALSE;
		}

	//TES 4/8/2011 - PLID 43058 - Make sure they entered a Date
	if(m_pDate->GetStatus() != 1) {
		// (s.dhole 2012-02-21 13:00) - PLID  42499
		strError +="Please enter a valid Date for this Order\r\n";
		//MsgBox("Please enter a valid Date for this Order");
		//return FALSE;
	}
	
	//Location
	
	// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location but VisionWeb required location information
	// (s.dhole 2012-05-24 10:36) - PLID 48249 Loation is required
	//if(m_nLocationID == -1) {
	//	//ASSERT(FALSE);
	//	//MsgBox("You must select a Location");
	//	strError +="You must select a Location\r\n";
	//	//return FALSE;
	//}
	// (s.dhole 2010-11-12 15:01) - PLID 
	////Order Type
	//if(m_pOrderType->CurSel == NULL) {
	//	MsgBox("You must select an Order Type");
	//	return FALSE;
	//}

	//Now check Prescription

	// (s.dhole 2011-04-27 11:31) - PLID 43451  Rx date validation 
	COleDateTime dt, dttemp;
	dttemp.ParseDateTime("01/01/1800");
	dt = m_pRxDate->GetDateTime();
	if  ((m_pRxDate->GetStatus() != 3) && (m_pRxDate->GetStatus() != 1 ||  dt.m_dt < dttemp.m_dt))
	{
		// (s.dhole 2012-02-21 13:00) - PLID  42499
		strError +="Please enter a valid Rx Exam Date\r\n";
		//MsgBox("Please enter a valid Rx Exam Date"); // (s.dhole 2011-06-15 17:24) - PLID  43813 change to Exam date
		//return FALSE;
	}
	// (s.dhole 2011-06-15 17:24) - PLID  43813 Validate Expiration date
	COleDateTime dtExpiration, dtExpirationtemp;
	dtExpirationtemp.ParseDateTime("01/01/1800");
	dtExpiration = m_pRxExpirationDate->GetDateTime();
	
	// (s.dhole 2011-06-21 10:25) - PLID 44160 Check Expiration date Preference
	if (GetRemotePropertyInt("IsRxExpirationdateRequired", 0, 0, "<None>", true) && (m_pRxExpirationDate->GetStatus() == 3))
	{
		// (s.dhole 2012-02-21 13:00) - PLID  42499
		strError +="You must enter an Rx Expiration date\r\n";
		//MsgBox("You must enter an Rx Expiration date.");
		//return FALSE;
	}

	if  ((m_pRxExpirationDate->GetStatus() != 3) && (m_pRxExpirationDate->GetStatus() != 1 ||  dtExpiration.m_dt < dtExpirationtemp.m_dt))
	{
		// (s.dhole 2012-02-21 13:00) - PLID   42499
		strError += "Please enter a valid Rx Expiration Date\r\n";
		//MsgBox("Please enter a valid Rx Expiration Date");
		//return FALSE;
	}
	else if  ((m_pRxDate->GetStatus() != 3) && (m_pRxExpirationDate->GetStatus() != 3))
	{
		// if Exam data is greter than expiration data than throught error
		if (dtExpiration< dt){
		// (s.dhole 2012-02-21 13:02) - PLID  42499
		strError +="The Rx Exam date is greater than the Rx Expiration date. Please enter a valid Rx Expiration Date\r\n";
		//MsgBox("The Rx Exam date is greater than the Rx Expiration date. Please enter a valid Rx Expiration Date.");
		//return FALSE;
		}
		else if (dtExpiration== dt){
		// (s.dhole 2012-02-21 13:01) - PLID 42499
		strError +="The Rx Exam date is the same as the Rx Expiration date. Please enter a valid Rx Expiration Date\r\n";
		//MsgBox("The Rx Exam date is the same as the Rx Expiration date. Please enter a valid Rx Expiration Date");
		//return FALSE;
		}
	}

//Right Lens Rx.  If we have any fields, then we need to have Sphere and Dist. PD
	bSaveRightLens = FALSE;
	bool bHasAnyFields = false;
	bool bHasAllRequired = true;
	bool bHasSphere = false;

	//Sphere
	CString str;
	GetDlgItemText(IDC_SPHERE_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dSphere = atof(str);
		// (s.dhole 2012-02-02 15:12) - PLID 47396 Only VisionWeb
		if ((bISVisionWebOrder ==TRUE) && (dSphere < -99.75 || dSphere > 99.75)) {
			// (s.dhole 2012-02-21 13:01) - PLID  42499
			strErrorRxOD +="The Sphere value must be between -99.75 and +99.75\r\n";
			//MsgBox("The Sphere value must be between -99.75 and +99.75");
			//GetDlgItem(IDC_SPHERE_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasSphere = true;
	}
	else {
		bHasAllRequired = false;
		bHasSphere = false;
	}

	//Cylinder
	bool bHasCyl = false;
	GetDlgItemText(IDC_CYLINDER_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dCyl = atof(str);
		// (s.dhole 2012-02-02 15:12) - PLID 47396 Only VisionWeb
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dCyl < -99.75 || dCyl > 99.75)) {
			// (s.dhole 2012-02-21 13:01) - PLID  42499
			strErrorRxOD +="The Cylinder value must be between -99.75 and +99.75\r\n";
			//MsgBox("The Cylinder value must be between -99.75 and +99.75");
			//GetDlgItem(IDC_CYLINDER_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasCyl = true;
	}

	//Axis
	GetDlgItemText(IDC_AXIS_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		int nAxis = atoi(str);
		// (s.dhole 2012-02-02 15:12) - PLID 47396 Only VisionWeb
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (nAxis < 0 || nAxis > 180)) {
			// (s.dhole 2012-02-21 13:01) - PLID  42499
			strErrorRxOD +="The Axis value must be between 0 and 180\r\n";
			//MsgBox("The Axis value must be between 0 and 180");
			//GetDlgItem(IDC_AXIS_R)->SetFocus();
			//return FALSE;
		}

		if(bHasSphere && !bHasCyl) {
			// (s.dhole 2012-02-21 13:01) - PLID 42499
			strErrorRxOD +="If the Axis field is filled, the Cylinder field must be filled as well\r\n";
			//MsgBox("If the Axis field is filled, the Cylinder field must be filled as well");
			//GetDlgItem(IDC_CYLINDER_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
	}
	else {
		
		if(bHasSphere && bHasCyl) {
			// (s.dhole 2012-02-21 13:01) - PLID 42499
			strErrorRxOD +="If the Cylinder field is filled, the Axis field must be filled as well\r\n";
			//MsgBox("If the Cylinder field is filled, the Axis field must be filled as well");
			//GetDlgItem(IDC_AXIS_R)->SetFocus();
			//return FALSE;
		}
	}

	//Addition
	GetDlgItemText(IDC_ADDITION_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dAddition = atof(str);
		// (s.dhole 2012-02-02 15:13) - PLID 47396
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dAddition < 0 || dAddition > 99.75)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="The Addition value must be between 0.00 and 99.75\r\n";
			//MsgBox("The Addition value must be between 0.00 and 99.75");
			//GetDlgItem(IDC_ADDITION_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
	}

	//Prism
	BOOL bHasPrism = false;
	GetDlgItemText(IDC_PRISM_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dPrism = atof(str);
		// (s.dhole 2012-02-02 15:13) - PLID 47396 Only VisionWeb
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dPrism < 0 || dPrism > 99.75)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="The Prism1 value must be between 0 and 99.75\r\n";
			//MsgBox("The Prism value must be between 0 and 99.75");
			//GetDlgItem(IDC_PRISM_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasPrism = true;
	}
	

	//Base
	GetDlgItemText(IDC_BASE_R, str);
	// (s.dhole 2012-02-07 09:51) - PLID 48004 We will validate Non visionweb base value
	if(!str.IsEmpty()) {
		str.Replace(" ","");
		// (s.dhole 2012-02-23 09:33) - PLID 47396 Only VisionWeb
		if (bISVisionWebOrder ==TRUE && bHasSphere ) 
		{
			int nBase = atoi(str);
			// (s.dhole 2012-02-02 15:14) - PLID 
			if((nBase >= 0 && nBase <= 359 && AsString(nBase) ==  str)  ||
				(str.CompareNoCase("IN") == 0 || str.CompareNoCase("OUT") == 0 || str.CompareNoCase("UP") == 0 || str.CompareNoCase("DOWN") == 0)) {
					
				// do nothing
			}
			else if(nBase < 0 && nBase > 359) {
				strErrorRxOD +="The Base1 value must be between 0 and 359\r\n";
				//MsgBox("The Base value must be between 0 and 359");
				//GetDlgItem(IDC_BASE_R)->SetFocus();
				//return FALSE;
			}
			else if(str.CompareNoCase("IN") != 0 && str.CompareNoCase("OUT") != 0 && str.CompareNoCase("UP") != 0 && str.CompareNoCase("DOWN") != 0) 
			{
				strErrorRxOD +="The Base1 value must be IN\\OUT\\UP\\DOWN or between 0 and 359\r\n";
			}
		}
		// (s.dhole 2012-02-27 10:36) - PLID 48004 We will validate Non visionweb base value
		else if (str.GetLength()!=0  &&  !bHasPrism )  {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="If the Base1 field is filled, the Prism1 field must be filled as well\r\n";
		
		}
		bHasAnyFields = true;
	}
	else if(bHasSphere && bHasPrism) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="If the Prism1 field is filled, the Base1 field must be filled as well\r\n";
			//MsgBox("If the Prism field is filled, the Base field must be filled as well");
			//GetDlgItem(IDC_BASE_R)->SetFocus();
			//return FALSE;
		
	}
	// (s.dhole 2012-02-27 12:33) - PLID  48004 Accept custom base value
	BOOL bHasPrism2 = false;
	GetDlgItemText(IDC_SECONDARY_PRISM_R, str);
	if(!str.IsEmpty()) {
		double dPrism = atof(str);
		// (s.dhole 2012-02-02 15:13) - PLID 47396 Only VisionWeb
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dPrism < 0 || dPrism > 99.75)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="The Prism2 value must be between 0 and 99.75\r\n";
			//MsgBox("The Prism value must be between 0 and 99.75");
			//GetDlgItem(IDC_PRISM_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasPrism2 = true;
	}

	// (s.dhole, 2011-12-07 12:29) - PLID 46883 - Validate base2 value. 
	GetDlgItemText(IDC_SECONDARY_BASE_R, str);
	if(!str.IsEmpty()) {
		
		str.Replace(" ","");
		if (bISVisionWebOrder ==TRUE && bHasPrism2) 
		{
			int nBase = atoi(str);
			// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this text
			if((nBase >= 0 && nBase <= 359 && AsString(nBase) ==  str)  ||
				(str.CompareNoCase("IN") == 0 || str.CompareNoCase("OUT") == 0 || str.CompareNoCase("UP") == 0 || str.CompareNoCase("DOWN") == 0)) {
				// do nothing
			}
			else if (nBase < 0 && nBase > 359) {
				strErrorRxOD +="The Base2 value must be between 0 and 359\r\n";
				//MsgBox("The Base value must be between 0 and 359");
				//GetDlgItem(IDC_BASE_R)->SetFocus();
				//return FALSE;
			}
			// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this text
			else if(str.CompareNoCase("IN") != 0 && str.CompareNoCase("OUT") != 0 && str.CompareNoCase("UP") != 0 && str.CompareNoCase("DOWN") != 0) 
			{
				strErrorRxOD +="The Base2 value must be IN\\OUT\\UP\\DOWN or between 0 and 359\r\n";
			}
		}
		// (s.dhole 2012-02-27 10:36) - PLID  48004 We will validate Non visionweb base value
		else if (str.GetLength()!=0  &&  !bHasPrism2 ) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="If the Base2 field is filled, the Prism2 field must be filled as well\r\n";
		
		}
		
		bHasAnyFields = true;
	}
	// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
	else if(bHasSphere && bHasPrism2) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="If the Prism2 field is filled, the Base2 field must be filled as well\r\n";
			//MsgBox("If the Prism2 field is filled, the Base2 field must be filled as well");
			//GetDlgItem(IDC_SECONDARY_BASE_R)->SetFocus();
			//return FALSE;
	}

	
	//Dist. PD
	GetDlgItemText(IDC_DIST_PD_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		//double dDistPD = atof(str);
		//// (s.dhole 2012-02-02 15:14) - PLID 
		//if((bISVisionWebOrder ==TRUE) && bHasSphere && (dDistPD  > 0)) {
		//	MsgBox("The Dist. PD value must be between 10 and 40");
		//	You must fill in the ED value
		//	GetDlgItem(IDC_DIST_PD_R)->SetFocus();
		//	return FALSE;
		//}
		bHasAnyFields = true;
	}
	else {
		bHasAllRequired = false;
	}

	//Near PD
	GetDlgItemText(IDC_NEAR_PD_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		/*double dNearPD = atof(str);
		if((bISVisionWebOrder ==TRUE)  && bHasSphere && (dNearPD < 10 || dNearPD > 40)) {
			MsgBox("The Near PD value must be between 10 and 40");
			GetDlgItem(IDC_NEAR_PD_R)->SetFocus();
			return FALSE;
		}*/
		bHasAnyFields = true;
	}

	//Height
	GetDlgItemText(IDC_HEIGHT_R, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		//double dHeight = atof(str);
		//// (s.dhole 2012-02-02 15:14) - PLID 
		//if((bISVisionWebOrder ==TRUE) && bHasSphere && (dHeight < 0 || dHeight > 40)) {
		//	MsgBox("The Height value must be between 0 and 40");
		//	GetDlgItem(IDC_HEIGHT_R)->SetFocus();
		//	return FALSE;
		//}
		bHasAnyFields = true;
	}


	if(!bHasAllRequired) {
		if(bHasAnyFields) {
			if(!bHasSphere) {
				if(m_nRightRxDetailID != -1 || m_nRightLensOtherInfoID != -1) {
					if(IDYES != MsgBox(MB_YESNO, "Are you sure you wish to remove all information for the OD lens from this order?  This action cannot be undone!")) {
						return FALSE;
					}
					else {
						bSaveRightLens = FALSE;
					}
				}
				else {
					bSaveRightLens = FALSE;
				}
			}
			else {
				// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				strErrorRxOD +="You must fill in the Sphere and Dist. PD fields for each non-empty Prescription row\r\n";
				//MsgBox("You must fill in the Sphere and Dist. PD fields for each non-empty Prescription row.");
				//return FALSE;
			}

		}
		else {
			bSaveRightLens = FALSE;
		}
	}
	else {
		bSaveRightLens = TRUE;
	}


	//Left Lens Rx.  If we have any fields, then we need to have Sphere and Dist. PD
	bSaveLeftLens = FALSE;
	bHasAnyFields = false;
	bHasAllRequired = true;
	//TES 12/6/2010 - PLID 40539 - Track whether the Sphere is filled in, that determines whether or not we save the entire lens.
	bHasSphere = false;

	//Sphere
	
	GetDlgItemText(IDC_SPHERE_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dSphere = atof(str);
		// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
		if ((bISVisionWebOrder ==TRUE) && (dSphere < -99.75 || dSphere > 99.75)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS +="The Sphere value must be between -99.75 and +99.75\r\n";
			//MsgBox("The Sphere value must be between -99.75 and +99.75");
			//GetDlgItem(IDC_SPHERE_L)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasSphere = true;
	}
	else {
		bHasAllRequired = false;
		bHasSphere = false;
	}

	//Cylinder
	bHasCyl = false;
	GetDlgItemText(IDC_CYLINDER_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dCyl = atof(str);
		// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
		if ((bISVisionWebOrder ==TRUE) && (bHasSphere && (dCyl < -99.75 || dCyl > 99.75))) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS += "The Cylinder value must be between -99.75 and +99.75\r\n";
			//MsgBox("The Cylinder value must be between -99.75 and +99.75");
			//GetDlgItem(IDC_CYLINDER_L)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasCyl = true;
	}

	//Axis
	GetDlgItemText(IDC_AXIS_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		int nAxis = atoi(str);
		// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (nAxis < 0 || nAxis > 180)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS += "The Axis value must be between 0 and 180\r\n";
			//MsgBox("The Axis value must be between 0 and 180");
			//GetDlgItem(IDC_AXIS_L)->SetFocus();
			//return FALSE;
		}
		// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
		if(bHasSphere && !bHasCyl) {
			// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
			strErrorRxOS += "If the Axis field is filled, the Cylinder field must be filled as well\r\n";
			//MsgBox("If the Axis field is filled, the Cylinder field must be filled as well");
			//GetDlgItem(IDC_CYLINDER_L)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
	}
	else {
		// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
		if(bHasSphere && bHasCyl) {
			// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
			strErrorRxOS += "If the Cylinder field is filled, the Axis field must be filled as well\r\n";
			//MsgBox("If the Cylinder field is filled, the Axis field must be filled as well");
			//GetDlgItem(IDC_AXIS_L)->SetFocus();
			//return FALSE;
		}
	}

	//Addition
	GetDlgItemText(IDC_ADDITION_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dAddition = atof(str);
		// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dAddition < 0 || dAddition > 99.75)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS += "The Addition value must be between 0.00 and 99.75\r\n";
			//MsgBox("The Addition value must be between 0.00 and 99.75");
			//GetDlgItem(IDC_ADDITION_L)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
	}

	//Prism
	
	bHasPrism = false;
	GetDlgItemText(IDC_PRISM_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		double dPrism = atof(str);
		// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dPrism < 0 || dPrism > 99.75)) {
			// (s.dhole 2012-02-27 12:33) - PLID  48004 Accept custom base value
			strErrorRxOS += "The Prism1 value must be between 0 and 99.75\r\n";
			//MsgBox("The Prism value must be between 0 and 99.75");
			//GetDlgItem(IDC_PRISM_L)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasPrism = true;
	}
	

	//Base
	GetDlgItemText(IDC_BASE_L, str);
	//if(!str.IsEmpty()) {
	//	// (s.dhole 2012-02-02 15:09) - PLID 
	//	if (bISVisionWebOrder ==TRUE) 
	//	{
	//	if(str.CompareNoCase("IN") != 0 && str.CompareNoCase("OUT") != 0 && str.CompareNoCase("UP") != 0 && str.CompareNoCase("DOWN") != 0) {
	//		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
	//		int nBase = atoi(str);
	//		if(bHasSphere && (nBase < 0 || nBase > 359)) {
	//			// (s.dhole 2012-02-06 11:12) - PLID 42499
	//			strErrorRxOS += "The Base value must be between 0 and 359\r\n";
	//			//MsgBox("The Base value must be between 0 and 359");
	//			//GetDlgItem(IDC_BASE_L)->SetFocus();
	//			//return FALSE;
	//		}
	//	}
	//	}
	//	// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
	//	if(bHasSphere && !bHasPrism) {
	//		// (s.dhole 2012-02-06 11:12) - PLID 42499
	//		strErrorRxOS += "If the Base field is filled, the Prism field must be filled as well\r\n";
	//		//MsgBox("If the Base field is filled, the Prism field must be filled as well");
	//		//GetDlgItem(IDC_PRISM_L)->SetFocus();
	//		//return FALSE;
	//	}
	//	bHasAnyFields = true;
	//}
	//else {
	//	// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
	//	if(bHasSphere && bHasPrism) {
	//		// (s.dhole 2012-02-06 11:12) - PLID 42499
	//		strErrorRxOS += "If the Prism field is filled, the Base field must be filled as well\r\n";
	//		//MsgBox("If the Prism field is filled, the Base field must be filled as well");
	//		//GetDlgItem(IDC_BASE_L)->SetFocus();
	//		//return FALSE;
	//	}
	//}
	// (s.dhole 2012-02-07 09:51) - PLID 48004 We will validate Non visionweb base value
		if(!str.IsEmpty()) {
		str.Replace(" ","");
		if (bISVisionWebOrder ==TRUE && bHasPrism) 
		{
			int nBase = atoi(str);
			
			// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
			if((nBase >= 0 && nBase <= 359 && AsString(nBase) ==  str)  ||
				(str.CompareNoCase("IN") == 0 || str.CompareNoCase("OUT") == 0 || str.CompareNoCase("UP") == 0 || str.CompareNoCase("DOWN") == 0)) {
				// do nothing
			}
			else if (nBase < 0 && nBase > 359) {
				strErrorRxOS +="The Base1 value must be between 0 and 359\r\n";
				//MsgBox("The Base value must be between 0 and 359");
				//GetDlgItem(IDC_BASE_R)->SetFocus();
				//return FALSE;
			}
			else if(str.CompareNoCase("IN") != 0 && str.CompareNoCase("OUT") != 0 && str.CompareNoCase("UP") != 0 && str.CompareNoCase("DOWN") != 0) 
			{
				strErrorRxOS +="The Base1 value must be IN\\OUT\\UP\\DOWN or between 0 and 359\r\n";
			}
		}
		// (s.dhole 2012-02-27 10:36) - PLID 48004 We will validate Non visionweb base value
		else if (str.GetLength()!=0  &&  !bHasPrism ) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS +="If the Base1 field is filled, the Prism1 field must be filled as well\r\n";
		
		}
		bHasAnyFields = true;
	}
	else {
		// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
		if(bHasSphere && bHasPrism) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS +="If the Prism1 field is filled, the Base1 field must be filled as well\r\n";
			//MsgBox("If the Prism field is filled, the Base field must be filled as well");
			//GetDlgItem(IDC_BASE_R)->SetFocus();
			//return FALSE;
		}
	}
	// (s.dhole, 2011-12-07 12:29) - PLID 46883 -  base2 if secondery prisam has value
	bHasPrism2 = false;
	GetDlgItemText(IDC_SECONDARY_PRISM_L, str);
	if(!str.IsEmpty()) {
		double dPrism = atof(str);
		// (s.dhole 2012-02-02 15:13) - PLID 47396 Only VisionWeb
		if((bISVisionWebOrder ==TRUE) && bHasSphere && (dPrism < 0 || dPrism > 99.75)) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOD +="The Prism2 value must be between 0 and 99.75\r\n";
			//MsgBox("The Prism value must be between 0 and 99.75");
			//GetDlgItem(IDC_PRISM_R)->SetFocus();
			//return FALSE;
		}
		bHasAnyFields = true;
		bHasPrism2 = true;
	}

// (s.dhole, 2011-12-07 12:29) - PLID 46883 - Validate base2 value. 
	GetDlgItemText(IDC_SECONDARY_BASE_L, str);
	if(!str.IsEmpty()) {
		// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
		str.Replace(" ","");
		if (bISVisionWebOrder ==TRUE && bHasPrism2) 
		{
			int nBase = atoi(str);
			// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
			if((nBase >= 0 && nBase <= 359 && AsString(nBase) ==  str)  ||
				(str.CompareNoCase("IN") == 0 || str.CompareNoCase("OUT") == 0 || str.CompareNoCase("UP") == 0 || str.CompareNoCase("DOWN") == 0)) {
				// do nothing
			}
			else if (nBase < 0 && nBase > 359) {
				strErrorRxOS +="The Base2 value must be between 0 and 359\r\n";
				//MsgBox("The Base value must be between 0 and 359");
				//GetDlgItem(IDC_BASE_R)->SetFocus();
				//return FALSE;
			}
			else if(str.CompareNoCase("IN") != 0 && str.CompareNoCase("OUT") != 0 && str.CompareNoCase("UP") != 0 && str.CompareNoCase("DOWN") != 0) 
			{
				strErrorRxOS +="The Base2 value must be IN\\OUT\\UP\\DOWN or between 0 and 359\r\n";
			}
		}
		// (s.dhole 2012-02-27 10:36) - PLID 48004 We will validate Non visionweb base value
		else if (str.GetLength()!=0  &&  !bHasPrism2 )  {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS +="If the Base2 field is filled, the Prism2 field must be filled as well\r\n";
		
		}
	
		bHasAnyFields = true;
	}
	else {
		// (s.dhole 2012-02-01 15:25) - PLID 47396  visionweb support this validation
		if(bHasSphere && bHasPrism2) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strErrorRxOS += "If the Prism2 field is filled, the Base2 field must be filled as well\r\n";
			//MsgBox("If the Prism2 field is filled, the Base2 field must be filled as well");
			//GetDlgItem(IDC_SECONDARY_BASE_L)->SetFocus();
			//return FALSE;
		}
	}
	//Dist. PD
	GetDlgItemText(IDC_DIST_PD_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		//double dDistPD = atof(str);
		//// (s.dhole 2012-02-02 15:10) - PLID 
		//if((bISVisionWebOrder ==TRUE) && bHasSphere && (dDistPD < 10 || dDistPD > 40)) {
		//	MsgBox("The Dist. PD value must be between 10 and 40");
		//	GetDlgItem(IDC_DIST_PD_L)->SetFocus();
		//	return FALSE;
		//}
		bHasAnyFields = true;
	}
	else {
		bHasAllRequired = false;
	}

	//Near PD
	GetDlgItemText(IDC_NEAR_PD_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		//double dNearPD = atof(str);
		//// (s.dhole 2012-02-02 15:10) - PLID 
		//if((bISVisionWebOrder ==TRUE)&&  bHasSphere && (dNearPD < 10 || dNearPD > 40)) {
		//	MsgBox("The Near PD value must be between 10 and 40");
		//	GetDlgItem(IDC_NEAR_PD_L)->SetFocus();
		//	return FALSE;
		//}
		bHasAnyFields = true;
	}

	//Height
	GetDlgItemText(IDC_HEIGHT_L, str);
	if(!str.IsEmpty()) {
		// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
		//double dHeight = atof(str);
		//// (s.dhole 2012-02-02 15:11) - PLID 
		//if((bISVisionWebOrder ==TRUE) && bHasSphere && (dHeight < 0 || dHeight > 40)) {
		//	MsgBox("The Height value must be between 0 and 40");
		//	GetDlgItem(IDC_HEIGHT_L)->SetFocus();
		//	return FALSE;
		//}
		bHasAnyFields = true;
	}


	if(!bHasAllRequired) {
		if(bHasAnyFields) {
			if(!bHasSphere) {
				if(m_nLeftRxDetailID != -1 || m_nLeftLensOtherInfoID != -1) {
					if(IDYES != MsgBox(MB_YESNO, "Are you sure you wish to remove all information for the OS lens from this order?  This action cannot be undone!")) {
						return FALSE;
					}
					else {
						bSaveLeftLens = FALSE;
					}
				}
				else {
					bSaveLeftLens = FALSE;
				}
			}
			else {
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				strErrorRxOS += "You must fill in the Sphere and Dist. PD fields for each non-empty Prescription row.\r\n";
				//MsgBox("You must fill in the Sphere and Dist. PD fields for each non-empty Prescription row.");
				//return FALSE;
			}
		}
		else {
			bSaveLeftLens = FALSE;
		}
	}
	else {
		bSaveLeftLens = TRUE;
	}
	

	

	//TES 12/9/2010 - PLID 40539 - VisionWeb requires at least one lens
	// (s.dhole 2012-05-07 17:59) - PLID 50130 check rx if order is Visionweb 
	if(!bSaveLeftLens && !bSaveRightLens && bISVisionWebOrder==TRUE ) {
		// (s.dhole 2012-02-06 11:12) - PLID 42499
		strError +="You must fill in Prescription information for either the OD or OS lens\r\n";
		//MsgBox("You must fill in Prescription information for either the OD or OS lens.");
		//return FALSE;
	}

	if ((!strErrorRxOD.IsEmpty()) ||    (!strErrorRxOS.IsEmpty()))
	{
		
		if (!strErrorRxOD.IsEmpty()) 
		{
			strError += "\r\n----------------------Eye OD--------------------\r\n";
			strError += strErrorRxOD;
			strError += "-------------------------------------------------\r\n";
		}
		if (!strErrorRxOS.IsEmpty())
		{
			strError += "\r\n----------------------Eye OS--------------------\r\n";
			strError += strErrorRxOS;
			strError += "-------------------------------------------------\r\n";
		}
	}
// (s.dhole 2012-02-06 12:02) - PLID 42499
	// If Priscription information is missing than no poit to check  design and frame data	
	if (!strError.IsEmpty()){
		MsgBox("The following information is missing or invalid.\r\n\r\n" + strError);
		return FALSE;
	}
	// (s.dhole 2012-02-06 11:12) - PLID 42499 Capture other errors
	CString strErrorOtherInfo = "";
	
	//Job Type
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have job types
	// (s.dhole 2012-02-21 09:47) - PLID 47979 VisionWeb required this data
	if(m_vwot == vwotSpectacleLens && bISVisionWebOrder ==TRUE && 
		(m_pJobType->CurSel == NULL || VarString(  m_pJobType->CurSel->GetValue(jtcCode)  )=="")) {
		// (s.dhole 2012-02-06 11:12) - PLID 42499
		strError += "You must select a Job Type\r\n";
		//MsgBox("You must select a Job Type");
		//return FALSE;
	}


	//TES 12/14/2010 - PLID 40539 - We need a design for any lens we're saving.
	//TES 5/25/2011 - PLID 43737 - But not if this is a contact lens order
	if(m_vwot == vwotSpectacleLens) {
		if(bSaveLeftLens && bISVisionWebOrder ==TRUE) {
			//(s.dhole 2012-02-08 17:18) - PLID 48033 design code = -1  is not valid
			if(m_pLensDesignL->CurSel == NULL || VarLong (m_pLensDesignL->CurSel->GetValue(ldcID)) ==-1 ) {
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				strErrorOtherInfo  +="You must select a Design for each lens being ordered\r\n";
				//MsgBox("You must select a Design for each lens being ordered.");
				//return FALSE;
			}
		}
		if(bSaveRightLens && bISVisionWebOrder ==TRUE) {
			//(s.dhole 2012-02-08 17:18) - PLID 48033 design code = -1  is not valid
			if(m_pLensDesignR->CurSel == NULL || VarLong (m_pLensDesignR->CurSel->GetValue(ldcID)) ==-1) {
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				if (strErrorOtherInfo =="")
					strErrorOtherInfo  +="You must select a Design for each lens being ordered\r\n";
				//MsgBox("You must select a Design for each lens being ordered.");
				//return FALSE;
			}
		}
	}
	// (s.dhole 2012-02-06 11:12) - PLID 42499
	strError += strErrorOtherInfo ;
	
	// (s.dhole 2012-02-23 09:56) - PLID  47396  visionweb support this validation
	//Supplier
	if(m_nSupplierID == -1 && (bISVisionWebOrder ==TRUE || m_vwot == vwotContactLensPatient)) {
		// (s.dhole 2012-05-25 17:57) - PLID 50617
		strError +="You must select a Supplier/Lab\r\n";
		//MsgBox("You must select a Supplier");
		//return FALSE;
	}


	// (s.dhole 2012-02-06 11:12) - PLID 42499 
	BOOL bISFrameSelected = FALSE;  
	IRowSettingsPtr pRow = m_pFrame->CurSel;
	if (pRow != NULL && (VarLong(pRow->GetValue(fcID),-1)!=-1))	{
		bISFrameSelected =TRUE;
	}
	// (s.dhole 2012-03-15 15:59) - PLID 48811 If this check box is checked than we should warn user 
	if (IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED) && bISFrameSelected == FALSE)  
	{
		strError += "You must select a Frame\r\n";	
	} 
	else if (bISFrameSelected==FALSE && m_vwot == vwotSpectacleLens && bISVisionWebOrder ==TRUE)
	{
		strError +="You must select a Frame\r\n";	
	}
	
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have thickness
	if(bISFrameSelected == TRUE && m_vwot == vwotSpectacleLens ) {

		//Thickness
		IRowSettingsPtr pRow = m_pThicknessType->CurSel;
		if(pRow && VarString(pRow->GetValue(ttcCode)) != "DRS" && VarString(pRow->GetValue(ttcCode)) != "")  {
			if(bSaveRightLens) {
				// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
				GetDlgItemText(IDC_THICKNESS_R, str);
				double dThickness = atof(str);
				// (s.dhole 2012-02-02 15:16) - PLID  47396  visionweb support this validation
				// (s.dhole 2013-05-21 10:56) - PLID 56558 only check if this is visionweb order
				if((bISVisionWebOrder ==TRUE) && (dThickness <= 0.1 || dThickness >= 9.9)) {
					// (s.dhole 2012-02-06 11:12) - PLID 42499
					strError +="Lens OD: Thickness must be between 0.1 and 9.9\r\n";
					//MsgBox("Thickness must be between 0.1 and 9.9");
					//GetDlgItem(IDC_THICKNESS_R)->SetFocus();
					//return FALSE;
				}
			}
			if(bSaveLeftLens) {
				// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
				GetDlgItemText(IDC_THICKNESS_L, str);
				// (s.dhole 2012-02-02 15:15) - PLID  47396  visionweb support this validation
				double dThickness = atof(str);
				if ((bISVisionWebOrder ==TRUE) && (dThickness <= 0.1 || dThickness >= 9.9)) {
					// (s.dhole 2012-02-06 11:12) - PLID 42499
					strError +="Lens OS: Thickness must be between 0.1 and 9.9\r\n";
					//MsgBox("Thickness must be between 0.1 and 9.9");
					//GetDlgItem(IDC_THICKNESS_L)->SetFocus();
					//return FALSE;
				}
			}
			
		}
	}
	CString strFrameData="";

	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have frames
	if(bISVisionWebOrder==TRUE && m_vwot == vwotSpectacleLens) {
		//Frame Type
		// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
		IRowSettingsPtr pRow = m_pFrameType->CurSel;
		if(pRow == NULL ||  VarLong(pRow->GetValue(ftcID),-1 ) ==-1) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strFrameData +="You must select a Frame Type\r\n";
			//MsgBox("You must select a Frame Type");
			//return FALSE;
		}
	}

	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have frames
	if(bISVisionWebOrder==TRUE && m_vwot == vwotSpectacleLens) {
		GetDlgItemText(IDC_A_BOX, str);
		if(!str.IsEmpty()) {
			// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
			double dBoxA = atof(str);
			// (s.dhole 2012-02-02 15:14) - PLID  47396  visionweb support this validation
			if ((bISVisionWebOrder ==TRUE) && (dBoxA < 0)) {
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				strFrameData +="The Box A value must be greater than zero\r\n";
				//MsgBox("The Box A value must be greater than zero");
				//GetDlgItem(IDC_A_BOX)->SetFocus();
				//return FALSE;
			}
			
		}
		else {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strFrameData +="You must fill in the Box A value\r\n";
			// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
			//MsgBox("You must fill in the Box A value");
			//return FALSE;
		}

		GetDlgItemText(IDC_B_BOX, str);
		if(!str.IsEmpty()) {
			// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
			double dBBox = atof(str);
			// (s.dhole 2012-02-02 15:15) - PLID  47396  visionweb support this validation
			if ((bISVisionWebOrder ==TRUE) && (dBBox < 0)) {
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				strFrameData +="The Box B value must be greater than zero\r\n";
				//MsgBox("The Box B value must be greater than zero");
				//GetDlgItem(IDC_B_BOX)->SetFocus();
				//return FALSE;
			}
			
		}
		else {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strFrameData +="You must fill in the Box B value\r\n";
			// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
			//MsgBox("You must fill in the Box B value");
			//return FALSE;
		}

		GetDlgItemText(IDC_ED, str);
		if(str.IsEmpty()) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strFrameData +="You must fill in the ED value\r\n";
			// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
			//MsgBox("You must fill in the ED value");
			//return FALSE;
		}

		GetDlgItemText(IDC_DBL, str);
		if(!str.IsEmpty()) {
			// (b.savon 2011-10-14 14:12) - PLID 45957 - Remove the limits on glasses order data entry
			double dDBL = atof(str);
			// (s.dhole 2012-07-20 11:12) - PLID 51327
			if ((bISVisionWebOrder ==TRUE) && (dDBL < 0.02 || dDBL > 40.00 )) {
				// (s.dhole 2012-02-06 11:12) - PLID 42499
				// (s.dhole 2012-07-20 11:12) - PLID 51327 vision web only support max 40 mm 
				strFrameData +="The DBL value must be between 0.02 and 40.00\r\n";
				
				//MsgBox("The DBL value must be between 0.00 and 180.00");
				//GetDlgItem(IDC_DBL)->SetFocus();
				//return FALSE;
			}
		}
		else {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
				strFrameData +="You must fill in the DBL value\r\n";
			// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
			//MsgBox("You must fill in the DBL value");
			//return FALSE;
		}
	}



	if (!strFrameData.IsEmpty()) 
	{
		
		strError += "\r\n---------------------- Frame -------------------\r\n";
		strError += strFrameData ;
		strError += "-------------------------------------------------\r\n";
	}
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have custom parameters
	if(bISVisionWebOrder==TRUE &&  m_vwot == vwotSpectacleLens) {
		//TES 12/8/2010 - PLID 41715 - Check for any required parameters that haven't been filled in.
		EnsureParameterList();
		bool bRequiredMissing = false;
		for(int i = 0; i < m_arCustomParams.GetSize() && !bRequiredMissing; i++) {
			VisionWebCustomParam vwcp = m_arCustomParams[i];
			if(vwcp.bIsRequired) {
				CString strValue;
				m_mapParamValues.Lookup(vwcp.strID, strValue);
				if(strValue.IsEmpty()) {
					bRequiredMissing = true;
				}
			}
		}
		// (s.dhole 2012-02-01 15:25) - PLID 47396 Not sure is this visioweb
		if(bRequiredMissing) {
			// (s.dhole 2012-02-06 11:12) - PLID 42499
			strError +="The Lens Design you have selected requires customization data to be entered.  Please click the 'Customize...' button to enter "
				"this information.\r\n";
			//MsgBox("The Lens Design you have selected requires customization data to be entered.  Please click the 'Customize...' button to enter "
			//	"this information.");
			//return FALSE;
		}
	}
	// (s.dhole 2012-04-16 10:06) - PLID 43785
	BOOL bIsNegativeTotal = FALSE;
	BOOL bIsQuantityZero = FALSE;
	for(int nCount= 0 ; nCount <m_arLenseServiceInfo.GetSize() ;  nCount++  ){
		if (m_arLenseServiceInfo[nCount].bIsDelete ==FALSE)	
		{
		if (m_arLenseServiceInfo[nCount].LineTotal< COleCurrency(0,0) || 
			m_arLenseServiceInfo[nCount].PatientResp < COleCurrency(0,0) || 
			m_arLenseServiceInfo[nCount].VisionResp< COleCurrency(0,0) ){
				bIsNegativeTotal=TRUE;
			}
			if ( m_arLenseServiceInfo[nCount].nQty<=0 ){
				 bIsQuantityZero=TRUE;
			}
		}
	}
	if (bIsNegativeTotal==TRUE){
		strError +="You cannot have a negative charge or patient responsibility.\r\n";
	}
	if (bIsQuantityZero==TRUE){
		strError +="You must have a quantity greater than zero.\r\n";
	}
	if (strError.IsEmpty()){

		return TRUE;
	}
	else{
		MsgBox( "The following information is missing or invalid.\r\n\r\n" +strError);
		return FALSE;
	}
	
	
}

void CVisionWebOrderDlg::Save(BOOL bSaveLeftLens, BOOL bSaveRightLens)
{	
	//TES 11/24/2010 - PLID 40864 - Auditing
	long nAuditTransactionID = BeginNewAuditEvent();
	bool bIsNewOrder = (m_nOrderID==-1)?true:false;
	// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
	_variant_t varLocationID = g_cvarNull, varsupplierID = g_cvarNull;
	if (m_nSupplierID > -1)	
		varsupplierID=m_nSupplierID ;
	// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
	if (m_nLocationID > -1)	
		varLocationID=m_nLocationID ;

	//r.wilson 2/24/2012 - PLID 43702 
	BOOL bShipToPatient = ((CButton *)GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT))->GetCheck();
	//BOOL bShipToPatient = GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT)->GetChecked();

	//Patient ID
	long nPatientID = -1;
	CString strPatientName;
	IRowSettingsPtr pRow = m_pPatient->CurSel;
	if(pRow) {
		nPatientID = VarLong(pRow->GetValue(pcID));
		strPatientName = VarString(pRow->GetValue(pcName));
	}
	else {
		//Must be inactive
		ASSERT(m_nPendingPatientID != -1);
		nPatientID = m_nPendingPatientID;
		strPatientName = m_strSavedPatientName;
	}
	//TES 11/24/2010 - PLID 40864 - Audit
	if(!bIsNewOrder && strPatientName != m_strSavedPatientName) {
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderPatient, m_nOrderID, m_strSavedPatientName, strPatientName, aepMedium);
		// (s.dhole 2011-05-05 10:28) - PLID 43567 Audit, If we change patine in edit order than we are changing prescription info
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesRxPatient, m_nOrderID, m_strSavedPatientName, strPatientName, aepMedium);
	}
	m_strSavedPatientName = strPatientName;


	//LocationID
	CString strLocationName;
	pRow = m_pLocation->CurSel;
	if(pRow) {
		strLocationName = VarString(pRow->GetValue(lcName));
	}
	else {
		ASSERT(m_pLocation->IsComboBoxTextInUse);
		strLocationName = CString((LPCTSTR)m_pLocation->ComboBoxText);
	}
	//TES 11/24/2010 - PLID 40864 - Audit
	if(!bIsNewOrder && strLocationName != m_strSavedLocationName) {
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderLocation, m_nOrderID, m_strSavedLocationName, strLocationName, aepMedium);
	}
	m_strSavedLocationName = strLocationName;

	//TES 4/8/2011 - PLID 43058 - Provider (may be NULL)
	CString strProviderName;
	_variant_t varProviderID = g_cvarNull;
	if(m_nProviderID != -1) {
		varProviderID = m_nProviderID;
		pRow = m_pProvider->CurSel;
		if(pRow) {
			strProviderName = VarString(pRow->GetValue(prcName));
		}
		else {
			ASSERT(m_pProvider->IsComboBoxTextInUse);
			strProviderName = CString((LPCTSTR)m_pProvider->ComboBoxText);
		}
	}
	if(!bIsNewOrder && strProviderName != m_strSavedProviderName) {
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderProvider, m_nOrderID, m_strSavedProviderName, strProviderName, aepMedium);
	}
	m_strSavedProviderName = strProviderName;

	// (j.dinatale 2012-05-11 15:08) - PLID 50206 - audit the optician if it changed and is not a new order
	CString strOpticianName = "<None>";
	{
		NXDATALIST2Lib::IRowSettingsPtr pOptRow = m_pdlOpticianList->CurSel;
		if(pOptRow){
			strOpticianName = VarString(pOptRow->GetValue(GlassesOrderOpticianList::Name), "<None>");
		}
	}		

	if(!bIsNewOrder && m_strSavedOpticianName != strOpticianName){
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderOptician, m_nOrderID,  m_strSavedOpticianName, strOpticianName, aepMedium);
		m_strSavedOpticianName = strOpticianName;
	}
	// (s.tullis 2015-11-04 11:30) - PLID 67263 - Added lensRxType
	//SupplierID, SupplierLocationID
	//TES 5/25/2011 - PLID 43737 - Contact Lens orders store the supplier in a different field.
	CString strSupplierName;
	LensRxType LensRxType;
	long nSupplierLocationID = -1;
	if(m_vwot == vwotSpectacleLens) {
		pRow = m_pSupplier->CurSel;
		LensRxType = LensRxType::RxTypeGlasses;
	}
	else {
		pRow = m_pCLSupplier->CurSel;
		LensRxType = LensRxType::RxTypeContacts;
	}
	if(pRow) {
		strSupplierName = VarString(pRow->GetValue(scName));
	}
	else {
		strSupplierName = m_strSavedSupplierName;
	}
	//TES 11/24/2010 - PLID 40864 - Audit
	if(!bIsNewOrder && strSupplierName != m_strSavedSupplierName) {
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderSupplier, m_nOrderID, m_strSavedSupplierName, strSupplierName, aepMedium);
	}
	m_strSavedSupplierName = strSupplierName;

	//TES 12/3/2010 - PLID 40883 - Batch saving.
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
	CParamSqlBatch batch;
	batch.Declare("SET NOCOUNT ON");
	batch.Declare("DECLARE @nSupplierLocationID INT");
	batch.Add("SELECT @nSupplierLocationID = ID FROM GlassesSupplierLocationsT "
		"WHERE LocationID = {VT_I4} AND SupplierID = {VT_I4}",
		varLocationID, varsupplierID);

	//TES 11/17/2010 - PLID 40539 - VisionWeb only supports one order type, so this is hardcoded to 1 for now.
	//TES 5/24/2011 - PLID 43737 - We have this stored in a member variable now
	//long nOrderType = 1;

	//Description
	CString strDescription;
	GetDlgItemText(IDC_VISIONWEB_ORDER_DESCRIPTION, strDescription);
	//TES 11/24/2010 - PLID 40864 - Audit
	if(!bIsNewOrder && m_strSavedDescription != strDescription) {
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDescription, m_nOrderID, m_strSavedDescription, strDescription, aepMedium);
	}
	m_strSavedDescription = strDescription;

	
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have job types, job notes, or frames
	CString strJobType, strSpecialInstructions;
	_variant_t varFrameTypeID = g_cvarNull, varShapeA = g_cvarNull, varShapeB = g_cvarNull, varShapeED = g_cvarNull, varShapeHalfDbl = g_cvarNull;
	COleCurrency cyFrameCost, cyLensCost;
	if(m_vwot == vwotSpectacleLens) {
		//Job Type
		strJobType = VarString(m_pJobType->CurSel->GetValue(jtcCode));
		//TES 11/29/2010 - PLID 40864 - Audit
		CString strJobTypeDesc = VarString(m_pJobType->CurSel->GetValue(jtcName));
		if(!bIsNewOrder && m_strSavedJobType != strJobTypeDesc) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderJobType, m_nOrderID, m_strSavedJobType, strJobTypeDesc, aepMedium);
		}
		m_strSavedJobType = strJobTypeDesc;

		//FrameType
		varFrameTypeID = g_cvarNull;
		CString strFrameType;
		pRow = m_pFrameType->CurSel;
		if(pRow ) {
			// (s.dhole 2012-02-21 11:51) - PLID Frame type is optional if frame is not selected
			if (VarLong(pRow->GetValue(ftcID))!=-1 )
				varFrameTypeID = pRow->GetValue(ftcID);
			strFrameType = VarString(pRow->GetValue(ftcName));
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && m_strSavedFrameType != strFrameType) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderFrameType, m_nOrderID, m_strSavedFrameType, strFrameType, aepMedium);
		}
		m_strSavedFrameType = strFrameType;

		//Job Note
		GetDlgItemText(IDC_SPECIAL_INSTRUCTIONS, strSpecialInstructions);
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && m_strSavedJobNote != strSpecialInstructions) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderJobNote, m_nOrderID, m_strSavedJobNote, strSpecialInstructions, aepMedium);
		}
		m_strSavedJobNote = strSpecialInstructions;

	// (s.dhole 2010-11-08 11:30) - PLID 40539
		CString strShapeA;
		GetDlgItemText(IDC_A_BOX, strShapeA);
		double dShapeA = INVALID_RX_VALUE;
		varShapeA = g_cvarNull;
		if(!strShapeA.IsEmpty()) {
			dShapeA = atof(strShapeA);
			varShapeA = dShapeA;
		}
		//TES 11/30/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && m_dSavedBoxA != dShapeA) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderBoxA, m_nOrderID, 
				(m_dSavedBoxA==INVALID_RX_VALUE?"":AsPrescriptionNumber(AsString(m_dSavedBoxA),pnfNaturalFloat)), strShapeA, aepMedium);
		}
		m_dSavedBoxA = dShapeA;

	// (s.dhole 2010-11-08 11:30) - PLID 40539
		CString strShapeB;
		GetDlgItemText(IDC_B_BOX, strShapeB);
		double dShapeB = INVALID_RX_VALUE;
		varShapeB = g_cvarNull;
		if(!strShapeB.IsEmpty()) {
			dShapeB = atof(strShapeB);
			varShapeB = dShapeB;
		}
		//TES 11/30/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && m_dSavedBoxB != dShapeB) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderBoxB, m_nOrderID, 
				(m_dSavedBoxB==INVALID_RX_VALUE?"":AsPrescriptionNumber(AsString(m_dSavedBoxB),pnfNaturalFloat)), strShapeB, aepMedium);
		}
		m_dSavedBoxB = dShapeB;
	// (s.dhole 2010-11-08 11:30) - PLID 40539
		CString strShapeED;
		GetDlgItemText(IDC_ED, strShapeED);
		double dShapeED = INVALID_RX_VALUE;
		varShapeED = g_cvarNull;
		if(!strShapeED.IsEmpty()) {
			dShapeED = atof(strShapeED);
			varShapeED = dShapeED;
		}
		//TES 11/30/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && m_dSavedED != dShapeED) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderED, m_nOrderID, 
				(m_dSavedED==INVALID_RX_VALUE?"":AsPrescriptionNumber(AsString(m_dSavedED),pnfNaturalFloat)), strShapeED, aepMedium);
		}
		m_dSavedED = dShapeED;
	// (s.dhole 2010-11-08 11:30) - PLID 40539
		CString strShapeHalfDbl;
		GetDlgItemText(IDC_DBL, strShapeHalfDbl);
		double dShapeHalfDbl = INVALID_RX_VALUE;
		varShapeHalfDbl = g_cvarNull;
		if(!strShapeHalfDbl.IsEmpty()) {
			dShapeHalfDbl = atof(strShapeHalfDbl);
			varShapeHalfDbl = dShapeHalfDbl;
		}
		//TES 11/30/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && m_dSavedDBL != dShapeHalfDbl) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDBL, m_nOrderID, 
				(m_dSavedDBL==INVALID_RX_VALUE?"":AsPrescriptionNumber(AsString(m_dSavedDBL),pnfNaturalFloat)), strShapeHalfDbl, aepMedium);
		}
		m_dSavedDBL = dShapeHalfDbl;

		//TES 6/29/2011 - PLID 44166 - Get the Frame Cost
		CString strFrameCost;
		GetDlgItemText(IDC_FRAME_COST, strFrameCost);
		cyFrameCost = ParseCurrencyFromInterface(strFrameCost);
		if(!bIsNewOrder && m_cySavedFrameCost != cyFrameCost) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderFrameCost, m_nOrderID,
				FormatCurrencyForInterface(m_cySavedFrameCost), FormatCurrencyForInterface(cyFrameCost), aepMedium);
		}
		m_cySavedFrameCost = cyFrameCost;

		//TES 6/29/2011 - PLID 44166 - Get the Lens Cost
		CString strLensCost;
		GetDlgItemText(IDC_LENS_COST, strLensCost);
		cyLensCost = ParseCurrencyFromInterface(strLensCost);
		if(!bIsNewOrder && m_cySavedLensCost != cyLensCost) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderLensCost, m_nOrderID,
				FormatCurrencyForInterface(m_cySavedLensCost), FormatCurrencyForInterface(cyLensCost), aepMedium);
		}
		m_cySavedLensCost = cyLensCost;
	}

	//TES 4/8/2011 - PLID 43058 - Date
	COleDateTime dtDate = m_pDate->GetDateTime();
	if(!bIsNewOrder && m_dtSavedDate != dtDate) {
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDate, m_nOrderID, FormatDateTimeForInterface(m_dtSavedDate, 0, dtoDate), FormatDateTimeForInterface(dtDate, 0, dtoDate), aepMedium);
	}
	m_dtSavedDate = dtDate;

	// (s.dhole 2011-04-27 10:48) - PLID 43451  Audit Rx Date change

	COleDateTime dtDateRx = m_pRxDate->GetDateTime();	
	if(!bIsNewOrder && m_dtSavedRxDate != dtDateRx) {
		CString strRxNewDate ="";
		if (dtDateRx.GetStatus() == COleDateTime::valid && dtDateRx!=NULL)
			strRxNewDate=FormatDateTimeForInterface(dtDateRx, 0, dtoDate);
		CString strRxOldDate ="";
		if (m_dtSavedRxDate.GetStatus() == COleDateTime::valid && m_dtSavedRxDate!=NULL)
			strRxOldDate=FormatDateTimeForInterface(m_dtSavedRxDate, 0, dtoDate);
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderRxDate, m_nOrderID, strRxOldDate, strRxNewDate, aepMedium);
	}
	m_dtSavedRxDate=dtDateRx;
		

	// (s.dhole 2011-04-27 10:48) - PLID 43813  Audit Rx Date change

	COleDateTime dtDateRxExpiration = m_pRxExpirationDate->GetDateTime();	
	if(!bIsNewOrder && m_dtSavedRxExpiration  != dtDateRxExpiration) {
		CString strRxExpirationNewDate ="";
		if (dtDateRxExpiration.GetStatus() == COleDateTime::valid && dtDateRxExpiration !=NULL)
			strRxExpirationNewDate=FormatDateTimeForInterface(dtDateRxExpiration, 0, dtoDate);
		CString strRxExpirationOldDate ="";
		if (m_dtSavedRxExpiration.GetStatus() == COleDateTime::valid && m_dtSavedRxExpiration !=NULL)
			strRxExpirationOldDate=FormatDateTimeForInterface(m_dtSavedRxExpiration, 0, dtoDate);
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesRxExpirationDatePatient, m_nOrderID, strRxExpirationOldDate, strRxExpirationNewDate, aepMedium);
	}
	m_dtSavedRxExpiration =dtDateRxExpiration;



	batch.Declare("DECLARE @nOrderID INT");
	batch.Declare("DECLARE @nLensRxID INT");
	if(m_nOrderID == -1) {
		//Ensure our LensRxT records exists.
		// (s.tullis 2015-11-04 10:54) - PLID 67263 - Add RxType
		// (s.dhole 2011-04-27 10:48) - PLID 43451  add/remove Rx Date 
		// (s.dhole 2011-06-15 17:51) - PLID 43813 insert Expiration Date
		if(m_nLensRxID == -1) {
			_variant_t  varRxDate=g_cvarNull ;
			_variant_t  varRxExpirationDate =g_cvarNull;
			if (m_pRxDate->GetStatus() == 1)
				varRxDate =COleVariant(dtDateRx);
			if (m_pRxExpirationDate->GetStatus() == 1)
				varRxExpirationDate =COleVariant(dtDateRxExpiration);
			batch.Add("INSERT INTO LensRxT (PersonID, RxDate,RxExpirationDate,CreateDate, RxType) "
				"VALUES ({INT}, {VT_DATE},{VT_DATE}, getdate(), {CONST_INT}) \r\n"
				"SELECT @nLensRxID = CONVERT(int, SCOPE_IDENTITY())",
				nPatientID,varRxDate,varRxExpirationDate, (long)LensRxType);

		}
	

		//TES 3/22/2011 - PLID 42761 - Added EMNID, which can never change on an existing order
		_variant_t varEmnID = g_cvarNull;
		if(m_nEmnID != -1) {
			varEmnID = m_nEmnID;
		}
		// (s.dhole 2012-03-12 11:15) - PLID 48811 Save ToBeOrdered
		_variant_t varFrameToBeOrdered ;
		if  (IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED)){
			 varFrameToBeOrdered = g_cvarTrue;
		}
		else{
			 varFrameToBeOrdered = g_cvarFalse;
		}
		// (s.dhole 2012-04-09 12:09) - PLID 49518
		_variant_t varFrameProductID = g_cvarNull;
		pRow = m_pFrame->CurSel;
		if(pRow && VarLong(pRow->GetValue(fcServiceID) ,-1) !=-1) {
			varFrameProductID =VarLong(pRow->GetValue(fcServiceID)) ;
		}

		// (j.dinatale 2012-04-10 11:08) - PLID 49536 - optician field
		_variant_t vtOpticianID = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pOptRow = m_pdlOpticianList->CurSel;
			if(pOptRow){
				vtOpticianID = pOptRow->GetValue(GlassesOrderOpticianList::ID);
			}
		}
		// (s.dhole 2012-04-25 16:58) - PLID 49992
		_variant_t vtInsuredPartyID= g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pVisionPlanRow = m_pVisionPlans->CurSel;
			if(pVisionPlanRow){
				if (VarLong (pVisionPlanRow->GetValue(vpcPersonID),-1)!=-1){
				vtInsuredPartyID= pVisionPlanRow->GetValue(vpcPersonID);
				}
			}
		}
		CString strGlassesInvoiceNo="";
		// (s.dhole 2012-05-08 09:20) - PLID 50131
		GetDlgItemText(IDC_GLASSES_ORD_INVO_NO, strGlassesInvoiceNo);


		// (s.dhole 2010-11-08 11:30) - PLID 40539 - Added ShapeA, ShapeB, ShapeED, ShapeHalfDbl
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		//TES 3/22/2011 - PLID 42761 - Added EMNID
		//TES 4/8/2011 - PLID 43058 - Added Date and ProviderID
		//TES 6/29/2011 - PLID 44166 - Added FrameCost and LensCost
		// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
		// (s.dhole 2012-03-12 11:15) - PLID 48811 Save ToBeOrdered
		// (s.dhole 2012-04-09 12:09) - PLID 49518 Save FrameProductID 
		// (j.dinatale 2012-04-10 11:08) - PLID 49536 - optician field		
		// (r.wilson 4/11/2012) PLID 43741 Changed GlassesOrderStatus to GlassesOrderStatusID
		// (r.wilson 5/2/2012) PLID 43702 Added ShipToPatient field on insert 
		//(s.dhole 2012-05-08 09:20) - PLID 50131 Save InvoiceNo
		batch.Add("INSERT INTO GlassesOrderT (PersonID, LocationID, SupplierID, Description, "
			"GlassesOrderType, GlassesSupplierLocationID, GlassesJobType, UpdateDate, VisionWebOrderExchangeID, "
			"OrderCreateDate, GlassesCatalogFrameTypeID, GlassesJobNote, "
			"ShapeA, ShapeB, ShapeED, ShapeHalfDbl, RequestedDate, GlassesOrderStatusID, LensRxID, UserID, EMNID, Date, ProviderID, "
			"FrameCost, LensCost,FrameToBeOrdered,FrameProductID, OpticianID,InsuredPartyID,ShipToPatient,InvoiceNo) "
			"VALUES ({INT}, {VT_I4}, {VT_I4}, {STRING}, "
			"{INT}, @nSupplierLocationID, {STRING}, getdate(), '', "
			"getdate(), {VT_I4}, {STRING}, \r\n"
			"{VT_R8}, {VT_R8}, {VT_R8}, {VT_R8}, getdate(), {INT}, @nLensRxID, {INT}, {VT_I4}, {OLEDATETIME}, {VT_I4}, "
			"{OLECURRENCY}, {OLECURRENCY}, {VT_BOOL},{VT_I4}, {VT_I4}, {VT_I4},{BIT},{STRING}) \r\n"
			"SELECT @nOrderID = CONVERT(int, SCOPE_IDENTITY())",
			nPatientID, varLocationID, varsupplierID, strDescription, 
			m_vwot, strJobType,
			varFrameTypeID, strSpecialInstructions,
			varShapeA, varShapeB, varShapeED, varShapeHalfDbl, 1, GetCurrentUserID(), varEmnID, dtDate, varProviderID,
			cyFrameCost, cyLensCost, varFrameToBeOrdered,varFrameProductID, vtOpticianID,vtInsuredPartyID,bShipToPatient,strGlassesInvoiceNo);
		//TES 11/24/2010 - PLID 40864 - Audit the creation of this new order
		AuditEvent(nPatientID, GetExistingPatientName(nPatientID), nAuditTransactionID, aeiGlassesOrderCreate, m_nOrderID, "", "Glasses Order '" + strDescription + "' Created", aepMedium);
		m_bSavedFrameToBeOrdered = VarBool( varFrameToBeOrdered);
	}
	else {
		// (s.dhole 2012-05-18 11:56) - PLID 
		_variant_t varEmnID = g_cvarNull;
		if(m_nEmnID != -1) {
			varEmnID = m_nEmnID;
		}
		// (s.dhole 2011-06-17 09:36) - PLID 43813 update Expirtaion date
			_variant_t  varRxDate=g_cvarNull ;
			_variant_t  varRxExpirationDate =g_cvarNull;
			if (m_pRxDate->GetStatus() == 1){
				varRxDate=COleVariant(dtDateRx);
			}
			if (m_pRxExpirationDate->GetStatus() == 1){
				varRxExpirationDate= COleVariant(dtDateRxExpiration);
			}
			
		// (s.dhole 2011-05-05 10:28) - PLID 43567 added PatientID  
			batch.Add("UPDATE LensRxT Set PersonID ={INT}, RxDate= {VT_DATE} , RxExpirationDate= {VT_DATE}\r\n"
				" WHERE  ID = {INT}",
			nPatientID, varRxDate,varRxExpirationDate,m_nLensRxID );			

		
		batch.Add("SELECT @nOrderID = {INT}", m_nOrderID);
		batch.Add("SELECT @nLensRxID = {INT}", m_nLensRxID);
		// (s.dhole 2012-03-15 16:00) - PLID 48811
		_variant_t 	varFrameToBeOrdered =g_cvarNull ;
		if  (IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED)){
			varFrameToBeOrdered = g_cvarTrue; 
		}
		else{
			varFrameToBeOrdered = g_cvarFalse;
		}
		_variant_t varFrameProductID = g_cvarNull;
		pRow = m_pFrame->CurSel;
		if(pRow && VarLong(pRow->GetValue(fcServiceID),-1) !=-1) {
			varFrameProductID =VarLong(pRow->GetValue(fcServiceID)) ;
		}

		// (j.dinatale 2012-04-10 11:08) - PLID 49536 - optician field
		_variant_t vtOpticianID = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pOptRow = m_pdlOpticianList->CurSel;
			if(pOptRow){
				vtOpticianID = pOptRow->GetValue(GlassesOrderOpticianList::ID);
			}
		}
		// (s.dhole 2012-04-25 16:58) - PLID 49992
		_variant_t vtInsuredPartyID= g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pVisionPlanRow = m_pVisionPlans->CurSel;
			if(pVisionPlanRow){
				if (VarLong (pVisionPlanRow->GetValue(vpcPersonID),-1)!=-1){
				vtInsuredPartyID= pVisionPlanRow->GetValue(vpcPersonID);
				}
			}
		}
		// (s.dhole 2012-05-08 09:20) - PLID 50131
		CString strGlassesInvoiceNo="";
		GetDlgItemText(IDC_GLASSES_ORD_INVO_NO, strGlassesInvoiceNo);
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		//TES 4/8/2011 - PLID 43058 - Added Date and ProviderID
		//TES 6/29/2011 - PLID 44166 - Added FrameCost and LensCost
		// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
	
		// (s.dhole 2012-03-15 12:22) - PLID 48811 Save frame to come
		// (s.dhole 2012-04-09 12:09) - PLID 49518 Save FrameProductID 
		// (j.dinatale 2012-04-10 11:09) - PLID 49536 - optician field
		// (s.dhole 2012-04-25 17:05) - PLID 49992 InsuredPartyID field
		//(s.dhole 2012-05-08 09:20) - PLID 50131 Save InvoiceNo
		// (s.dhole 2012-05-18 11:55) - PLID 49968 Save EMNID
		batch.Add("UPDATE GlassesOrderT SET PersonID = {INT}, LocationID = {VT_I4}, SupplierID = {VT_I4}, Description = {STRING}, "
			"GlassesOrderType = {INT}, GlassesSupplierLocationID = @nSupplierLocationID, GlassesJobType = {STRING}, UpdateDate = getdate(), "
			"GlassesCatalogFrameTypeID = {VT_I4}, GlassesJobNote = {STRING}, "
			" ShapeA = {VT_R8}, ShapeB = {VT_R8}, ShapeED = {VT_R8}, ShapeHalfDbl =  {VT_R8}, "// (s.dhole 2010-11-08 11:30) - PLID 40539
			"Date = {OLEDATETIME}, ProviderID = {VT_I4}, FrameCost = {OLECURRENCY}, LensCost = {OLECURRENCY}, ShipToPatient = {BIT} "
			" , FrameToBeOrdered = {VT_BOOL},FrameProductID = {VT_I4}, OpticianID = {VT_I4} , InsuredPartyID={VT_I4} ,InvoiceNo ={STRING} ,EmnID ={VT_I4} "
			"WHERE ID = @nOrderID",
			nPatientID, varLocationID, varsupplierID, strDescription, 
			m_vwot, strJobType,
			varFrameTypeID, strSpecialInstructions,
			varShapeA, varShapeB, varShapeED , varShapeHalfDbl,
			dtDate, varProviderID, cyFrameCost, cyLensCost,bShipToPatient , varFrameToBeOrdered,varFrameProductID, vtOpticianID, vtInsuredPartyID,strGlassesInvoiceNo,varEmnID);// (s.dhole 2010-11-08 11:30) - PLID 40539

	if (!bIsNewOrder  )
	 {
		 // (s.dhole 2012-03-15 12:22) - PLID 48811 auditframe to coame
		 if (VarBool(varFrameToBeOrdered) !=m_bSavedFrameToBeOrdered)
		 {
			 CString strSavedToBeOrder, strToBeOrder; 

			 if (m_bSavedFrameToBeOrdered == TRUE){
				 strSavedToBeOrder = "Frame sold off the shelf:Yes ";
			 }
			 else{
				strSavedToBeOrder = "Frame sold off the shelf: No";
			 }
			 if (varFrameToBeOrdered == g_cvarTrue){
				strToBeOrder == "Yes";
			 }
			 else{
				 strToBeOrder = "No";
			 }
			 AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesFrameToBeOrdered, m_nOrderID,  strSavedToBeOrder, strToBeOrder, aepMedium);
		 }
	 }
	}

	//(r.wilson 4/19/2013) pl PLID 56307 - Lets see if the Temple Length or the Eye Size Loaded is different from what is currently in the textbox
	CString strEyeSize, strTempleLength;
	GetDlgItemText(IDC_TEMPLE_LENGTH, strTempleLength);
	GetDlgItemText(IDC_EYE_SIZE, strEyeSize);
	
	//(r.wilson 4/8/2013) PLID 56307 - Format the EyeSize field before saving
	if(!strEyeSize.IsEmpty()){
		long nEyeSize = atoi(strEyeSize);
		strEyeSize.Format("%li", nEyeSize);
	}
	
	//(r.wilson 4/8/2013) PLID 56307 - Format the Temple Length field before saving
	if(!strTempleLength.IsEmpty()){
		long nTempleLen = atoi(strTempleLength);
		strTempleLength.Format("%li", nTempleLen);
	}

	bool bTempLenChanged =  m_strLoadedTempleLength.Compare(strTempleLength) != 0 ? true:false; 
	bool bEyeSizeChanged = m_strLoadedEyeSize.Compare(strEyeSize) != 0 ? true:false;
	bool bTempleLen_Or_EyeSize_Changed = false;
	CString strOldValue, strNewValue;
	
	if(bEyeSizeChanged){
		bTempleLen_Or_EyeSize_Changed = true;
		//(r.wilson 4/19/2013) pl PLID 56307 - Lets go ahead and update these member variables as well
		strOldValue = m_strLoadedEyeSize;
		strNewValue = strEyeSize;
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderEyeSize, m_nOrderID, strOldValue, strNewValue, aepMedium);
		m_strLoadedEyeSize = strEyeSize;		
	}

	if(bTempLenChanged){
		bTempleLen_Or_EyeSize_Changed = true;
		//(r.wilson 4/19/2013) pl PLID 56307 - Lets go ahead and update these member variables as well		
		strOldValue = m_strLoadedTempleLength;
		strNewValue = strTempleLength;
		AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderTempleLength, m_nOrderID, strOldValue, strNewValue, aepMedium);			
		m_strLoadedTempleLength =  strTempleLength;
	}
	

	//TES 12/16/2010 - PLID 41867 - Moved the frame code down here, since it's in a separate table now.
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have frames
	//(r.wilson 4/19/2013) pl PLID 56307 - If the Temple Length or Eye Size have changed then we need to save
	if(m_vwot == vwotSpectacleLens && (m_bFrameChanged || bTempleLen_Or_EyeSize_Changed)) {
		//TES 12/16/2010 - PLID 41867 - Clear out any existing frame information.
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		batch.Add("DECLARE @nGlassesFramesDataID INT; ");
		batch.Add("SET @nGlassesFramesDataID = (SELECT GlassesFramesDataID FROM GlassesOrderT WHERE GlassesOrderT.ID = @nOrderID); ");

		//TES 12/16/2010 - PLID 41867 - Have they actuall selected a frame?
		IRowSettingsPtr pRow = m_pFrame->CurSel;
		long nFrameID = pRow ? VarLong(pRow->GetValue(fcID), -1) : -1;
		CString strFrame;

		if(m_bFrameChanged){
			batch.Add("UPDATE GlassesOrderT SET GlassesFramesDataID = NULL WHERE GlassesOrderT.ID = @nOrderID");
			batch.Add("DELETE FROM GlassesFramesDataT WHERE ID = @nGlassesFramesDataID; ");
			if(nFrameID != -1) {
				//TES 12/16/2010 - PLID 41867 - This is the display value of the frames datalist.
				// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses			
				strFrame = VarString(pRow->GetValue(fcManufacturer),"") + " - " + VarString(pRow->GetValue(fcStyle),"") + ", " + VarString(pRow->GetValue(fcColor),"");
				batch.Add("INSERT INTO GlassesFramesDataT (IsCatalog, FPC, StyleName, ColorDescription, Eye, Bridge, Temple, "
					"ManufacturerName, BrandName, SKU) "
					"SELECT IsCatalog, FPC, StyleName, ColorDescription, {STRING}, Bridge, {STRING}, ManufacturerName, BrandName, SKU "
					"FROM FramesDataT WHERE ID = {INT}", strEyeSize, strTempleLength, nFrameID);

				batch.Add("SET @nGlassesFramesDataID = convert(int, SCOPE_IDENTITY());");
				batch.Add("UPDATE GlassesOrderT SET GlassesFramesDataID = @nGlassesFramesDataID WHERE ID = @nOrderID");
			} else if (nFrameID == -1) {
				// (s.dhole 2012-02-21 11:54) - PLID 47396 Frame can be optional 
				// (s.dhole 2012-05-14 11:44) - PLID 49734 Since we do Change column data we need to change this column too
				strFrame =VarString(pRow->GetValue(fcServiceName),"");
			}

			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && m_strSavedFrame != strFrame) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderFrame, m_nOrderID, m_strSavedFrame, strFrame, aepMedium);
			}
			m_strSavedFrame = strFrame;
		}else{
			//(r.wilson 4/30/2013) PLID 56307 - No framedata changed but the Eye Size or Temple Length changed then update them only
			if(bTempleLen_Or_EyeSize_Changed && nFrameID != -1){
				batch.Add(
					"IF @nGlassesFramesDataID IS NOT NULL BEGIN "
					"	UPDATE GlassesFramesDataT SET Eye = {STRING}, Temple = {STRING} WHERE ID = @nGlassesFramesDataID; "
					"END ", strEyeSize, strTempleLength);
			}
		}
	}

	batch.Declare("DECLARE @nLeftRxDetailID INT");
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't store to GlassesOrderOtherInfoT
	batch.Declare("DECLARE @nLeftLensOtherInfoID INT");
	if(bSaveLeftLens) {
		//Sphere
		CString strSphere;
		GetDlgItemText(IDC_SPHERE_L, strSphere);
		double dSphere = atof(strSphere);
		//TES 11/24/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && dSphere != m_dSavedSphereL) {
			CString strOldValue;
			if(m_dSavedSphereL != INVALID_RX_VALUE) {
				strOldValue = AsPrescriptionNumber(AsString(m_dSavedSphereL),pnfSignedFloat);
			}
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderSphereL, m_nOrderID, strOldValue, strSphere, aepMedium);
		}
		m_dSavedSphereL = dSphere;

		//Dist. PD
		CString strDistPD;
		GetDlgItemText(IDC_DIST_PD_L, strDistPD);
		double dDistPD = atof(strDistPD);
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && dDistPD != m_dSavedDistPdL) {
			CString strOldDistPD;
			if(m_dSavedDistPdL != INVALID_RX_VALUE) {
				strOldDistPD = AsPrescriptionNumber(AsString(m_dSavedDistPdL),pnfNaturalFloat);
			}
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDistPdL, m_nOrderID, strOldDistPD, strDistPD, aepMedium);
		}
		m_dSavedDistPdL = dDistPD;

		//Cylinder
		
		CString strCylinder;
		GetDlgItemText(IDC_CYLINDER_L, strCylinder);
		_variant_t varCylinder = g_cvarNull;
		if(!strCylinder.IsEmpty()) {
			varCylinder = atof(strCylinder);
		}
		//TES 11/24/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldCylinder;
			if(m_dSavedCylL != INVALID_RX_VALUE) {
				strOldCylinder = AsPrescriptionNumber(AsString(m_dSavedCylL),pnfSignedFloat);
			}
			if(strCylinder != strOldCylinder) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderCylinderL, m_nOrderID, strOldCylinder, strCylinder, aepMedium);
			}
		}
		if(strCylinder.IsEmpty()) {
			m_dSavedCylL = INVALID_RX_VALUE;
		}
		else {
			m_dSavedCylL = atof(strCylinder);
		}

		//Axis
		CString strAxis;
		GetDlgItemText(IDC_AXIS_L, strAxis);
		_variant_t varAxis = g_cvarNull;
		if(!strAxis.IsEmpty()) {
			varAxis = atof(strAxis);
		}
		//TES 11/24/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldAxis;
			if(m_nSavedAxisL != INVALID_RX_VALUE) {
				strOldAxis = AsString(m_nSavedAxisL);
			}
			if(strAxis != strOldAxis) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderAxisL, m_nOrderID, strOldAxis, strAxis, aepMedium);
			}
		}
		if(strAxis.IsEmpty()) {
			m_nSavedAxisL = INVALID_RX_VALUE;
		}
		else {
			m_nSavedAxisL = atoi(strAxis);
		}

		//Addition
		CString strAddition;
		GetDlgItemText(IDC_ADDITION_L, strAddition);
		_variant_t varAddition = g_cvarNull;
		if(!strAddition.IsEmpty()) {
			varAddition = atof(strAddition);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldAddition;
			if(m_dSavedAdditionL != INVALID_RX_VALUE) {
				strOldAddition = AsPrescriptionNumber(AsString(m_dSavedAdditionL),pnfUnsignedFloat);
			}
			if(strAddition != strOldAddition) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderAdditionL, m_nOrderID, strOldAddition, strAddition, aepMedium);
			}
		}
		if(strAddition.IsEmpty()) {
			m_dSavedAdditionL = INVALID_RX_VALUE;
		}
		else {
			m_dSavedAdditionL = atof(strAddition);
		}

		//Prism
		CString strPrism;
		GetDlgItemText(IDC_PRISM_L, strPrism);
		_variant_t varPrism = g_cvarNull;
		if(!strPrism.IsEmpty()) {
			varPrism = atof(strPrism);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldPrism;
			if(m_dSavedPrismL != INVALID_RX_VALUE) {
				strOldPrism = AsPrescriptionNumber(AsString(m_dSavedPrismL),pnfUnsignedFloat);
			}
			if(strPrism != strOldPrism) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderPrismL, m_nOrderID, strOldPrism, strPrism, aepMedium);
			}
		}
		if(strPrism.IsEmpty()) {
			m_dSavedPrismL = INVALID_RX_VALUE;
		}
		else {
			m_dSavedPrismL = atof(strPrism);
		}

		//Secondary Prism 
		// (b.spivey, October 17, 2011) - PLID 44918 - Added secondary prism and auditing logic. 
		CString strSecdPrism; 
		GetDlgItemText(IDC_SECONDARY_PRISM_L, strSecdPrism); 
		_variant_t varSecdPrism = g_cvarNull;
		if(!strSecdPrism.IsEmpty()) {
			varSecdPrism = atof(strSecdPrism);
		}
		// (b.spivey, October 17, 2011) - PLID 44918 - Followed Tom's Prism example for Auditing. 
		if(!bIsNewOrder) {
			CString strOldSecdPrism;
			if(m_dSavedSecdPrismL != INVALID_RX_VALUE) {
				strOldSecdPrism = AsPrescriptionNumber(AsString(m_dSavedSecdPrismL), pnfUnsignedFloat);
			}
			if(strSecdPrism != strOldSecdPrism) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderSecondaryPrismL, m_nOrderID, strOldSecdPrism, strSecdPrism, aepMedium);
			}
		}
		if(strSecdPrism.IsEmpty()) {
			m_dSavedSecdPrismL = INVALID_RX_VALUE;
		}
		else {
			m_dSavedSecdPrismL = atof(strSecdPrism);
		}

		//Base
		_variant_t varBaseVal = g_cvarNull;
		_variant_t varBaseStr = g_cvarNull;
		CString strBase;
		GetDlgItemText(IDC_BASE_L, strBase);
		// (s.dhole 2012-02-07 09:51) - PLID 48004 accept cutom base value
		//if(strBase.CompareNoCase("IN") == 0 || strBase.CompareNoCase("OUT") == 0 
		//	|| strBase.CompareNoCase("UP") == 0 || strBase.CompareNoCase("DOWN") == 0) {
				//varBaseStr = _bstr_t(strBase);
		//}
		//else
		strBase.Replace(" ",""); 
		if(!strBase.IsEmpty()) {
			long nTemp =  atol(strBase);
			if  ((nTemp !=0 || strBase.CompareNoCase("0")==0  ) && (AsString(nTemp).GetLength() ==strBase.GetLength()))	
			{
				varBaseVal = atol(strBase);
			}
			else if (strBase.GetLength()>0) {
				varBaseStr = _bstr_t(strBase);
			}
		}
		//}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && strBase != m_strSavedBaseL) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderBaseL, m_nOrderID, m_strSavedBaseL, strBase, aepMedium);
		}
		m_strSavedBaseL = strBase;

	/// (s.dhole, 2011-12-07 12:29) - PLID 46883 - Validate base2 value. 
		_variant_t varBaseVal2 = g_cvarNull;
		_variant_t varBaseStr2 = g_cvarNull;
		CString strBase2;
		GetDlgItemText(IDC_SECONDARY_BASE_L, strBase2);
		// (s.dhole 2012-02-07 09:51) - PLID 48004 Accept cutom base value
		/*if(strBase2.CompareNoCase("IN") == 0 || strBase2.CompareNoCase("OUT") == 0 
			|| strBase2.CompareNoCase("UP") == 0 || strBase2.CompareNoCase("DOWN") == 0) {
				varBaseStr2 = _bstr_t(strBase2);
		}
		else if(!strBase2.IsEmpty()) {
			varBaseVal2 = atol(strBase2);
		}*/
	 // (s.dhole 2012-02-27 12:32) - PLID 48004 Accept cutom base value
		strBase2.Replace(" ",""); 
		if(!strBase2.IsEmpty()) {
			long nTemp =  atol(strBase2);
			if  ((nTemp !=0 || strBase2.CompareNoCase("0")==0  ) && (AsString(nTemp).GetLength() ==strBase2.GetLength()))	
			{
				varBaseVal2 = atol(strBase2);
			}
			else if (strBase2.GetLength()>0) {
				varBaseStr2 = _bstr_t(strBase2);
			}
		}

		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - audit base2 value. 
		if(!bIsNewOrder && strBase2 != m_strSavedBaseL2) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderBaseL2, m_nOrderID, m_strSavedBaseL2, strBase2, aepMedium);
		}
		m_strSavedBaseL2 = strBase2;


		//Near PD
		_variant_t varNearPD = g_cvarNull;
		CString strNearPD;
		GetDlgItemText(IDC_NEAR_PD_L, strNearPD);
		if(!strNearPD.IsEmpty()) {
			varNearPD = atof(strNearPD);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldNearPD;
			if(m_dSavedNearPdL != INVALID_RX_VALUE) {
				strOldNearPD = AsPrescriptionNumber(AsString(m_dSavedNearPdL), pnfNaturalFloat);
			}
			if(strNearPD != strOldNearPD) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderNearPdL, m_nOrderID, strOldNearPD, strNearPD, aepMedium);
			}
		}
		if(strNearPD.IsEmpty()) {
			m_dSavedNearPdL = INVALID_RX_VALUE;
		}
		else {
			m_dSavedNearPdL = atof(strNearPD);
		}

		//Height
		_variant_t varHeight = g_cvarNull;
		CString strHeight;
		GetDlgItemText(IDC_HEIGHT_L, strHeight);
		if(!strHeight.IsEmpty()) {
			varHeight = atof(strHeight);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldHeight;
			if(m_dSavedHeightL != INVALID_RX_VALUE) {
				strOldHeight = AsPrescriptionNumber(AsString(m_dSavedHeightL), pnfNaturalFloat);
			}
			if(strHeight != strOldHeight) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderHeightL, m_nOrderID, strOldHeight, strHeight, aepMedium);
			}
		}
		if(strHeight.IsEmpty()) {
			m_dSavedHeightL = INVALID_RX_VALUE;
		}
		else {
			m_dSavedHeightL = atof(strHeight);
		}

		// (b.spivey, October 17, 2011) - PLID 44918 - Added SecondaryPrismValue to the insert queries. 
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - added  PrismAxis2, PrismAxisStr2  ot insert and update sql
		if(m_nLeftRxDetailID == -1) {
			batch.Add("INSERT INTO LensDetailRxT "
				"(PrescriptionSphere, FarHalfPd, CylinderValue, CylinderAxis, AdditionValue, PrismValue, "
				"SecondaryPrismValue, PrismAxis, PrismAxisStr, NearHalfPd, SegHeight, PrismAxis2, PrismAxisStr2) "
				"VALUES ({DOUBLE}, {DOUBLE}, {VT_R8}, {VT_R8}, {VT_R8}, {VT_R8}, "
				"{VT_R8}, {VT_I4}, {VT_BSTR}, {VT_R8}, {VT_R8}, {VT_I4}, {VT_BSTR}) \r\n"
				"SELECT @nLeftRxDetailID = CONVERT(int, SCOPE_IDENTITY())",
				dSphere, dDistPD, varCylinder, varAxis, varAddition, varPrism, 
				varSecdPrism, varBaseVal, varBaseStr, varNearPD, varHeight, varBaseVal2, varBaseStr2);
		}
		else {
			batch.Add("SELECT @nLeftRxDetailID = {INT}", m_nLeftRxDetailID);
			batch.Add("UPDATE LensDetailRxT SET PrescriptionSphere = {DOUBLE}, FarHalfPd = {DOUBLE}, "
				"CylinderValue = {VT_R8}, CylinderAxis = {VT_R8}, AdditionValue = {VT_R8}, PrismValue = {VT_R8}, "
				"SecondaryPrismValue = {VT_R8}, PrismAxis = {VT_I4}, PrismAxisStr = {VT_BSTR}, NearHalfPd = {VT_R8}, SegHeight = {VT_R8}, "
				" PrismAxis2 = {VT_I4}, PrismAxisStr2 = {VT_BSTR} "
				"WHERE ID = @nLeftRxDetailID", 
				dSphere, dDistPD,
				varCylinder, varAxis, varAddition, varPrism, 
				varSecdPrism, varBaseVal, varBaseStr, varNearPD, varHeight, varBaseVal2, varBaseStr2);
		}
		batch.Add("UPDATE LensRxT SET LeftLensDetailRxID = @nLeftRxDetailID WHERE ID = @nLensRxID");

		//Left Lens, Other Info
		//TES 5/25/2011 - PLID 43737 - Contact lenses don't store to GlassesOrderOtherInfoT
		if(m_vwot == vwotSpectacleLens) {
			//Lens Design
			_variant_t varLensDesignID = g_cvarNull;
			CString strDesignName;
			pRow = m_pLensDesignL->CurSel;
			
			if(pRow)   {
				//(s.dhole 2012-02-08 17:18) - PLID 48033 design code = -1  is not valid 
				if (VarLong(  pRow->GetValue(ldcID),-1) !=-1 )
					varLensDesignID = pRow->GetValue(ldcID);
				strDesignName = VarString(pRow->GetValue(ldcName));
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strDesignName != m_strSavedDesignNameL) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDesignL, m_nOrderID, m_strSavedDesignNameL, strDesignName, aepMedium);
			}
			m_strSavedDesignNameL = strDesignName;

			//Lens Material
			_variant_t varLensMaterialID = g_cvarNull;
			CString strMaterialName;
			pRow = m_pLensMaterialL->CurSel;
			if(pRow )  {
				// (s.dhole 2012-02-20 17:54) - PLID 47979 material is optional  
				if (VarLong(  pRow->GetValue(lmcID) )!=-1)
					varLensMaterialID = pRow->GetValue(lmcID);
				strMaterialName = VarString(pRow->GetValue(lmcName));
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strMaterialName != m_strSavedMaterialNameL) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderMaterialL, m_nOrderID, m_strSavedMaterialNameL, strMaterialName, aepMedium);
			}
			m_strSavedMaterialNameL = strMaterialName;

			//Treatment Comments
			_variant_t varTreatmentComments = g_cvarNull;
			CString strTreatmentComments;
			GetDlgItemText(IDC_TREATMENT_COMMENTS_L, strTreatmentComments);
			if(!strTreatmentComments.IsEmpty()) {
				varTreatmentComments = _bstr_t(strTreatmentComments);
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strTreatmentComments != m_strSavedTreatmentCommentsL) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderTreatmentNotesL, m_nOrderID, m_strSavedTreatmentCommentsL, strTreatmentComments, aepMedium);
			}
			m_strSavedTreatmentCommentsL = strTreatmentComments;

			//Thickness Type
			CString strThicknessType;
			_variant_t varThicknessType = g_cvarNull;
			pRow = m_pThicknessType->CurSel;
			if(pRow) {
				// (s.dhole 2012-03-01 08:55) - PLID 47979  thickness can be optional
				if  (VarString(pRow->GetValue(ttcCode) )!="")
					varThicknessType = pRow->GetValue(ttcCode);
				strThicknessType = VarString(pRow->GetValue(ttcName));
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strThicknessType != m_strSavedThicknessType) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderThicknessType, m_nOrderID, m_strSavedThicknessType, strThicknessType, aepMedium);
			}
			m_strSavedThicknessType = strThicknessType;

			//Thickness
			_variant_t varThickness = g_cvarNull;
			CString strThickness;
			GetDlgItemText(IDC_THICKNESS_L, strThickness);
			if(!strThickness.IsEmpty()) {
				varThickness = atof(strThickness);
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			CString strSavedThickness;
			if(m_dSavedThicknessL != INVALID_RX_VALUE) {
				strSavedThickness = AsPrescriptionNumber(AsString(m_dSavedThicknessL), pnfNaturalFloat);
			}
			if(!bIsNewOrder && strSavedThickness != strThickness) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderThicknessL, m_nOrderID, strSavedThickness, strThickness, aepMedium);
			}
			if(strThickness.IsEmpty()) {
				m_dSavedThicknessL = INVALID_RX_VALUE;
			}
			else {
				m_dSavedThicknessL = atof(strThickness);
			}
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			if(m_nLeftLensOtherInfoID == -1) {
				batch.Add("INSERT INTO GlassesOrderOtherInfoT "
					"(ThicknessValue, ThicknessType, TreatmentsComment, "
					"GlassesCatalogDesignsID, GlassesCatalogMaterialsID) "
					"VALUES ({VT_R8}, {VT_BSTR}, {VT_BSTR}, "
					"{VT_I4}, {VT_I4}) \r\n"
					"SELECT @nLeftLensOtherInfoID = CONVERT(int, SCOPE_IDENTITY())",
					varThickness, varThicknessType, varTreatmentComments,
					varLensDesignID, varLensMaterialID);
			}
			else {
				// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
				batch.Add("SELECT @nLeftLensOtherInfoID = {INT}", m_nLeftLensOtherInfoID);
				batch.Add("UPDATE GlassesOrderOtherInfoT "
					"SET ThicknessValue = {VT_R8}, ThicknessType = {VT_BSTR}, TreatmentsComment = {VT_BSTR}, "
					"GlassesCatalogDesignsID = {VT_I4}, GlassesCatalogMaterialsID = {VT_I4} "
					"WHERE ID = @nLeftLensOtherInfoID", 
					varThickness, varThicknessType, varTreatmentComments,
					varLensDesignID, varLensMaterialID);
			}
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			batch.Add("UPDATE GlassesOrderT SET LeftGlassesOrderOtherInfoID = @nLeftLensOtherInfoID WHERE ID = @nOrderID");

			//Now the treatments.
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			batch.Add("DELETE FROM GlassesOrderTreatmentsT WHERE GlassesOrderOtherInfoID = @nLeftLensOtherInfoID");
			//TES 5/22/2011 - PLID 43790 - Changed the treatment arrays to be structus
			for(int i = 0; i < m_arLeftLensTreatments.GetSize(); i++) {
				batch.Add("INSERT INTO GlassesOrderTreatmentsT (GlassesOrderOtherInfoID, GlassesCatalogTreatmentID) "
					"VALUES (@nLeftLensOtherInfoID, {INT})\r\n", m_arLeftLensTreatments[i].nTreatmentID);
			}

			//TES 11/29/2010 - PLID 40864 - Audit
			CString strTreatments;
			if(m_arLeftLensTreatments.GetSize() == 1) {
				IRowSettingsPtr pRow = m_pLensTreatmentsL->CurSel;
				if(pRow) {
					strTreatments = VarString(pRow->GetValue(ltcName));
				}
			}
			else if(m_arLeftLensTreatments.GetSize() > 1) {
				strTreatments = m_nxlTreatmentsL.GetText();
			}
			if(!bIsNewOrder && strTreatments != m_strSavedTreatmentsL) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderTreatmentsL, m_nOrderID, m_strSavedTreatmentsL, strTreatments, aepMedium);
			}

			m_strSavedTreatmentsL = strTreatments;
		}
	}
	else {
		bool bDeleting = false;
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		if(m_nLeftRxDetailID != -1) {
			batch.Add("UPDATE LensRxT SET LeftLensDetailRxID = NULL WHERE ID = @nLensRxID");
			batch.Add("DELETE FROM LensDetailRxT WHERE ID = {INT}", m_nLeftRxDetailID);
			batch.Add("SELECT @nLeftRxDetailID = -1");
			bDeleting = true;
		}
		if(m_nLeftLensOtherInfoID != -1) {
			//TES 5/25/2011 - PLID 43737 - Contact lenses don't store to GlassesOrderOtherInfoT
			ASSERT(m_vwot == vwotSpectacleLens);
			batch.Add("UPDATE GlassesOrderT SET LeftGlassesOrderOtherInfoID = NULL WHERE ID = @nOrderID");
			batch.Add("DELETE FROM GlassesOrderTreatmentsT WHERE GlassesOrderOtherInfoID = {INT}", m_nLeftLensOtherInfoID);
			batch.Add("DELETE FROM GlassesOrderOtherInfoT WHERE ID = {INT}", m_nLeftLensOtherInfoID);
			batch.Add("SELECT @nLeftLensOtherInfoID = -1");
			bDeleting = true;
		}
		if(bDeleting) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderLensRemoved, m_nOrderID, "OS Lens", "<Removed>", aepMedium);
		}
	}

	// (s.dhole 2012-04-09 12:14) - PLID 43785
	batch.Declare("DECLARE @nGlassesOrderServiceT INT");
	batch.Declare("DECLARE @nRightRxDetailID INT");
	batch.Declare("DECLARE @nRightLensOtherInfoID INT");
	if(bSaveRightLens) {
		//Sphere
		CString strSphere;
		GetDlgItemText(IDC_SPHERE_R, strSphere);
		double dSphere = atof(strSphere);
		//TES 11/24/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && dSphere != m_dSavedSphereR) {
			CString strOldValue;
			if(m_dSavedSphereR != INVALID_RX_VALUE) {
				strOldValue = AsPrescriptionNumber(AsString(m_dSavedSphereR),pnfSignedFloat);
			}
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderSphereR, m_nOrderID, strOldValue, strSphere, aepMedium);
		}
		m_dSavedSphereR = dSphere;

		//Dist. PD
		CString strDistPD;
		GetDlgItemText(IDC_DIST_PD_R, strDistPD);
		double dDistPD = atof(strDistPD);
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && dDistPD != m_dSavedDistPdR) {
			CString strOldDistPD;
			if(m_dSavedDistPdR != INVALID_RX_VALUE) {
				strOldDistPD = AsPrescriptionNumber(AsString(m_dSavedDistPdR),pnfNaturalFloat);
			}
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDistPdR, m_nOrderID, strOldDistPD, strDistPD, aepMedium);
		}
		m_dSavedDistPdR = dDistPD;

		//Cylinder
		CString strCylinder;
		GetDlgItemText(IDC_CYLINDER_R, strCylinder);
		_variant_t varCylinder = g_cvarNull;
		if(!strCylinder.IsEmpty()) {
			varCylinder = atof(strCylinder);
		}
		//TES 11/24/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldCylinder;
			if(m_dSavedCylR != INVALID_RX_VALUE) {
				strOldCylinder = AsPrescriptionNumber(AsString(m_dSavedCylR),pnfSignedFloat);
			}
			if(strCylinder != strOldCylinder) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderCylinderR, m_nOrderID, strOldCylinder, strCylinder, aepMedium);
			}
		}
		if(strCylinder.IsEmpty()) {
			m_dSavedCylR = INVALID_RX_VALUE;
		}
		else {
			m_dSavedCylR = atof(strCylinder);
		}

		//Axis
		CString strAxis;
		GetDlgItemText(IDC_AXIS_R, strAxis);
		_variant_t varAxis = g_cvarNull;
		if(!strAxis.IsEmpty()) {
			varAxis = atof(strAxis);
		}
		//TES 11/24/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldAxis;
			if(m_nSavedAxisR != INVALID_RX_VALUE) {
				strOldAxis = AsString(m_nSavedAxisR);
			}
			if(strAxis != strOldAxis) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderAxisR, m_nOrderID, strOldAxis, strAxis, aepMedium);
			}
		}
		if(strAxis.IsEmpty()) {
			m_nSavedAxisR = INVALID_RX_VALUE;
		}
		else {
			m_nSavedAxisR = atoi(strAxis);
		}

		//Addition
		CString strAddition;
		GetDlgItemText(IDC_ADDITION_R, strAddition);
		_variant_t varAddition = g_cvarNull;
		if(!strAddition.IsEmpty()) {
			varAddition = atof(strAddition);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldAddition;
			if(m_dSavedAdditionR != INVALID_RX_VALUE) {
				strOldAddition = AsPrescriptionNumber(AsString(m_dSavedAdditionR),pnfUnsignedFloat);
			}
			if(strAddition != strOldAddition) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderAdditionR, m_nOrderID, strOldAddition, strAddition, aepMedium);
			}
		}
		if(strAddition.IsEmpty()) {
			m_dSavedAdditionR = INVALID_RX_VALUE;
		}
		else {
			m_dSavedAdditionR = atof(strAddition);
		}

		//Prism
		CString strPrism;
		GetDlgItemText(IDC_PRISM_R, strPrism);
		_variant_t varPrism = g_cvarNull;
		if(!strPrism.IsEmpty()) {
			varPrism = atof(strPrism);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldPrism;
			if(m_dSavedPrismR != INVALID_RX_VALUE) {
				strOldPrism = AsPrescriptionNumber(AsString(m_dSavedPrismR),pnfUnsignedFloat);
			}
			if(strPrism != strOldPrism) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderPrismR, m_nOrderID, strOldPrism, strPrism, aepMedium);
			}
		}
		if(strPrism.IsEmpty()) {
			m_dSavedPrismR = INVALID_RX_VALUE;
		}
		else {
			m_dSavedPrismR = atof(strPrism);
		}

		//Secondary Prism 
		// (b.spivey, October 17, 2011) - PLID 44918 - Added secondary prism and audting logic
		CString strSecdPrism; 
		GetDlgItemText(IDC_SECONDARY_PRISM_R, strSecdPrism); 
		_variant_t varSecdPrism = g_cvarNull;
		if(!strSecdPrism.IsEmpty()) {
			varSecdPrism = atof(strSecdPrism);
		}
		// (b.spivey, October 17, 2011) - PLID 44918 - Followed Tom's Prism example for Auditing. 
		if(!bIsNewOrder) {
			CString strOldSecdPrism;
			if(m_dSavedSecdPrismR != INVALID_RX_VALUE) {
				strOldSecdPrism = AsPrescriptionNumber(AsString(m_dSavedSecdPrismR), pnfUnsignedFloat);
			}
			if(strSecdPrism != strOldSecdPrism) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderSecondaryPrismR, m_nOrderID, strOldSecdPrism, strSecdPrism, aepMedium);
			}
		}
		if(strSecdPrism.IsEmpty()) {
			m_dSavedSecdPrismR = INVALID_RX_VALUE;
		}
		else {
			m_dSavedSecdPrismR = atof(strSecdPrism);
		}

		/// (s.dhole, 2011-12-07 12:29) - PLID 46883 - Validate base2 value. 
		_variant_t varBaseVal2 = g_cvarNull;
		_variant_t varBaseStr2 = g_cvarNull;
		CString strBase2;
		GetDlgItemText(IDC_SECONDARY_BASE_R, strBase2);
		// (s.dhole 2012-02-07 09:51) - PLID 48004 Accept cutom base value
		/*if(strBase2.CompareNoCase("IN") == 0 || strBase2.CompareNoCase("OUT") == 0 
			|| strBase2.CompareNoCase("UP") == 0 || strBase2.CompareNoCase("DOWN") == 0) {
				varBaseStr2 = _bstr_t(strBase2);
		}
		else if(!strBase2.IsEmpty()) {
			varBaseVal2 = atol(strBase2);
		}*/

		if(!strBase2.IsEmpty()) {
			long nTemp =  atol(strBase2);
			if  ((nTemp !=0 || strBase2.CompareNoCase("0")==0)   && (AsString(nTemp).GetLength()==strBase2.GetLength()) )		{
				varBaseVal2 = atol(strBase2);
			}
			else if (strBase2.GetLength()>0) {
				varBaseStr2 = _bstr_t(strBase2);
			}
		}
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - audit base2 value. 
		if(!bIsNewOrder && strBase2 != m_strSavedBaseR2) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderBaseR2, m_nOrderID, m_strSavedBaseR2, strBase2, aepMedium);
		}
		m_strSavedBaseL2 = strBase2;


		//Base
		_variant_t varBaseVal = g_cvarNull;
		_variant_t varBaseStr = g_cvarNull;
		CString strBase;
		GetDlgItemText(IDC_BASE_R, strBase);
		// (s.dhole 2012-02-07 09:51) - PLID 48004 Accept cutom base value
		/*if(strBase.CompareNoCase("IN") == 0 || strBase.CompareNoCase("OUT") == 0 
			|| strBase.CompareNoCase("UP") == 0 || strBase.CompareNoCase("DOWN") == 0) {
				varBaseStr = _bstr_t(strBase);
		}
		else if(!strBase.IsEmpty()) {
			varBaseVal = atol(strBase);
		}*/
		if(!strBase.IsEmpty()) {
			long nTemp =  atol(strBase);
			if  ((nTemp !=0 || strBase.CompareNoCase("0")==0 ) && (AsString(nTemp).GetLength() ==strBase.GetLength()))		
			{
				varBaseVal = atol(strBase);
			}
			else if (strBase.GetLength()>0) {
				varBaseStr = _bstr_t(strBase);
			}
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder && strBase != m_strSavedBaseR) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderBaseR, m_nOrderID, m_strSavedBaseR, strBase, aepMedium);
		}
		m_strSavedBaseR = strBase;

		//Near PD
		_variant_t varNearPD = g_cvarNull;
		CString strNearPD;
		GetDlgItemText(IDC_NEAR_PD_R, strNearPD);
		if(!strNearPD.IsEmpty()) {
			varNearPD = atof(strNearPD);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldNearPD;
			if(m_dSavedNearPdR != INVALID_RX_VALUE) {
				strOldNearPD = AsPrescriptionNumber(AsString(m_dSavedNearPdR), pnfNaturalFloat);
			}
			if(strNearPD != strOldNearPD) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderNearPdR, m_nOrderID, strOldNearPD, strNearPD, aepMedium);
			}
		}
		if(strNearPD.IsEmpty()) {
			m_dSavedNearPdR = INVALID_RX_VALUE;
		}
		else {
			m_dSavedNearPdR = atof(strNearPD);
		}

		//Height
		_variant_t varHeight = g_cvarNull;
		CString strHeight;
		GetDlgItemText(IDC_HEIGHT_R, strHeight);
		if(!strHeight.IsEmpty()) {
			varHeight = atof(strHeight);
		}
		//TES 11/29/2010 - PLID 40864 - Audit
		if(!bIsNewOrder) {
			CString strOldHeight;
			if(m_dSavedHeightR != INVALID_RX_VALUE) {
				strOldHeight = AsPrescriptionNumber(AsString(m_dSavedHeightR), pnfNaturalFloat);
			}
			if(strHeight != strOldHeight) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderHeightR, m_nOrderID, strOldHeight, strHeight, aepMedium);
			}
		}
		if(strHeight.IsEmpty()) {
			m_dSavedHeightR = INVALID_RX_VALUE;
		}
		else {
			m_dSavedHeightR = atof(strHeight);
		}
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		batch.Add("UPDATE GlassesOrderT SET LensRxID = @nLensRxID WHERE ID = @nOrderID");

		// (s.dhole, 2011-12-07 12:29) - PLID 46883 - added  PrismAxis2, PrismAxisStr2  ot insert and update sql
		// (b.spivey, October 17, 2011) - PLID 44918 - Added SecondaryPrismValue to the insert queries. 
		if(m_nRightRxDetailID == -1) {
			batch.Add("INSERT INTO LensDetailRxT "
				"(PrescriptionSphere, FarHalfPd, CylinderValue, CylinderAxis, AdditionValue, PrismValue, "
				"SecondaryPrismValue, PrismAxis, PrismAxisStr, NearHalfPd, SegHeight, PrismAxis2, PrismAxisStr2) "
				"VALUES ({DOUBLE}, {DOUBLE}, {VT_R8}, {VT_R8}, {VT_R8}, {VT_R8}, "
				"{VT_R8}, {VT_I4}, {VT_BSTR}, {VT_R8}, {VT_R8},{VT_I4}, {VT_BSTR}) \r\n"
				"SELECT @nRightRxDetailID = CONVERT(int, SCOPE_IDENTITY())",
				dSphere, dDistPD, varCylinder, varAxis, varAddition, varPrism, 
				varSecdPrism, varBaseVal, varBaseStr, varNearPD, varHeight, varBaseVal2, varBaseStr2);
		}
		else {
			batch.Add("SELECT @nRightRxDetailID = {INT}", m_nRightRxDetailID);
			batch.Add("UPDATE LensDetailRxT SET PrescriptionSphere = {DOUBLE}, FarHalfPd = {DOUBLE}, "
				"CylinderValue = {VT_R8}, CylinderAxis = {VT_R8}, AdditionValue = {VT_R8}, PrismValue = {VT_R8}, "
				"SecondaryPrismValue = {VT_R8}, PrismAxis = {VT_I4}, PrismAxisStr = {VT_BSTR}, NearHalfPd = {VT_R8}, SegHeight = {VT_R8}, "
				"PrismAxis2 = {VT_I4}, PrismAxisStr2 = {VT_BSTR} "
				"WHERE ID = @nRightRxDetailID", 
				dSphere, dDistPD,
				varCylinder, varAxis, varAddition, varPrism, 
				varSecdPrism, varBaseVal, varBaseStr, varNearPD, varHeight, varBaseVal2, varBaseStr2);
		}
		batch.Add("UPDATE LensRxT SET RightLensDetailRxID = @nRightRxDetailID WHERE ID = @nLensRxID");

		//Right Lens, Other Info
		//TES 5/25/2011 - PLID 43737 - Contact lenses don't store to GlassesOrderOtherInfoT
		if(m_vwot == vwotSpectacleLens) {
			//Lens Design
			_variant_t varLensDesignID = g_cvarNull;
			CString strDesignName;
			pRow = m_pLensDesignR->CurSel;
			//(s.dhole 2012-02-08 17:18) - PLID 48033 design code = -1  is not valid
			if(pRow) {
				if (VarLong(  pRow->GetValue(ldcID),-1) !=-1 )
					varLensDesignID = pRow->GetValue(ldcID);
				strDesignName = VarString(pRow->GetValue(ldcName));
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strDesignName != m_strSavedDesignNameR) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderDesignR, m_nOrderID, m_strSavedDesignNameR, strDesignName, aepMedium);
			}
			m_strSavedDesignNameR = strDesignName;

			//Lens Material
			_variant_t varLensMaterialID = g_cvarNull;
			CString strMaterialName;
			pRow = m_pLensMaterialR->CurSel;
			if(pRow ) {
				// (s.dhole 2012-02-20 17:54) - PLID 47979 material is optional  
				if  (VarLong(  pRow->GetValue(lmcID) )!=-1)
					varLensMaterialID = pRow->GetValue(lmcID);
				strMaterialName = VarString(pRow->GetValue(lmcName));
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strMaterialName != m_strSavedMaterialNameR) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderMaterialR, m_nOrderID, m_strSavedMaterialNameR, strMaterialName, aepMedium);
			}
			m_strSavedMaterialNameR = strMaterialName;

			//Treatment Comments
			_variant_t varTreatmentComments = g_cvarNull;
			CString strTreatmentComments;
			GetDlgItemText(IDC_TREATMENT_COMMENTS_R, strTreatmentComments);
			if(!strTreatmentComments.IsEmpty()) {
				varTreatmentComments = _bstr_t(strTreatmentComments);
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			if(!bIsNewOrder && strTreatmentComments != m_strSavedTreatmentCommentsR) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderTreatmentNotesR, m_nOrderID, m_strSavedTreatmentCommentsR, strTreatmentComments, aepMedium);
			}
			m_strSavedTreatmentCommentsR = strTreatmentComments;

			//Thickness Type
			CString strThicknessType;
			_variant_t varThicknessType = g_cvarNull;
			pRow = m_pThicknessType->CurSel;
			if(pRow  ) {
				// (s.dhole 2012-03-01 08:55) - PLID 47979  thickness can be optional
				if  (VarString(pRow->GetValue(ttcCode) )!="")
					varThicknessType = pRow->GetValue(ttcCode);
				strThicknessType = VarString(pRow->GetValue(ttcName));
			}
			//TES 11/29/2010 - PLID 40864 - Audit (only if we didn't already audit for the left lens)
			if(!bSaveLeftLens && !bIsNewOrder && strThicknessType != m_strSavedThicknessType) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderThicknessType, m_nOrderID, m_strSavedThicknessType, strThicknessType, aepMedium);
			}
			m_strSavedThicknessType = strThicknessType;

			//Thickness
			_variant_t varThickness = g_cvarNull;
			CString strThickness;
			GetDlgItemText(IDC_THICKNESS_R, strThickness);
			if(!strThickness.IsEmpty()) {
				varThickness = atof(strThickness);
			}
			//TES 11/29/2010 - PLID 40864 - Audit
			CString strSavedThickness = "";
			if(m_dSavedThicknessR != INVALID_RX_VALUE) {
				strSavedThickness = AsPrescriptionNumber(AsString(m_dSavedThicknessR), pnfNaturalFloat);
			}
			if(!bIsNewOrder && strSavedThickness != strThickness) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderThicknessR, m_nOrderID, strSavedThickness, strThickness, aepMedium);
			}
			if(strThickness.IsEmpty()) {
				m_dSavedThicknessL = INVALID_RX_VALUE;
			}
			else {
				m_dSavedThicknessR = atof(strThickness);
			}

			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			if(m_nRightLensOtherInfoID == -1) {
				batch.Add("INSERT INTO GlassesOrderOtherInfoT "
					"(ThicknessValue, ThicknessType, TreatmentsComment, "
					"GlassesCatalogDesignsID, GlassesCatalogMaterialsID) "
					"VALUES ({VT_R8}, {VT_BSTR}, {VT_BSTR}, "
					"{VT_I4}, {VT_I4}) \r\n"
					"SELECT @nRightLensOtherInfoID = CONVERT(int, SCOPE_IDENTITY())",
					varThickness, varThicknessType, varTreatmentComments,
					varLensDesignID, varLensMaterialID);
			}
			else {
				batch.Add("SELECT @nRightLensOtherInfoID = {INT}", m_nRightLensOtherInfoID);
				batch.Add("UPDATE GlassesOrderOtherInfoT "
					"SET ThicknessValue = {VT_R8}, ThicknessType = {VT_BSTR}, TreatmentsComment = {VT_BSTR}, "
					"GlassesCatalogDesignsID = {VT_I4}, GlassesCatalogMaterialsID = {VT_I4} "
					"WHERE ID = @nRightLensOtherInfoID", 
					varThickness, varThicknessType, varTreatmentComments,
					varLensDesignID, varLensMaterialID);
			}
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			batch.Add("UPDATE GlassesOrderT SET RightGlassesOrderOtherInfoID = @nRightLensOtherInfoID WHERE ID = @nOrderID");

			//Now the treatments.
			batch.Add("DELETE FROM GlassesOrderTreatmentsT WHERE GlassesOrderOtherInfoID = @nRightLensOtherInfoID");
			//TES 5/22/2011 - PLID 43790 - Changed the treatment arrays to structs
			for(int i = 0; i < m_arRightLensTreatments.GetSize(); i++) {
				batch.Add("INSERT INTO GlassesOrderTreatmentsT (GlassesOrderOtherInfoID, GlassesCatalogTreatmentID) "
					"VALUES (@nRightLensOtherInfoID, {INT})\r\n", m_arRightLensTreatments[i].nTreatmentID);
			}

			//TES 11/29/2010 - PLID 40864 - Audit
			CString strTreatments;
			if(m_arRightLensTreatments.GetSize() == 1) {
				IRowSettingsPtr pRow = m_pLensTreatmentsR->CurSel;
				if(pRow) {
					strTreatments = VarString(pRow->GetValue(ltcName));
				}
			}
			else if(m_arRightLensTreatments.GetSize() > 1) {
				strTreatments = m_nxlTreatmentsR.GetText();
			}
			if(!bIsNewOrder && strTreatments != m_strSavedTreatmentsR) {
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderTreatmentsR, m_nOrderID, m_strSavedTreatmentsR, strTreatments, aepMedium);
			}
			m_strSavedTreatmentsR = strTreatments;
		}
	}
	else {
		bool bDeleting = false;
		if(m_nRightRxDetailID != -1) {
			batch.Add("UPDATE LensRxT SET RightLensDetailRxID = NULL WHERE ID = @nLensRxID");
			batch.Add("DELETE FROM LensDetailRxT WHERE ID = {INT}", m_nRightRxDetailID);
			batch.Add("SELECT @nRightRxDetailID = -1");
			bDeleting = true;
		}
		if(m_nRightLensOtherInfoID != -1) {
			//TES 5/25/2011 - PLID 43737 - Contact lenses don't store to GlassesOrderOtherInfoT
			ASSERT(m_vwot == vwotSpectacleLens);
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			batch.Add("UPDATE GlassesOrderT SET RightGlassesOrderOtherInfoID = NULL WHERE ID = @nOrderID");
			batch.Add("DELETE FROM GlassesOrderTreatmentsT WHERE GlassesOrderOtherInfoID = {INT}", m_nRightLensOtherInfoID);
			batch.Add("DELETE FROM GlassesOrderOtherInfoT WHERE ID = {INT}", m_nRightLensOtherInfoID);
			batch.Add("SELECT @nRightLensOtherInfoID = -1");
			bDeleting = true;
		}
		if(bDeleting) {
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderLensRemoved, m_nOrderID, "OD Lens", "<Removed>", aepMedium);
		}
	}

	//TES 12/8/2010 - PLID 41715 - Now save our custom parameters.
	//TES 5/25/2011 - PLID 43737 - Contact lenses don't have custom parameters
	if(m_vwot == vwotSpectacleLens) {
		// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
		EnsureParameterList();
		batch.Add("DELETE FROM GlassesOrderParameterT WHERE GlassesOrderID = @nOrderID");
		POSITION pos = m_mapParamValues.GetStartPosition();
		CString strParamID, strParamValue;
		//TES 12/8/2010 - PLID 41715 - Go through all our values.
		while(pos) {
			m_mapParamValues.GetNextAssoc(pos, strParamID, strParamValue);
			CString strParameterName;
			//TES 12/8/2010 - PLID 41715 - Only save this value if it's for one of the parameters in our list.
			bool bFound = false;
			for(int i = 0; i < m_arCustomParams.GetSize() && !bFound; i++) {
				if(m_arCustomParams[i].strID == strParamID) {
					bFound = true;
					strParameterName = m_arCustomParams[i].strName;
				}
			}
			if(bFound) {
				//TES 12/8/2010 - PLID 41715 - OK, save this value.
				// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
				batch.Add("INSERT INTO GlassesOrderParameterT (GlassesOrderID, GlassesCustomParameterID, ParameterValue) "
					"VALUES (@nOrderID, {STRING}, {STRING})", strParamID, strParamValue);
				//TES 12/8/2010 - PLID 41715 - Also, audit
				CString strOldValue;
				m_mapSavedParamValues.Lookup(strParamID, strOldValue);
				if(strParamValue != strOldValue) {
					AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderCustomParameter, m_nOrderID, 
						"Parameter: " + strParameterName + ", Value: " + strOldValue, strParamValue, aepMedium);
				}
			}
			else {
				m_mapParamValues.RemoveKey(strParamID);
			}
		}
		//TES 12/8/2010 - PLID 41715 - Now update our saved values.
		m_mapSavedParamValues.RemoveAll();
		pos = m_mapParamValues.GetStartPosition();
		while(pos) {
			m_mapParamValues.GetNextAssoc(pos, strParamID, strParamValue);
			m_mapSavedParamValues.SetAt(strParamID, strParamValue);
		}
	}

	//TES 4/12/2011 - PLID 43248 - Update the services
	//TES 4/22/2011 - PLID 43389 - Audit
	if(!bIsNewOrder) {
		//TES 4/22/2011 - PLID 43389 - New and edited items
		for(int iCount=0 ;  iCount< m_arLenseServiceInfo.GetSize(); iCount++  )
				{
		/*IRowSettingsPtr pServiceRow = m_pServices->GetFirstRow();
		while(pServiceRow) {*/
			_variant_t varSavedPrice = m_arLenseServiceInfo[iCount].SavedPrice ;
			//if(varSavedPrice.vt == VT_NULL) {
			
			if(m_arLenseServiceInfo[iCount].nID  ==-1 && m_arLenseServiceInfo[iCount].bIsDelete == FALSE)  {
				//TES 4/22/2011 - PLID 43389 - New service
				CString strDescription =  m_arLenseServiceInfo[iCount].strCode ;
				if(!strDescription.IsEmpty()) {
					strDescription += " - ";
				}
				strDescription += m_arLenseServiceInfo[iCount].strDescription ;
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderServiceAdded, m_nOrderID,
					"", strDescription, aepMedium);
				//TES 6/29/2011 - PLID 44192 - Save to data
				//TES 6/29/2011 - PLID 44381 - Added Type
				// (s.dhole 2012-03-12 12:57) - PLID 48821
				_variant_t  varDesignID = g_cvarNull;
				if (m_arLenseServiceInfo[iCount].nDesignID  > -1){
					varDesignID = variant_t( m_arLenseServiceInfo[iCount].nDesignID) ;
				}
				_variant_t   varMaterialID= g_cvarNull;
				if (m_arLenseServiceInfo[iCount].nMaterialID > -1){
					varMaterialID = variant_t(m_arLenseServiceInfo[iCount].nMaterialID ) ;
				}
				// (s.dhole 2012-03-15 16:02) - PLID 48826
				_variant_t   varTreatmentID= g_cvarNull;
				if (m_arLenseServiceInfo[iCount].nTreatmentID  > -1){
					varTreatmentID = variant_t(m_arLenseServiceInfo[iCount].nTreatmentID ) ;
				}
				// (s.dhole 2012-03-12 12:57) - PLID 48821	
				_variant_t  varbISOD = g_cvarNull;
				if (m_arLenseServiceInfo[iCount].bIsOD != FALSE ){
					varbISOD = g_cvarTrue;
				}
				else{
					varbISOD = g_cvarFalse;
				}
			// (s.dhole 2012-03-12 12:57) - PLID 48821
				_variant_t  varbISOS = g_cvarNull;
				if (m_arLenseServiceInfo[iCount].bIsOS != FALSE ){
					varbISOS = g_cvarTrue;
				}
				else{
					varbISOS = g_cvarFalse;
				}
				_variant_t  varbIsDefault= g_cvarNull;
				if ((BOOL)m_arLenseServiceInfo[iCount].bIsDefault  !=FALSE){
					varbIsDefault = g_cvarTrue;
				}
				else{
					varbIsDefault = g_cvarFalse;
				}
			
				_variant_t  varbIsOffTheShelf= g_cvarNull;
				if ((BOOL)m_arLenseServiceInfo[iCount].bIsOffTheShelf  !=FALSE){
					varbIsOffTheShelf = g_cvarTrue;
				}
				else{
					varbIsOffTheShelf = g_cvarFalse;
				}

				// (j.dinatale 2013-04-09 09:45) - PLID 56083 - need to save Bill per Lens to data
				BOOL bBillPerLens = FALSE;
				if (m_arLenseServiceInfo[iCount].bIsDefault)  {
					if (m_arLenseServiceInfo[iCount].nDesignID > 0) {
						bBillPerLens = m_arLenseServiceInfo[iCount].bDesignBillPerLens;
					}
					else if (m_arLenseServiceInfo[iCount].nMaterialID > 0) {
						bBillPerLens = m_arLenseServiceInfo[iCount].bMaterialBillPerLens;
					}
					else if (m_arLenseServiceInfo[iCount].nTreatmentID > 0){
						bBillPerLens = m_arLenseServiceInfo[iCount].bTreatmentBillPerLens;
					}
				}

					// (s.dhole 2012-03-12 12:57) - PLID 48821 Save design code and material code
				// (s.dhole 2012-05-01 16:02) - PLID 48926
				batch.Add("INSERT INTO GlassesOrderServiceT (GlassesOrderID, ServiceID, Price, Quantity, Type, "
					" OpticalLineItemCost,GlassesCatalogDesignsID,GlassesCatalogMaterialsID,GlassesCatalogTreatmentsID, "
					" bODEye,bOSEye ,IsDefaultProduct,IsOffTheShelf, PatientRespAmt, VisionRespAmt, BillPerLens) "
					" VALUES (@nOrderID, {VT_I4}, {VT_CY}, {VT_R8}, {VT_I4},{VT_CY},{VT_I4},{VT_I4},{VT_I4},{VT_BOOL},{VT_BOOL}, "
					" {VT_BOOL},{VT_BOOL},{VT_CY},{VT_CY}, {BOOL})", 
					variant_t(  m_arLenseServiceInfo[iCount].nServiceID) , variant_t(  m_arLenseServiceInfo[iCount].Price) 
					,variant_t(  m_arLenseServiceInfo[iCount].nQty) ,variant_t  (m_arLenseServiceInfo[iCount].nType)  
					, variant_t (m_arLenseServiceInfo[iCount].Cost)  ,varDesignID , varMaterialID ,varTreatmentID
					, varbISOD ,varbISOS,varbIsDefault, varbIsOffTheShelf
					, variant_t (m_arLenseServiceInfo[iCount].PatientResp ) , variant_t (m_arLenseServiceInfo[iCount].VisionResp), bBillPerLens
					);
				// (s.dhole 2012-04-09 12:14) - PLID 43785
				batch.Add(  " SELECT @nGlassesOrderServiceT = CONVERT(int, SCOPE_IDENTITY())");
				CSqlFragment sqlSave;
				GlassesAuditAndGenerateSaveStringForDiscounts(nPatientID,TRUE,FALSE,strPatientName,-1,
																m_arLenseServiceInfo[iCount].DiscountList  , batch,sqlSave) ;
			}
			else if (m_arLenseServiceInfo[iCount].nID  !=-1 && m_arLenseServiceInfo[iCount].bIsDelete == FALSE)
			{
				// (s.dhole 2012-07-03 13:57) - PLID 48821 We should save od or os if there is change in Qnt, 
				//We change Qnt to default product when assign to od or os.
				if (m_arLenseServiceInfo[iCount].bIsDefault==TRUE &&
					m_arLenseServiceInfo[iCount].nSavedQty !=m_arLenseServiceInfo[iCount].nQty ){
					batch.Add("UPDATE GlassesOrderServiceT SET bODEye ={VT_BOOL},bOSEye = {VT_BOOL} WHERE ID = {INT}",
						m_arLenseServiceInfo[iCount].bIsOD != FALSE?g_cvarTrue:g_cvarFalse,
						m_arLenseServiceInfo[iCount].bIsOS != FALSE?g_cvarTrue:g_cvarFalse
						, m_arLenseServiceInfo[iCount].nID );

				}

				// (s.dhole 2012-03-12 12:57) - PLID 48821
				COleCurrency cySaved = VarCurrency(varSavedPrice);
				COleCurrency cyNew = m_arLenseServiceInfo[iCount].Price ;
				if(cySaved != cyNew) {
					//TES 4/22/2011 - PLID 43389 - Edited price
					CString strDescription = m_arLenseServiceInfo[iCount].strCode ;
					if(!strDescription.IsEmpty()) {
						strDescription += " - ";
					}
					strDescription += m_arLenseServiceInfo[iCount].strDescription ;
					AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderServicePrice, m_nOrderID,
						strDescription + " - " + FormatCurrencyForInterface(cySaved), FormatCurrencyForInterface(cyNew), aepMedium);
					//TES 6/29/2011 - PLID 44192 - Save to data
					batch.Add("UPDATE GlassesOrderServiceT SET Price = {VT_CY} WHERE ID = {INT}"
						, variant_t (m_arLenseServiceInfo[iCount].Price), m_arLenseServiceInfo[iCount].nID );
				}
			
			//TES 5/25/2011 - PLID 43837 - Quantity
				
				double dSaved = m_arLenseServiceInfo[iCount].nSavedQty ;
				double dNew = m_arLenseServiceInfo[iCount].nQty ;
				if(dSaved != dNew )  {
					//TES 5/25/2011 - PLID 43837 - Edited quantity
					CString strDescription = m_arLenseServiceInfo[iCount].strCode ;
					if(!strDescription.IsEmpty()) {
						strDescription += " - ";
					}
					strDescription += m_arLenseServiceInfo[iCount].strDescription ;
					AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderServiceQuantity, m_nOrderID,
						strDescription + " - " + AsString(m_arLenseServiceInfo[iCount].nSavedQty ), AsString(m_arLenseServiceInfo[iCount].nQty), aepMedium);
					//TES 6/29/2011 - PLID 44192 - Save to data
					batch.Add("UPDATE GlassesOrderServiceT SET Quantity = {VT_R8} WHERE ID = {VT_I4}", variant_t(m_arLenseServiceInfo[iCount].nQty )  ,variant_t( m_arLenseServiceInfo[iCount].nID ));
					// (s.dhole 2012-04-09 12:14) - PLID 43785 
				}
			
				//TES 6/29/2011 - PLID 44381 - Type
					long nSaved = m_arLenseServiceInfo[iCount].nType ;
					long nNew = m_arLenseServiceInfo[iCount].nSavedType ;
					if(nSaved != nNew) {
						CString strDescription = m_arLenseServiceInfo[iCount].strCode;
						if(!strDescription.IsEmpty()) {
							strDescription += " - ";
						}
						strDescription += m_arLenseServiceInfo[iCount].strDescription;
						AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderServiceType, m_nOrderID,
							strDescription + " - " + GetGOServiceTypeDescription((GlassesOrderServiceType)nSaved), GetGOServiceTypeDescription((GlassesOrderServiceType)nNew), aepMedium);
						batch.Add("UPDATE GlassesOrderServiceT SET Type = {INT} WHERE ID = {INT}", nNew,m_arLenseServiceInfo[iCount].nID);
					}
					// (s.dhole 2012-04-09 12:14) - PLID 47398 Save cost
					cySaved = VarCurrency(variant_t(m_arLenseServiceInfo[iCount].SavedCost ));
					cyNew = m_arLenseServiceInfo[iCount].Cost;
					if(cySaved != cyNew )  {
						CString strDescription = m_arLenseServiceInfo[iCount].strCode ;
						if(!strDescription.IsEmpty()) {
							strDescription += " - ";
						}
						strDescription += m_arLenseServiceInfo[iCount].strDescription ;
						AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesCost, m_nOrderID,
							strDescription + " - " + FormatCurrencyForInterface(m_arLenseServiceInfo[iCount].SavedCost), FormatCurrencyForInterface(m_arLenseServiceInfo[iCount].Cost), aepMedium);
						batch.Add("UPDATE GlassesOrderServiceT SET OpticalLineItemCost = {VT_CY} WHERE ID = {INT}", variant_t (m_arLenseServiceInfo[iCount].Cost),m_arLenseServiceInfo[iCount].nID);
					}
					// (s.dhole 2012-04-09 12:14) - PLID 43785
					cySaved = VarCurrency(variant_t(m_arLenseServiceInfo[iCount].SavedPatientResp  ));
					cyNew = m_arLenseServiceInfo[iCount].PatientResp ;
					if(cySaved != cyNew )  {
						CString strDescription = m_arLenseServiceInfo[iCount].strCode ;
						if(!strDescription.IsEmpty()) {
							strDescription += " - ";
						}
						strDescription += m_arLenseServiceInfo[iCount].strDescription ;
						AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesPatientResp , m_nOrderID,
							strDescription + " - " + FormatCurrencyForInterface(m_arLenseServiceInfo[iCount].SavedPatientResp), FormatCurrencyForInterface(m_arLenseServiceInfo[iCount].PatientResp), aepMedium);
						batch.Add("UPDATE GlassesOrderServiceT SET PatientRespAmt = {VT_CY} WHERE ID = {INT}", variant_t (m_arLenseServiceInfo[iCount].PatientResp),m_arLenseServiceInfo[iCount].nID);
					}
					// (s.dhole 2012-04-09 12:14) - PLID 43785
					cySaved = VarCurrency(variant_t(m_arLenseServiceInfo[iCount].VisionResp ));
					cyNew = m_arLenseServiceInfo[iCount].SavedVisionResp;
					if(cySaved != cyNew )  {
						CString strDescription = m_arLenseServiceInfo[iCount].strCode ;
						if(!strDescription.IsEmpty()) {
							strDescription += " - ";
						}
						strDescription += m_arLenseServiceInfo[iCount].strDescription ;
						AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesVisionResp , m_nOrderID,
							strDescription + " - " + FormatCurrencyForInterface(m_arLenseServiceInfo[iCount].SavedVisionResp), FormatCurrencyForInterface(m_arLenseServiceInfo[iCount].VisionResp), aepMedium);
						batch.Add("UPDATE GlassesOrderServiceT SET VisionRespAmt = {VT_CY} WHERE ID = {INT}", variant_t (m_arLenseServiceInfo[iCount].VisionResp),m_arLenseServiceInfo[iCount].nID);
					}
					// (s.dhole 2012-05-24 15:21) - PLID 48597 We hav to update this record so we can check during bill.
					BOOL bSaved  = m_arLenseServiceInfo[iCount].bIsOffTheShelfSaved;
					BOOL bNew = m_arLenseServiceInfo[iCount].bIsOffTheShelf  ;
					if(bSaved!= bNew ) {
						
						_variant_t  varbIsOffTheShelf = g_cvarNull;
						if ((BOOL)m_arLenseServiceInfo[iCount].bIsOffTheShelf  != FALSE ){
							varbIsOffTheShelf = g_cvarTrue;
						}
						else{
							varbIsOffTheShelf = g_cvarFalse;
						}
						batch.Add("UPDATE GlassesOrderServiceT SET  IsOffTheShelf = {VT_BOOL} WHERE ID = {INT}",
							varbIsOffTheShelf, m_arLenseServiceInfo[iCount].nID );
					}

					// (j.dinatale 2013-04-09 09:45) - PLID 56083 - need to save Bill per Lens to data, always update it
					BOOL bBillPerLens = FALSE;
					if (m_arLenseServiceInfo[iCount].bIsDefault)  {
						if (m_arLenseServiceInfo[iCount].nDesignID > 0) {
							bBillPerLens = m_arLenseServiceInfo[iCount].bDesignBillPerLens;
						}
						else if (m_arLenseServiceInfo[iCount].nMaterialID > 0) {
							bBillPerLens = m_arLenseServiceInfo[iCount].bMaterialBillPerLens;
						}
						else if (m_arLenseServiceInfo[iCount].nTreatmentID > 0){
							bBillPerLens = m_arLenseServiceInfo[iCount].bTreatmentBillPerLens;
						}
					}
					batch.Add("UPDATE GlassesOrderServiceT SET BillPerLens = {BOOL} WHERE ID = {INT} ", bBillPerLens, m_arLenseServiceInfo[iCount].nID );
					
					batch.Add(  " SET @nGlassesOrderServiceT = {INT}",  m_arLenseServiceInfo[iCount].nID);
					CSqlFragment sqlSave;
					GlassesAuditAndGenerateSaveStringForDiscounts(nPatientID,FALSE,FALSE,strPatientName, m_arLenseServiceInfo[iCount].nID ,
					m_arLenseServiceInfo[iCount].DiscountList  , batch,sqlSave) 	;
				
			}
			else if (m_arLenseServiceInfo[iCount].nID  !=-1 && m_arLenseServiceInfo[iCount].bIsDelete !=FALSE){
				CString strDescription = m_arLenseServiceInfo[iCount].strCode;
				if(!strDescription.IsEmpty()) {
					strDescription += " - ";
				}
				strDescription += m_arLenseServiceInfo[iCount].strDescription;
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderServiceRemoved, m_nOrderID,
				strDescription, "<Deleted>", aepMedium);
				// (s.dhole 2012-04-09 12:14) - PLID 43785
				batch.Add("DELETE FROM GlassesOrderServiceDiscountsT WHERE GlassesOrderServiceID = {INT}", m_arLenseServiceInfo[iCount].nID );
				//TES 6/29/2011 - PLID 44192 - Unlink to charges
				batch.Add("UPDATE ChargesT SET GlassesOrderServiceID = NULL WHERE GlassesOrderServiceID = {INT}", m_arLenseServiceInfo[iCount].nID );
				//TES 6/29/2011 - PLID 44192 - Save to data
				batch.Add("DELETE FROM GlassesOrderServiceT WHERE ID = {INT}", m_arLenseServiceInfo[iCount].nID );
			}
		}
	}
	else {
		for(int iCount=0 ;  iCount< m_arLenseServiceInfo.GetSize(); iCount++  )	{
			_variant_t varSavedPrice = m_arLenseServiceInfo[iCount].SavedPrice ;
			//if(varSavedPrice.vt == VT_NULL) {
			if(m_arLenseServiceInfo[iCount].nID  ==-1 && m_arLenseServiceInfo[iCount].bIsDelete == FALSE)  {
				//TES 4/22/2011 - PLID 43389 - New service
				CString strDescription =  m_arLenseServiceInfo[iCount].strCode ;
				if(!strDescription.IsEmpty()) {
					strDescription += " - ";
				}
				strDescription += m_arLenseServiceInfo[iCount].strDescription ;
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiGlassesOrderServiceAdded, m_nOrderID,
					"", strDescription, aepMedium);
				//TES 6/29/2011 - PLID 44192 - Save to data
				//TES 6/29/2011 - PLID 44381 - Added Type
				// (s.dhole 2012-03-12 12:57) - PLID 48821
				_variant_t  varDesignID = g_cvarNull;
				if (m_arLenseServiceInfo[iCount].nDesignID  > -1){
					varDesignID = variant_t( m_arLenseServiceInfo[iCount].nDesignID) ;
				}
				_variant_t   varMaterialID= g_cvarNull;
				if (m_arLenseServiceInfo[iCount].nMaterialID  > -1){
					varMaterialID = variant_t(m_arLenseServiceInfo[iCount].nMaterialID ) ;
				}
				// (s.dhole 2012-03-15 16:02) - PLID 48826
				_variant_t   varTreatmentID= g_cvarNull;
				if (m_arLenseServiceInfo[iCount].nTreatmentID  > -1){
					varTreatmentID = variant_t(m_arLenseServiceInfo[iCount].nTreatmentID ) ;
				}
				// (s.dhole 2012-03-12 12:57) - PLID 48821	
				_variant_t  varbISOD = g_cvarNull;
				if (m_arLenseServiceInfo[iCount].bIsOD != FALSE ){
					varbISOD = g_cvarTrue;
				}
				else{
					varbISOD = g_cvarFalse;
				}
			// (s.dhole 2012-03-12 12:57) - PLID 48821
				_variant_t  varbISOS = g_cvarNull;
				if (m_arLenseServiceInfo[iCount].bIsOS != FALSE ){
					varbISOS = g_cvarTrue;
				}
				else{
					varbISOS = g_cvarFalse;
				}
				_variant_t  varbIsDefault= g_cvarNull;
				if (m_arLenseServiceInfo[iCount].bIsDefault  !=FALSE){
					varbIsDefault = g_cvarTrue;
				}
				else{
					varbIsDefault = g_cvarFalse;
				}
			
				_variant_t  varbIsOffTheShelf= g_cvarNull;
				if (m_arLenseServiceInfo[iCount].bIsOffTheShelf  !=FALSE){
					varbIsOffTheShelf = g_cvarTrue;
				}
				else{
					varbIsOffTheShelf = g_cvarFalse;
				}

				// (j.dinatale 2013-04-09 09:45) - PLID 56083 - need to save Bill per Lens to data
				BOOL bBillPerLens = FALSE;
				if (m_arLenseServiceInfo[iCount].bIsDefault)  {
					if (m_arLenseServiceInfo[iCount].nDesignID > 0) {
						bBillPerLens = m_arLenseServiceInfo[iCount].bDesignBillPerLens;
					}
					else if (m_arLenseServiceInfo[iCount].nMaterialID > 0) {
						bBillPerLens = m_arLenseServiceInfo[iCount].bMaterialBillPerLens;
					}
					else if (m_arLenseServiceInfo[iCount].nTreatmentID > 0){
						bBillPerLens = m_arLenseServiceInfo[iCount].bTreatmentBillPerLens;
					}
				}

				// (s.dhole 2012-04-24 10:25) - PLID 48821 Save material and design service code changes
				// (s.dhole 2012-03-12 12:57) - PLID 48821 Save Data
				// (s.dhole 2012-04-24 09:29) - PLID 47398 save Cost
				batch.Add("INSERT INTO GlassesOrderServiceT (GlassesOrderID, ServiceID, Price, Quantity, Type, "
					" OpticalLineItemCost,GlassesCatalogDesignsID,GlassesCatalogMaterialsID,"
					" GlassesCatalogTreatmentsID,bODEye,bOSEye ,IsDefaultProduct,IsOffTheShelf,PatientRespAmt,VisionRespAmt, BillPerLens) "
					" VALUES (@nOrderID, {VT_I4}, {VT_CY}, {VT_R8}, {VT_I4},{VT_CY},{VT_I4},{VT_I4},{VT_I4},{VT_BOOL},{VT_BOOL}, "
					" {VT_BOOL},{VT_BOOL}, {VT_CY}, {VT_CY}, {BOOL})", 
					variant_t(  m_arLenseServiceInfo[iCount].nServiceID) , variant_t(  m_arLenseServiceInfo[iCount].Price) 
					,variant_t(  m_arLenseServiceInfo[iCount].nQty) ,variant_t  (m_arLenseServiceInfo[iCount].nType)  
					, variant_t (m_arLenseServiceInfo[iCount].Cost)  ,varDesignID , varMaterialID ,varTreatmentID
					, varbISOD ,varbISOS,varbIsDefault, varbIsOffTheShelf ,
					variant_t(  m_arLenseServiceInfo[iCount].PatientResp ),variant_t(  m_arLenseServiceInfo[iCount].VisionResp), bBillPerLens
					);
				// (s.dhole 2012-04-09 12:14) - PLID 43785
				batch.Add(  " SELECT @nGlassesOrderServiceT = CONVERT(int, SCOPE_IDENTITY())");
				CSqlFragment sqlSave;
				GlassesAuditAndGenerateSaveStringForDiscounts(nPatientID,TRUE,FALSE,strPatientName,-1,
																m_arLenseServiceInfo[iCount].DiscountList  , batch, sqlSave);
			}
		}
	}
	



	batch.Declare("SET NOCOUNT OFF");
	//TES 5/25/2011 - PLID 43737 - Added @nContactLensOrderInfoID
	batch.Add("SELECT @nOrderID AS OrderID, @nLensRxID AS LensRxID, "
		"@nLeftRxDetailID AS LeftRxDetailID, @nLeftLensOtherInfoID AS LeftLensOtherInfoID, "
		"@nRightRxDetailID AS RightRxDetailID, @nRightLensOtherInfoID AS RightLensOtherInfoID "		);

	_RecordsetPtr rsIDs = batch.CreateRecordset(GetRemoteData());
	m_nOrderID = AdoFldLong(rsIDs, "OrderID");
	m_nLensRxID = AdoFldLong(rsIDs, "LensRxID", -1);
	m_nLeftRxDetailID = AdoFldLong(rsIDs, "LeftRxDetailID", -1);
	m_nLeftLensOtherInfoID = AdoFldLong(rsIDs, "LeftLensOtherInfoID", -1);
	m_nRightRxDetailID = AdoFldLong(rsIDs, "RightRxDetailID", -1);
	m_nRightLensOtherInfoID = AdoFldLong(rsIDs, "RightLensOtherInfoID", -1);
	
	
	//TES 11/24/2010 - PLID 40864 - Commit our audits
	CommitAuditTransaction(nAuditTransactionID);
	LoadServiceList();
}

void CVisionWebOrderDlg::OnCatalogSetup()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This button's hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);
		// (s.dhole 2010-11-12 13:22) - PLID 
		//Launch the dialog
		IRowSettingsPtr pRow = m_pSupplier->CurSel;
		long nSupplierID = -1;
		CString strSuplierNM; 
		if(pRow) {
			nSupplierID = VarLong(pRow->GetValue(scID));
			strSuplierNM= VarString (pRow->GetValue(scName));
		}

		CInvGlassesCatalogSetupDlg dlg(this);

		// (j.dinatale 2013-04-03 15:00) - PLID 56072 - dont restrict opening up the configuration dialog if a supplier is not set. 
		//		Removed the prompt that was here before.
		if (nSupplierID >0) {
			dlg.m_nSupplierID =nSupplierID;
		}
		//dlg.m_strSupplier =strSuplierNM;
		//TES 5/22/2011 - PLID 43790 - Converted the treatment arrays to structs
		for(int i = 0; i < m_arLeftLensTreatments.GetSize(); i++) {
			dlg.m_dwaCurrentOrderTreatments.Add(m_arLeftLensTreatments[i].nTreatmentID);
		}
		for(i = 0; i < m_arRightLensTreatments.GetSize(); i++) {
			dlg.m_dwaCurrentOrderTreatments.Add(m_arRightLensTreatments[i].nTreatmentID);
		}
		dlg.DoModal();

		//r.wilson 2/22/2012 - PLID 43773
		nSupplierID = dlg.m_nSupplierID;

		//Now refresh all the lists that are supplier-specific.
		RefreshCatalogLists();
		RefreshDesignLists();

		//r.wilson 2012-20-2 PLID 43773 -> Refresh the Supplier datalist
		UpdateSupplierDataList();
		IRowSettingsPtr pNewRow = m_pSupplier->GetNewRow();
		pNewRow->PutValue(scID, -1);
		pNewRow->PutValue(scName, _bstr_t(" <None> "));
		pNewRow->PutValue(scArchived, (bool)FALSE);
		m_pSupplier->AddRowBefore(pNewRow, m_pSupplier->GetFirstRow());

		// r.wilson 2012-20-2 PLID 43773 - only assign value member to supplier Id if it  is a valid 1 (greater than 0)				
		// (j.dinatale 2013-04-08 15:47) - PLID 56072 - we should not be setting the supplier in this instance, it honestly makes no sense to
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::RefreshCatalogLists()
{
	//TES 5/25/2011 - PLID 43737 - These lists are all hidden on contact lens orders, so don't bother loading them.
	if(m_vwot != vwotSpectacleLens) {
		return;
	}

	if(m_nSupplierID == -1) {
		m_nxbCatalogSetup.EnableWindow(FALSE);
	}
	else {
		// // (s.dhole 2011-03-30 11:53) - PLID 43237 need to desabled this buttom
		if (!(GetCurrentUserPermissions(bioInvGlassesOrderTab) & ( sptWrite))) 
			m_nxbCatalogSetup.EnableWindow(FALSE);
		else
			m_nxbCatalogSetup.EnableWindow(TRUE);
	}

	//TES 9/30/2010 - PLID 40539 - Go through each of the catalog lists, and requery to include just those products that are valid
	// for this supplier, and are active (or the previously selected item for this order).
	//TES 2/8/2011 - PLID 40539 - Note: I changed all the logic of this queries to accurately pull "or the previously selected item for this order"

	//TES 11/9/2010 - PLID 40539 - Changed this so that if the supplier is -1, then the lists will all be unfiltered, that way
	// they can select the catalog information first, followed by the supplier information.

	//Frame Types
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	CString strWhere = FormatString("(GlassesSupplierCatalogFrameTypesT.IsActive = 1 OR "
		"GlassesCatalogFrameTypesT.ID = (SELECT GlassesCatalogFrameTypeID FROM GlassesOrderT WHERE GlassesOrderT.ID = %li)) "
		"AND (GlassesSupplierCatalogFrameTypesT.SupplierID = %d OR %d = -1)", m_nOrderID, m_nSupplierID, m_nSupplierID);
	IRowSettingsPtr pRow = m_pFrameType->CurSel;
	if(pRow) {
		m_nFrameTypeID = VarLong(pRow->GetValue(ftcID),-1);
	}
	else {
		m_nFrameTypeID = -1;
	}

	// (j.gruber 2011-07-22 15:18) - PLID 44030 - frame types are duplicating if 2 suppliers have the same type
	//so add a groupby 
	m_pFrameType->GroupByClause = "GlassesCatalogFrameTypesT.ID, FrameTypeName, FrameTypeCode, GlassesOrderProcessTypeID, ProcessName";

	m_pFrameType->WhereClause = _bstr_t(strWhere);	
	m_pFrameType->Requery();
	// (s.dhole 2012-02-02 10:15) - PLID 47396
	pRow = m_pFrameType->GetNewRow();;
	pRow->PutValue(ftcID, (long)-1);
	pRow->PutValue(ftcName, _bstr_t(" <None> "));
	m_pFrameType->AddRowBefore(pRow, m_pFrameType->GetFirstRow());
	
	//Materials
	//TES 6/8/2011 - PLID 43790 - Our Material variables will be updated when the requery on the list finishes

	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	//TES 5/18/2011 - PLID 43762 - This was supposed to check for the supplier ID being -1 (in which case it would load all active materials).
	// Additionally, it was checking against GlassesCatalogDesignsID instead of GlassesCatalogMaterialsID
	strWhere = FormatString("(GlassesSupplierCatalogMaterialsT.IsActive = 1 AND "
		"GlassesSupplierCatalogMaterialsT.SupplierID = %li OR %li = -1) OR GlassesCatalogMaterialsT.ID IN (SELECT GlassesCatalogMaterialsID FROM GlassesOrderOtherInfoT "
		"WHERE GlassesOrderOtherInfoT.ID IN (SELECT LeftGlassesOrderOtherInfoID FROM GlassesOrderT WHERE GlassesOrderT.ID = %li "
		"UNION SELECT RightGlassesOrderOtherInfoID FROM GlassesOrderT WHERE GlassesOrderT.ID = %li))", m_nSupplierID, m_nSupplierID, m_nOrderID, m_nOrderID);
	m_pLensMaterialL->WhereClause = _bstr_t(strWhere);
	m_pLensMaterialL->Requery();
	m_pLensMaterialR->WhereClause = _bstr_t(strWhere);
	m_pLensMaterialR->Requery();

	// (s.dhole 2012-02-02 10:12) - PLID 47396
	
	pRow = m_pLensMaterialR->GetNewRow();
	pRow->PutValue(lmcID, (long)-1);
	// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
	//pRow->PutValue(lmcCptID, (long)-1);
	pRow->PutValue(lmcBillPerLens , (bool)FALSE);
	pRow->PutValue(lmcName, _bstr_t(" <None> "));
	pRow->PutValue(lmcPrompt, (bool)FALSE);	// (j.dinatale 2013-03-29 09:20) - PLID 55936

	
	m_pLensMaterialR->AddRowBefore(pRow, m_pLensMaterialR->GetFirstRow());
	pRow = m_pLensMaterialL->GetNewRow();
	pRow->PutValue(lmcID, (long)-1);
	// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
	//pRow->PutValue(lmcCptID , (long)-1);
	pRow->PutValue(lmcBillPerLens ,(bool) FALSE);
	pRow->PutValue(lmcName, _bstr_t(" <None> "));
	pRow->PutValue(lmcPrompt, (bool)FALSE);	// (j.dinatale 2013-03-29 09:20) - PLID 55936
	m_pLensMaterialL->AddRowBefore(pRow, m_pLensMaterialL->GetFirstRow());
	

	//Treatments
	//NOTE: Keep in Sync with OnMultiSelectTreatments()
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	// (s.dhole 2011-04-20 12:51) - PLID 43320 We will show all treatment belong to selected supplier
	// (s.dhole 2011-05-20 16:03) - PLID 43320 	i have to re-introduce load all treatment if we do not have supplier selected due to support some of the dependency	
	
	strWhere = FormatString(  " (GlassesSupplierCatalogTreatmentsT.SupplierID= %d  OR %d = -1 ) " ,m_nSupplierID ,m_nSupplierID) ;
	

	
	m_pLensTreatmentsL->WhereClause = _bstr_t(strWhere);
	m_pLensTreatmentsL->Requery();
	
	m_pLensTreatmentsR->WhereClause = _bstr_t(strWhere);
	m_pLensTreatmentsR->Requery();

	pRow = m_pLensTreatmentsL->GetNewRow();
	pRow->PutValue(ltcID, (long)-2);
	pRow->PutValue(ltcName, _bstr_t(" <Multiple...> "));
	m_pLensTreatmentsL->AddRowBefore(pRow, m_pLensTreatmentsL->GetFirstRow());
	pRow = m_pLensTreatmentsL->GetNewRow();
	pRow->PutValue(ltcID, (long)-1);
	pRow->PutValue(ltcName, _bstr_t(" <None> "));
	m_pLensTreatmentsL->AddRowBefore(pRow, m_pLensTreatmentsL->GetFirstRow());
	pRow = m_pLensTreatmentsR->GetNewRow();
	pRow->PutValue(ltcID, (long)-2);
	pRow->PutValue(ltcName, _bstr_t(" <Multiple...> "));
	m_pLensTreatmentsR->AddRowBefore(pRow, m_pLensTreatmentsR->GetFirstRow());
	pRow = m_pLensTreatmentsR->GetNewRow();
	pRow->PutValue(ltcID, (long)-1);
	pRow->PutValue(ltcName, _bstr_t(" <None> "));
	m_pLensTreatmentsR->AddRowBefore(pRow, m_pLensTreatmentsR->GetFirstRow());
	
	
	

}

//TES 12/9/2010 - PLID 40539 - The design lists are based on the location, not the supplier, so they need their own Refresh()
void CVisionWebOrderDlg::RefreshDesignLists()
{
	//TES 5/25/2011 - PLID 43737 - These lists are all hidden on contact lens orders, so don't bother loading them.
	if(m_vwot != vwotSpectacleLens) {
		return;
	}

	//Designs
	//TES 12/1/2010 - PLID 40539 - Filter on designs that are associated with any supplier that is associated with the current location,
	// or is already associated with this order.
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	// (s.dhole 2011-03-29 16:15) - PLID PLID 43035 Remove location filter from design selection
	CString strWhere = FormatString("GlassesCatalogDesignsT.ID IN "
		"(SELECT GlassesCatalogDesignsID FROM "
		"GlassesSupplierCatalogDesignsT INNER JOIN PersonT ON GlassesSupplierCatalogDesignsT.SupplierID = PersonT.ID "
		"WHERE GlassesSupplierCatalogDesignsT.IsActive = 1 AND PersonT.Archived = 0 ) "
		"OR (GlassesCatalogDesignsT.ID IN (SELECT GlassesCatalogDesignsID FROM GlassesOrderOtherInfoT "
		"WHERE GlassesOrderOtherInfoT.ID IN (SELECT LeftGlassesOrderOtherInfoID FROM GlassesOrderT WHERE GlassesOrderT.ID = %li "
		"UNION SELECT RightGlassesOrderOtherInfoID FROM GlassesOrderT WHERE GlassesOrderT.ID = %li)))",  m_nOrderID, m_nOrderID);
	m_pLensDesignL->WhereClause = _bstr_t(strWhere);
	m_pLensDesignL->Requery();
	IRowSettingsPtr pNewRow;
	//(s.dhole 2012-02-08 17:18) - PLID 48821 Design can be optional
	// Append first Row and  <None>
	pNewRow = m_pLensDesignL->GetNewRow();
	pNewRow->PutValue(ldcID, -1);
	pNewRow->PutValue(ldcName, _bstr_t(" <None> "));
	pNewRow->PutValue(ldcHasParams, (long)0);
	// (s.dhole 2012-03-06 12:39) - PLID 48821 Remove Cptid
	//pNewRow->PutValue(ldcCptID, (long)-1);
	pNewRow->PutValue(ldcBillPerLens, (bool)FALSE);
	pNewRow->PutValue(ldcPrompt, (bool)FALSE);	// (j.dinatale 2013-03-29 09:20) - PLID 55936
	m_pLensDesignL->AddRowBefore(pNewRow, m_pLensDesignL->GetFirstRow());
	
	
	// (s.dhole 2010-11-12 12:26) - PLID no more filter
	m_pLensDesignR->WhereClause = _bstr_t(strWhere);
	m_pLensDesignR->Requery();
	//(s.dhole 2012-02-08 17:18) - PLID 48821 Design can be optional
	// Append first Row and  <None>
	pNewRow = m_pLensDesignR->GetNewRow();
	pNewRow->PutValue(ldcID, -1);
	pNewRow->PutValue(ldcName, _bstr_t(" <None> "));
	pNewRow->PutValue(ldcHasParams, (long)0);
	// (s.dhole 2012-03-06 12:39) - 48821  Remove Cptid
	//pNewRow->PutValue(ldcCptID, (long)-1);
	pNewRow->PutValue(ldcBillPerLens, (bool)FALSE);
	pNewRow->PutValue(ldcPrompt, (bool)FALSE);	// (j.dinatale 2013-03-29 09:20) - PLID 55936
	m_pLensDesignR->AddRowBefore(pNewRow, m_pLensDesignR->GetFirstRow());
}

void CVisionWebOrderDlg::OnSelChosenVisionwebSupplier(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		IRowSettingsPtr pRow(lpRow);
		if(pRow) {
			m_nSupplierID = VarLong(pRow->GetValue(scID));
		}
		else {
			m_nSupplierID = -1;
		}
		//Requery the supplier-specific lists.
		RefreshCatalogLists();
	
		//(c.copits 2011-09-27) PLID 45112 - Disable "Glasses Catalog" button for inactive suppliers
		UpdateGlassesCatalogButton();

	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenVisionwebLensTreatmentL(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//TES 5/22/2011 - PLID 43790 - Copy our initial list, we'll use it down below to figure out service codes
		CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
		arOriginalTreatments.Copy(m_arLeftLensTreatments);

		//TES 5/22/2011 - PLID 43790 - Track if we call OnMultiSelect(), that will update
		// the service codes so we don't have to.
		bool bServiceCodesUpdated = false;

		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			m_arLeftLensTreatments.RemoveAll();
		}
		else {
			long nID = VarLong(pRow->GetValue(ltcID));
			if(nID == -1) {
				m_arLeftLensTreatments.RemoveAll();
			}
			else if(nID == -2) {
				if(!OnMultiSelectTreatmentsL()) {
					//They cancelled, so re-select the previously selected row.
					ASSERT(m_arLeftLensTreatments.GetSize() <= 1);
					if(m_arLeftLensTreatments.GetSize() == 0) {
						m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
					}
					else {
						m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)m_arLeftLensTreatments[0].nTreatmentID);
					}
				}
				else {
					bServiceCodesUpdated = true;
				}
			}
			else {
				m_arLeftLensTreatments.RemoveAll();
				//TES 5/22/2011 - PLID 43790 - Pull the billing information
				TreatmentInformation ti;
				ti.nTreatmentID = nID;
				// (s.dhole 2012-03-06 12:39) - PLID 48926 Remove Cptid
				//ti.arCptID = VarLong(pRow->GetValue(ltcCptID), -1);
				ti.bBillPerLens = VarBool(pRow->GetValue(ltcBillPerLens), FALSE);
				m_arLeftLensTreatments.Add(ti);
			}
		}
		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - The lenses may no longer be identical.
			//TES 5/22/2011 - PLID 43790 - Changed the treatment array to a struct that includes billing information
			if(m_arLeftLensTreatments.GetSize() != m_arRightLensTreatments.GetSize()) {
				m_bLensesIdentical = false;
			}
			else {
				for(int i = 0; i < m_arLeftLensTreatments.GetSize() && m_bLensesIdentical; i++) {
					bool bMatched = false;
					for(int j = 0; j < m_arRightLensTreatments.GetSize() && !bMatched; j++) {
						if(m_arLeftLensTreatments[i].nTreatmentID == m_arRightLensTreatments[i].nTreatmentID) bMatched = true;
					}
					if(!bMatched) {
						m_bLensesIdentical = false;
					}
				}
			}
		}

		//TES 5/22/2011 - PLID 43790 - Now we need to update the service codes (unless it's been done already)
		if(!bServiceCodesUpdated) {
			UpdateTreatmentServiceCodesL(arOriginalTreatments, m_arRightLensTreatments);
		}
	}NxCatchAll(__FUNCTION__);
}


void CVisionWebOrderDlg::OnSelChosenVisionwebLensTreatmentR(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//TES 5/22/2011 - PLID 43790 - Copy our initial list, we'll use it down below to figure out service codes
		CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
		arOriginalTreatments.Copy(m_arRightLensTreatments);

		//TES 5/22/2011 - PLID 43790 - Track if we call OnMultiSelect(), that will update
		// the service codes so we don't have to.
		bool bServiceCodesUpdated = false;

		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			m_arRightLensTreatments.RemoveAll();
		}
		else {
			long nID = VarLong(pRow->GetValue(ltcID));
			if(nID == -1) {
				m_arRightLensTreatments.RemoveAll();
			}
			else if(nID == -2) {
				if(!OnMultiSelectTreatmentsR()) {
					//They cancelled, so re-select the previously selected row.
					ASSERT(m_arRightLensTreatments.GetSize() <= 1);
					if(m_arRightLensTreatments.GetSize() == 0) {
						m_pLensTreatmentsR->SetSelByColumn(ltcID, (long)-1);
					}
					else {
						m_pLensTreatmentsR->SetSelByColumn(ltcID, (long)m_arRightLensTreatments[0].nTreatmentID);
					}
				}
				else {
					bServiceCodesUpdated = true;
				}
			}
			else {
				m_arRightLensTreatments.RemoveAll();
				//TES 5/22/2011 - PLID 43790 - Pull the billing information
				TreatmentInformation ti;
				ti.nTreatmentID = nID;
				// (s.dhole 2012-03-06 12:39) - PLID 48926 Remove Cptid
				//ti.nCptID = VarLong(pRow->GetValue(ltcCptID), -1);
				ti.bBillPerLens = VarBool(pRow->GetValue(ltcBillPerLens), FALSE);
				m_arRightLensTreatments.Add(ti);
			}
		}

		//TES 12/6/2010 - PLID 41730 - Check whether we should copy this down to the OS lens.
		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - If we have an OS lens, then copy.
			CString strSphereL;
			GetDlgItemText(IDC_SPHERE_L, strSphereL);
			if(!strSphereL.IsEmpty()) {
				//TES 5/22/2011 - PLID 43790 - Grab the original left treatments, we'll use them below to update service codes
				CArray<TreatmentInformation,TreatmentInformation&> arOldTreatmentsL;
				arOldTreatmentsL.Copy(m_arLeftLensTreatments);
				m_arLeftLensTreatments.Copy(m_arRightLensTreatments);
				if(m_arLeftLensTreatments.GetSize() == 0) {
					m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
					m_nxlTreatmentsL.ShowWindow(SW_HIDE);
					GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
				}
				else if(m_arLeftLensTreatments.GetSize() == 1) {
					m_pLensTreatmentsL->SetSelByColumn(ltcID, m_arLeftLensTreatments[0].nTreatmentID);
					m_nxlTreatmentsL.ShowWindow(SW_HIDE);
					GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
				}
				else {
					m_nxlTreatmentsL.SetText(m_nxlTreatmentsR.GetText());
					GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
					m_nxlTreatmentsL.ShowWindow(SW_SHOWNA);
				}

				//TES 5/22/2011 - PLID 43790 - Now update the service codes for the left treatments.  Pass in the treatments we started with
				UpdateTreatmentServiceCodesL(arOldTreatmentsL, arOriginalTreatments);
			}
		}

		//TES 5/22/2011 - PLID 43790 - Now update the service codes for the right treatments (unless it's been done already)
		if(!bServiceCodesUpdated) {
			UpdateTreatmentServiceCodesR(arOriginalTreatments);
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::ReflectFrame(BOOL IsExistData)
{
	try {
	//TES 5/25/2011 - PLID 43737 - These controls are all hidden on contact lens orders
	if(m_vwot != vwotSpectacleLens) {
		return;
	}
	BOOL bIsFrame = TRUE;

	//Fill all the fields from the data in the row.
	IRowSettingsPtr pRow = m_pFrame->CurSel;
	
	if(pRow) {
		
		if (VarLong(pRow->GetValue(fcID),-1)!=-1)
		{
			
			SetDlgItemText(IDC_MANUFACTURER, VarString(pRow->GetValue(fcManufacturer),""));
			SetDlgItemText(IDC_STYLE, VarString(pRow->GetValue(fcStyle),""));
			SetDlgItemText(IDC_FRAME_COLOR, VarString(pRow->GetValue(fcColor),""));
			SetDlgItemText(IDC_A_BOX, VarString(pRow->GetValue(fcA),""));
			SetDlgItemText(IDC_B_BOX, VarString(pRow->GetValue(fcB),""));
			SetDlgItemText(IDC_DBL, VarString(pRow->GetValue(fcDBL),""));
			SetDlgItemText(IDC_ED, VarString(pRow->GetValue(fcED),""));
			SetDlgItemText(IDC_TEMPLE_LENGTH, VarString(pRow->GetValue(fcTemple),""));
			SetDlgItemText(IDC_EYE_SIZE, VarString(pRow->GetValue(fcEye),""));
			// (s.dhole 2012-05-15 12:15) - PLID 49518
			SetDlgItemVar(IDC_FRAME_COST, pRow->GetValue(fcLastCost));
			BOOL bIsTrackableStatus=FALSE;
			// (s.dhole 2012-05-15 18:58) - PLID 49925
			// We will consider Billable as primary flag, if it is tru then only we cosider  Trackable
			_RecordsetPtr rsFrameLocation = CreateParamRecordset("Select  * from ProductLocationInfoT WHERE LocationID ={INT} AND ProductID = {INT}" ,
			(m_nLocationID != -1) ?m_nLocationID:GetCurrentLocationID(), VarLong(pRow->GetValue(fcServiceID),-1)  );
			if (!rsFrameLocation->eof){
				if (AdoFldBool(rsFrameLocation , "Billable",FALSE) ==TRUE && AdoFldLong(rsFrameLocation , "TrackableStatus",-1) ==2){
					bIsTrackableStatus = TRUE;
				}
			}
			// (s.dhole 2012-05-15 18:58) - PLID 49925
			if (bIsTrackableStatus==TRUE){
				// (b.spivey, November 16, 2012) - PLID 53422 - Update the check if we were told to. 
				//		Make sure we tell the next iteration not to.
				// (j.dinatale 2013-02-11 10:20) - PLID 55093 - changed how this works, if the sold off shelf value was manually set, restore what the user had set it to
				//		otherwise, we want to set it to true if its trackable as per the preference
				if(!m_bSoldOffShelfManualSet) {
					if(m_bAutoCheckSoldOffShelfNewOrder){
						SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED, TRUE);
					}
				} else {
					SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED, m_bSoldOffShelfManualLastVal);
				}
				GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(TRUE);
			}
			else{
				SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED,FALSE);
				GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(FALSE);
			}
			SetFrameFields(FALSE,TRUE);
		}
		else
		{
			SetFrameFields(TRUE,FALSE);
		}
	}
	else {
		SetFrameFields(TRUE,TRUE);
	}

	}NxCatchAll(__FUNCTION__);
}

	// (s.dhole 2012-02-02 10:15) - PLID 47396
void CVisionWebOrderDlg::SetFrameFields(BOOL bIsRemoveData,BOOL bIsFieldEnable )
{
	try {
		if (bIsRemoveData==TRUE)
		{
			SetDlgItemText(IDC_MANUFACTURER, "");
			SetDlgItemText(IDC_STYLE, "");
			SetDlgItemText(IDC_FRAME_COLOR, "");
			SetDlgItemText(IDC_A_BOX, "");
			SetDlgItemText(IDC_B_BOX, "");
			SetDlgItemText(IDC_DBL, "");
			SetDlgItemText(IDC_ED, "");
			SetDlgItemText(IDC_TEMPLE_LENGTH, "");
			SetDlgItemText(IDC_EYE_SIZE, "");
			
			COleCurrency cyCost = COleCurrency(0,0);
			SetDlgItemText(IDC_FRAME_COST, FormatCurrencyForInterface(cyCost));
			m_pFrameType->FindByColumn(ftcID, (long)-1, NULL, g_cvarTrue);
		}
		else
		{
			//keep  existing data
		}
		
		GetDlgItem(IDC_MANUFACTURER)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_STYLE)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_FRAME_COLOR)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_A_BOX)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_B_BOX)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_DBL)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_ED)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_TEMPLE_LENGTH)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_EYE_SIZE)->EnableWindow(bIsFieldEnable);
		GetDlgItem(IDC_FRAME_COST)->EnableWindow(FALSE);
		GetDlgItem(IDC_VISIONWEB_FRAME_TYPE)->EnableWindow(bIsFieldEnable);
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenFrame(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		IRowSettingsPtr pRow(lpRow);
		long nSelectedServiceID = -1;
		if(pRow) {
			nSelectedServiceID = VarLong(pRow->GetValue(fcServiceID),-1);
		}

		
		if (g_pLicense->CheckForLicense(CLicense::lcFrames, CLicense::cflrSilent) && nSelectedServiceID==-2  ){ 
			// (s.dhole 2012-04-24 10:41) - PLID 49734 import frames from list
			CInvFrameSelection Dlg  ;
			GetDlgItem(IDC_FRAME_LODING_LABEL)->ShowWindow(SW_SHOW );
			if (Dlg.DoModal()==IDOK)
			{
				// Load selected frame int lisst
				m_nFrameID =Dlg.m_nFrameDataID;
				IRowSettingsPtr pSelectRow = m_pFrame->FindByColumn(fcID, (long)m_nFrameID , NULL, g_cvarTrue);
				if (!pSelectRow) {
					_RecordsetPtr rsFrame = CreateParamRecordset("Select  (ISNULL( FramesDataT.CollectionName,'')  + ', '  "
					" + ISNULL( FramesDataT.BrandName,'')  + ', ' + ISNULL( FramesDataT.StyleName,'')  + ', ' +   "
					" ISNULL( FramesDataT.ColorDescription,'')  + ', ' + ISNULL(FramesDataT.ColorCode,'') + ', '  "
					" + ' ' + ISNULL( FramesDataT.Eye,'') + ' - ' + ISNULL(FramesDataT.Bridge,'') +  + ' - '   "
					" + ISNULL(FramesDataT.Temple,'')) AS Name, "
					" (ISNULL(FramesDataT.Eye,'') + ' - ' + ISNULL(FramesDataT.Bridge,'') + ' - ' +   "
					" ISNULL(FramesDataT.Temple,'')) AS Eye_Bridge  ,* "
					" FROM  FramesDataT "
					" WHERE (FramesDataT.IsCatalog = 1 OR FramesDataT.FPC Is Null) AND FramesDataT.ID={INT} ", Dlg.m_nFrameDataID);
					if(!rsFrame->eof) {
						IRowSettingsPtr pFrameRow = m_pFrame->GetNewRow();
						pFrameRow->PutValue(fcServiceID, (long)-1);
						pFrameRow->PutValue(fcServiceName, _bstr_t(AdoFldString(rsFrame, "Name","")) );
						pFrameRow->PutValue(fcLastCost, _bstr_t(AdoFldString(rsFrame, "Name","")) );
						pFrameRow->PutValue(fcPrice, _bstr_t(AdoFldString(rsFrame, "Name","")) );
						pFrameRow->PutValue(fcBarcode, _bstr_t("")) ;
						pFrameRow->PutValue(fcID, (long) AdoFldLong(rsFrame, "ID")) ;
						pFrameRow->PutValue(fcSource, _bstr_t("Frame"));
						pFrameRow->PutValue(fcManufacturer, _bstr_t(AdoFldString(rsFrame, "ManufacturerName","")) );
						pFrameRow->PutValue(fcStyle, _bstr_t(AdoFldString(rsFrame, "StyleName","")));
						pFrameRow->PutValue(fcColor, _bstr_t(AdoFldString(rsFrame, "ColorDescription","")));
						pFrameRow->PutValue(fcA, _bstr_t(AdoFldString(rsFrame, "A","")));
						pFrameRow->PutValue(fcB, _bstr_t(AdoFldString(rsFrame, "B","")));
						pFrameRow->PutValue(fcDBL, _bstr_t(AdoFldString(rsFrame, "DBL","")));
						pFrameRow->PutValue(fcED, _bstr_t(AdoFldString(rsFrame, "ED","")));
						pFrameRow->PutValue(fcTemple,  _bstr_t(AdoFldString(rsFrame, "Temple","")));
						pFrameRow->PutValue(fcEye,  _bstr_t(AdoFldString(rsFrame, "Eye","")));
						pFrameRow->PutValue(fcFPCCode,  _bstr_t(AdoFldString(rsFrame, "FPC","")));
						pFrameRow->PutValue(fcBrand,  _bstr_t(AdoFldString(rsFrame, "BrandName","")));
						pFrameRow->PutValue(fcFrameSize,  _bstr_t(AdoFldString(rsFrame, "Eye_Bridge","")));
						m_pFrame->AddRowSorted(pFrameRow, NULL);
					}
				}
				pSelectRow = m_pFrame->FindByColumn(fcID, (long)m_nFrameID , NULL, g_cvarTrue);
				CString strFramWhere  = (LPCTSTR)m_pFrame->WhereClause;  
			   // append where clause so if we have to refresh combobox, we will have same records 
				strFramWhere += FormatString(  " OR ((FramesDataT.IsCatalog = 1 OR FramesDataT.FPC Is Null)  and FramesDataT.ID=%li) " ,Dlg.m_nFrameDataID); 	
				m_pFrame->WhereClause = bstr_t(strFramWhere );		
				nSelectedServiceID =-1;
				OnSelChosenFrame(pSelectRow );
				return;
			}
			else{
				nSelectedServiceID =-1;
				m_pFrame->FindByColumn(ftcID, (long)-1, NULL, g_cvarTrue);
			}
			GetDlgItem(IDC_FRAME_LODING_LABEL)->ShowWindow(SW_HIDE);
		}
		else{
			// nothing
		}

		if (nSelectedServiceID==-1){
			SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED,FALSE );
			GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(FALSE);
		}
		else
		{
			GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(TRUE);
		}
		
		//TES 4/15/2011 - PLID 43288 - If we previously had a product selected, and it's not the currently chosen one,
		// see if it's in the list of services, and remove it
		//TES 4/20/2011 - PLID 43288 - But only if the preference is on
		//TES 6/7/2011 - PLID 43275 - And don't do this if we're loading from data
		//TES 6/30/2011 - PLID 44166 - Track whether we change the services list.
		bool bServicesChanged = false;
		//if(!m_bLoadingFrameFromData && GetRemotePropertyInt("GlassesOrder_AutoAddFrameProduct", 1, 0, "<None>")) {
		// (s.dhole 2012-04-23 18:13) - PLID 49925 mark any existing frame as delete
			if( m_nFrameProductID  != nSelectedServiceID) {
				for(int nCnt =0 ; nCnt< m_arLenseServiceInfo.GetSize();   nCnt ++){
						if (m_arLenseServiceInfo[nCnt].nServiceID  ==m_nFrameProductID && 
							m_arLenseServiceInfo[nCnt].bIsDefault ==TRUE){
							m_arLenseServiceInfo[nCnt].bIsDelete =TRUE;
							break;
						}
					}
			}//}
		

		//TES 6/7/2011 - PLID 43275 - If we're loading the frame from data, we don't want to update anything else
		if(!m_bLoadingFrameFromData) {
			ReflectFrame();
			//TES 12/16/2010 - PLID 41867 - They've selected a new frame, remember that if and when we save.
			m_bFrameChanged = true;

			//TES 4/14/2011 - PLID 43288 - Now, if they selected a product, try and add it to our list of services
			//TES 4/20/2011 - PLID 43288 - But only if the preference is on
			// (s.dhole 2012-03-12 11:23) - PLID  48811 Remove this option
			//if(GetRemotePropertyInt("GlassesOrder_AutoAddFrameProduct", 1, 0, "<None>")) {
				if(pRow) {
					//TES 4/14/2011 - PLID 43288 - Is it already in the list?
					BOOL bOffTheShelf=FALSE;
					// (s.dhole 2012-05-15 18:58) - PLID 49925
					BOOL bIsBillable=FALSE;
					BOOL bIsTrackableStatus=FALSE;
					CheckFrameProductBillable(nSelectedServiceID,m_nLocationID, bIsBillable,bIsTrackableStatus);
					// (s.dhole 2012-03-12 11:23) - PLID  48811 
					if  (IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED)){
						bOffTheShelf =TRUE;
					}
					
					BOOL bExist=FALSE;
					// (s.dhole 2012-04-23 18:13) - PLID 49925 if same frame is exist and may be loaded from database than enabel it
					for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
						if (m_arLenseServiceInfo[nCnt].nServiceID == nSelectedServiceID
							&& m_arLenseServiceInfo[nCnt].bIsDefault == TRUE ){
								// (s.dhole 2012-05-15 18:58) - PLID 49925 onlly billbale
								if (bIsBillable ==TRUE)  {
									m_arLenseServiceInfo[nCnt].bIsDelete = FALSE; 
									m_arLenseServiceInfo[nCnt].bIsOffTheShelf =bOffTheShelf ;
								}
								else{
									m_arLenseServiceInfo[nCnt].bIsDelete = TRUE; 
									m_arLenseServiceInfo[nCnt].bIsOffTheShelf =FALSE ;
								}
								bExist=TRUE;
								break;
						}
					}
					
					if (bExist==FALSE){
						// (s.dhole 2012-05-16 18:09) - PLID 49925
						if (nSelectedServiceID>0 && bIsBillable==TRUE){
					// (s.dhole 2012-05-15 18:58) - PLID 49925 now add frame to list	 	
							AddItemsToList(-1,FALSE,FALSE,-1,FALSE,-1,FALSE,-1,FALSE,pRow,gostFrame,TRUE,TRUE, bOffTheShelf ) ;
							
						}
					}
						m_nFrameProductID = nSelectedServiceID;
						bServicesChanged = true;
				}
			//}
		}
		RefreshServiceList();

	}NxCatchAll(__FUNCTION__);
}

LRESULT CVisionWebOrderDlg::OnLabelClick(WPARAM wParam, LPARAM lParam)
{
	UINT nIdc = (UINT)wParam;
	switch(nIdc) {
	case IDC_TREATMENTS_LABEL_L:
		OnMultiSelectTreatmentsL();
		break;
	case IDC_TREATMENTS_LABEL_R:
		OnMultiSelectTreatmentsR();
		break;
	
	break;
	default:
		//What?  Some strange NxLabel is posting messages to us?
		ASSERT(FALSE);
		break;
	}
	return 0;
}

// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
BOOL CVisionWebOrderDlg::OnMultiSelectTreatmentsL()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//Pop up a dialog with the available treatments for this supplier.
		//NOTE: Keep these queries in sync with RefreshCatalogLists()
		// (j.armen 2012-06-20 15:23) - PLID 49607 - Provide MultiSelect Sizing ConfigRT Entry
		CMultiSelectDlg dlg(this, "GlassesCatalogTreatmentsT");
		//TES 5/22/2011 - PLID 43790 - Our member array is a struct now, so construct a DWord array with just the IDs
		CDWordArray dwaLeftTreatmentIDs;
		for(int i = 0; i < m_arLeftLensTreatments.GetSize(); i++) {
			dwaLeftTreatmentIDs.Add(m_arLeftLensTreatments[i].nTreatmentID);
		}
		dlg.PreSelect(dwaLeftTreatmentIDs);

		CString strFrom = FormatString(" (SELECT    distinct  GlassesCatalogTreatmentsT.ID, "
										" GlassesCatalogTreatmentsT.TreatmentName, GlassesCatalogTreatmentsT.TreatmentCode, "  
										" GlassesCatalogTreatmentsT.GlassesOrderProcessTypeID, GlassesOrderProcessTypeT.ProcessName "
										" FROM  "
										" GlassesCatalogTreatmentsT INNER JOIN GlassesSupplierCatalogTreatmentsT  "
										" ON GlassesCatalogTreatmentsT.ID = GlassesSupplierCatalogTreatmentsT.GlassesCatalogTreatmentsID  "
										" INNER JOIN GlassesOrderProcessTypeT ON GlassesCatalogTreatmentsT.GlassesOrderProcessTypeID = GlassesOrderProcessTypeT.ID "
										" WHERE "
										" GlassesSupplierCatalogTreatmentsT.SupplierID= %d  OR %d = -1 "
										" GROUP  BY GlassesCatalogTreatmentsT.ID, GlassesCatalogTreatmentsT.TreatmentName, "
										" GlassesCatalogTreatmentsT.TreatmentCode, "
										" GlassesCatalogTreatmentsT.GlassesOrderProcessTypeID, GlassesOrderProcessTypeT.ProcessName ) AS Treatment_Q" ,m_nSupplierID ,m_nSupplierID);
		CString strWhere = "";
		// (s.dhole 2011-03-29 13:20) - PLID 43035 added column to display Treatemet Code/type (Custom/Visionweb) 
		CStringArray saExtraFields, saExtraNames;
		saExtraFields.Add("TreatmentCode");
		saExtraFields.Add("ProcessName");
		saExtraNames.Add("Code");
		saExtraNames.Add("Type");
		
		// (s.dhole 2011-03-29 13:20) - PLID 43035  added column to display Treatemet Code/type (Custom/Visionweb) on selection dlg
		// (s.dhole 2011-05-05 15:14) - PLID 43341 Allow user to unselect all items
		if(IDOK == dlg.Open(strFrom, strWhere, "ID", "TreatmentName", "Select one or more lens treatments:",0 ,0xFFFFFFFF,&saExtraFields,&saExtraNames)) {
			//TES 5/22/2011 - PLID 43790 - Get the IDs, then get the associated billing information
			CDWordArray dwaLeftTreatmentIDs;
			dlg.FillArrayWithIDs(dwaLeftTreatmentIDs);
			//TES 5/22/2011 - PLID 43790 - Also, remember our original treatments so we can update the service codes below
			CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
			arOriginalTreatments.Copy(m_arLeftLensTreatments);
			m_arLeftLensTreatments.RemoveAll();
			for(int i = 0 ; i < dwaLeftTreatmentIDs.GetSize(); i++) {
				m_arLeftLensTreatments.Add(GetTreatmentInformation((long)dwaLeftTreatmentIDs[i]));
			}

			if(m_arLeftLensTreatments.GetSize() > 1) {
				m_nxlTreatmentsL.SetText(dlg.GetMultiSelectString());
				m_nxlTreatmentsL.ShowWindow(SW_SHOWNA);
				GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
			}
			else {
				GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
				m_nxlTreatmentsL.ShowWindow(SW_HIDE);
				if(m_arLeftLensTreatments.GetSize() == 1) {
					m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)m_arLeftLensTreatments[0].nTreatmentID);
				}
				else {
					m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
				}
			}
			if(m_bLensesIdentical) {
				//TES 12/6/2010 - PLID 41730 - The lenses may no longer be identical.
				if(m_arLeftLensTreatments.GetSize() != m_arRightLensTreatments.GetSize()) {
					m_bLensesIdentical = false;
				}
				else {
					for(int i = 0; i < m_arLeftLensTreatments.GetSize() && m_bLensesIdentical; i++) {
						bool bMatched = false;
						for(int j = 0; j < m_arRightLensTreatments.GetSize() && !bMatched; j++) {
							if(m_arLeftLensTreatments[i].nTreatmentID == m_arRightLensTreatments[i].nTreatmentID) bMatched = true;
						}
						if(!bMatched) {
							m_bLensesIdentical = false;
						}
					}
				}
			}
			//TES 5/22/2011 - PLID 43790 - Now update the service codes
			UpdateTreatmentServiceCodesL(arOriginalTreatments, m_arLeftLensTreatments );
			return TRUE;
		}
		else {
			return FALSE;
		}
	}NxCatchAll(__FUNCTION__);
	return FALSE;
}

// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
BOOL CVisionWebOrderDlg::OnMultiSelectTreatmentsR()
{
	try {
		//Pop up a dialog with the available treatments for this supplier.
		//NOTE: Keep these queries in sync with RefreshCatalogLists()
		// (j.armen 2012-06-20 15:23) - PLID 49607 - Provide MultiSelect Sizing ConfigRT Entry
		CMultiSelectDlg dlg(this, "GlassesCatalogTreatmentsT");
		//TES 5/22/2011 - PLID 43790 - Our member array is a struct now, so construct a DWord array with just the IDs
		CDWordArray dwaRightTreatmentIDs;
		for(int i = 0; i < m_arRightLensTreatments.GetSize(); i++) {
			dwaRightTreatmentIDs.Add(m_arRightLensTreatments[i].nTreatmentID);
		}
		dlg.PreSelect(dwaRightTreatmentIDs);
	
		// (s.dhole 2011-03-29 13:20) - PLID 43035  added column to display Treatemet Code/type (Custom/Visionweb) 
			CString strFrom = FormatString(" (SELECT    distinct  GlassesCatalogTreatmentsT.ID, "
										" GlassesCatalogTreatmentsT.TreatmentName, GlassesCatalogTreatmentsT.TreatmentCode, "  
										" GlassesCatalogTreatmentsT.GlassesOrderProcessTypeID, GlassesOrderProcessTypeT.ProcessName "
										" FROM  "
										" GlassesCatalogTreatmentsT INNER JOIN GlassesSupplierCatalogTreatmentsT  "
										" ON GlassesCatalogTreatmentsT.ID = GlassesSupplierCatalogTreatmentsT.GlassesCatalogTreatmentsID  "
										" INNER JOIN GlassesOrderProcessTypeT ON GlassesCatalogTreatmentsT.GlassesOrderProcessTypeID = GlassesOrderProcessTypeT.ID "
										" WHERE "
										" GlassesSupplierCatalogTreatmentsT.SupplierID= %d  OR %d = -1 "
										" GROUP  BY GlassesCatalogTreatmentsT.ID, GlassesCatalogTreatmentsT.TreatmentName, "
										" GlassesCatalogTreatmentsT.TreatmentCode, "
										" GlassesCatalogTreatmentsT.GlassesOrderProcessTypeID, GlassesOrderProcessTypeT.ProcessName ) AS Treatment_Q " ,m_nSupplierID ,m_nSupplierID);
		CString strWhere = "";
		// (s.dhole 2011-03-29 13:20) - PLID 43035  added column to display Treatemet Code/type (Custom/Visionweb) 
		CStringArray saExtraFields, saExtraNames;
		saExtraFields.Add("TreatmentCode");
		saExtraFields.Add("ProcessName");
		saExtraNames.Add("Code");
		saExtraNames.Add("Type");
		
		// (s.dhole 2011-03-29 13:20) - PLID 43035  added column to display Treatemet Code/type (Custom/Visionweb) in selection dlg
		// (s.dhole 2011-05-05 15:14) - PLID 43341 Allow user to unselect all items
		if(IDOK == dlg.Open(strFrom, strWhere, "ID", "TreatmentName", "Select one or more lens treatments:",0 ,0xFFFFFFFF,&saExtraFields,&saExtraNames)) {
			//TES 5/22/2011 - PLID 43790 - Get the IDs, then get the associated billing information
			CDWordArray dwaTreatmentIDs;
			dlg.FillArrayWithIDs(dwaTreatmentIDs);
			//TES 5/22/2011 - PLID 43790 - Also, remember our original treatments so we can update the service codes below
			CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
			arOriginalTreatments.Copy(m_arRightLensTreatments);
			m_arRightLensTreatments.RemoveAll();
			for(int i = 0; i < dwaTreatmentIDs.GetSize(); i++) {
				m_arRightLensTreatments.Add(GetTreatmentInformation((long)dwaTreatmentIDs[i]));
			}

			if(m_arRightLensTreatments.GetSize() > 1) {
				m_nxlTreatmentsR.SetText(dlg.GetMultiSelectString());
				m_nxlTreatmentsR.ShowWindow(SW_SHOWNA);
				GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_HIDE);
			}
			else {
				GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_SHOW);
				m_nxlTreatmentsR.ShowWindow(SW_HIDE);
				if(m_arRightLensTreatments.GetSize() == 1) {
					m_pLensTreatmentsR->SetSelByColumn(ltcID, (long)m_arRightLensTreatments[0].nTreatmentID);
				}
				else {
					m_pLensTreatmentsR->SetSelByColumn(ltcID, (long)-1);
				}
			}

			//TES 12/6/2010 - PLID 41730 - Check whether we should copy this down to the OS lens.
			if(m_bLensesIdentical) {
				//TES 12/6/2010 - PLID 41730 - If we have an OS lens, then copy.
				CString strSphereL;
				GetDlgItemText(IDC_SPHERE_L, strSphereL);
				if(!strSphereL.IsEmpty()) {
					//TES 5/22/2011 - PLID 43790 - Remember the original left lens treatments so we can update them below
					CArray<TreatmentInformation,TreatmentInformation&> arOldTreatmentsL;
					arOldTreatmentsL.Copy(m_arLeftLensTreatments);
					m_arLeftLensTreatments.Copy(m_arRightLensTreatments);
					if(m_arLeftLensTreatments.GetSize() == 0) {
						m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
						m_nxlTreatmentsL.ShowWindow(SW_HIDE);
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
					}
					else if(m_arLeftLensTreatments.GetSize() == 1) {
						m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)m_arLeftLensTreatments[0].nTreatmentID);
						m_nxlTreatmentsL.ShowWindow(SW_HIDE);
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
					}
					else {
						m_nxlTreatmentsL.SetText(m_nxlTreatmentsR.GetText());
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
						m_nxlTreatmentsL.ShowWindow(SW_SHOWNA);
					}
					//TES 5/22/2011 - PLID 43790 - Now update the service codes for the left lens, pass in our original treatments
					UpdateTreatmentServiceCodesL(arOldTreatmentsL, arOriginalTreatments);
					
				}
			}

			//TES 5/22/2011 - PLID 43790 - Now update the service codes for the right lens
			UpdateTreatmentServiceCodesR(arOriginalTreatments);
			return TRUE;
		}
		else {
			return FALSE;
		}
		
	}NxCatchAll(__FUNCTION__);
	return FALSE;
}

BOOL CVisionWebOrderDlg::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message) 
{
	try {
		//TES 5/25/2011 - PLID 43737 - The labels aren't visible on contact lens orders
		if (m_vwot == vwotSpectacleLens) {
			CPoint pt;
			CRect rc;
			GetCursorPos(&pt);
			ScreenToClient(&pt);

			//TES 5/22/2011 - PLID 43790 - Renamed
			if (m_arLeftLensTreatments.GetSize() > 1)
			{
				CRect rc;
				GetDlgItem(IDC_TREATMENTS_LABEL_L)->GetWindowRect(rc);
				ScreenToClient(&rc);

				if (rc.PtInRect(pt)) {
					SetCursor(GetLinkCursor());
					return TRUE;
				}
			}

			//TES 5/22/2011 - PLID 43790 - Renamed
			if (m_arRightLensTreatments.GetSize() > 1)
			{
				CRect rc;
				GetDlgItem(IDC_TREATMENTS_LABEL_R)->GetWindowRect(rc);
				ScreenToClient(&rc);

				if (rc.PtInRect(pt)) {
					SetCursor(GetLinkCursor());
					return TRUE;
				}
			}
		}

	}NxCatchAllIgnore();

		
	return CNxDialog::OnSetCursor(pWnd, nHitTest, message);
}
void CVisionWebOrderDlg::OnSelChosenVisionwebThicknessType(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		ReflectThicknessType();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::ReflectThicknessType()
{
	//TES 5/25/2011 - PLID 43737 - These controls are hidden on contact lens orders
	if(m_vwot != vwotSpectacleLens) {
		return;
	}

	//If they selected "Lab decides best thickness", then disable the controls.
	IRowSettingsPtr pRow = m_pThicknessType->CurSel;
	if(pRow && (VarString(pRow->GetValue(ttcCode)) != "DRS" && VarString(pRow->GetValue(ttcCode)) != "")) {
		//TES 1/27/2011 - PLID 40539 - Don't enable if the lens isn't enabled.
		CString strSphere;
		GetDlgItemText(IDC_SPHERE_L, strSphere);
		BOOL bEnableL = (strSphere.IsEmpty()?FALSE:TRUE);
		GetDlgItemText(IDC_SPHERE_R, strSphere);
		BOOL bEnableR = (strSphere.IsEmpty()?FALSE:TRUE);	
		GetDlgItem(IDC_THICKNESS_L)->EnableWindow(bEnableL);
		GetDlgItem(IDC_THICKNESS_R)->EnableWindow(bEnableR);
	}
	else {
		GetDlgItem(IDC_THICKNESS_L)->EnableWindow(FALSE);
		GetDlgItem(IDC_THICKNESS_R)->EnableWindow(FALSE);
		SetDlgItemText(IDC_THICKNESS_L,"");
		SetDlgItemText(IDC_THICKNESS_R,"");
	}
}
void CVisionWebOrderDlg::OnCopyPrescription()
{
	try {
		// (s.dhole 2010-11-12 11:59) - PLID Swap L to R
		//Check whether any of the fields are filled
		bool bNonEmptyFound = false;
		CString str;
		GetDlgItemText(IDC_SPHERE_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_CYLINDER_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_AXIS_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_ADDITION_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_PRISM_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_SECONDARY_PRISM_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_BASE_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_DIST_PD_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_NEAR_PD_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		GetDlgItemText(IDC_HEIGHT_L, str);
		if(!str.IsEmpty()) bNonEmptyFound = true;

		if(bNonEmptyFound) {
			if(IDYES != MsgBox(MB_YESNO, "Are you sure you want to copy the OD prescription values to the OS lens, overwriting any existing values?")) {
				return;
			}
		}

		//Now, copy.
		GetDlgItemText(IDC_SPHERE_R, str);
		SetDlgItemText(IDC_SPHERE_L, str);

		GetDlgItemText(IDC_CYLINDER_R, str);
		SetDlgItemText(IDC_CYLINDER_L, str);

		GetDlgItemText(IDC_AXIS_R, str);
		SetDlgItemText(IDC_AXIS_L, str);

		GetDlgItemText(IDC_ADDITION_R, str);
		SetDlgItemText(IDC_ADDITION_L, str);

		GetDlgItemText(IDC_PRISM_R, str);
		SetDlgItemText(IDC_PRISM_L, str);
	// (s.dhole, 2011-12-07 12:29) - PLID 46883 - Set base2 
		GetDlgItemText(IDC_SECONDARY_PRISM_R, str); 
		SetDlgItemText(IDC_SECONDARY_PRISM_L, str); 

		GetDlgItemText(IDC_BASE_R, str);
		SetDlgItemText(IDC_BASE_L, str);
		
		GetDlgItemText(IDC_SECONDARY_BASE_R, str);
		SetDlgItemText(IDC_SECONDARY_BASE_L, str);

		GetDlgItemText(IDC_DIST_PD_R, str);
		SetDlgItemText(IDC_DIST_PD_L, str);

		GetDlgItemText(IDC_NEAR_PD_R, str);
		SetDlgItemText(IDC_NEAR_PD_L, str);

		GetDlgItemText(IDC_HEIGHT_R, str);
		SetDlgItemText(IDC_HEIGHT_L, str);

		//TES 12/2/2010 - PLID 40539 - Enable the other fields if they enter a Sphere value.
		ReflectUsedLenses();

	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2011-05-20 16:08) - PLID 43320  have to change cod edue to removal of populating Tratment without Supplier
void CVisionWebOrderDlg::OnCopyLens()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This button is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		// (s.dhole 2010-11-12 11:59) - PLID Swap L to R
		//Check whether any of the fields are filled
		bool bNonEmptyFound = false;
		// (s.dhole 2011-03-29 13:29) - PLID 43035 check  if data exist in Meterial
	
		// (s.dhole 2011-03-29 13:29) - PLID 43035 change Data exists in Treatment  
		//TES 5/22/2011 - PLID 43790 - Renamed
		if(m_arLeftLensTreatments.GetSize()) {
			bNonEmptyFound = true;
		}
	
		CString str;
		GetDlgItemText(IDC_TREATMENT_COMMENTS_L, str);
		if(!str.IsEmpty()) {
			bNonEmptyFound = true;
		}

		if(bNonEmptyFound) {
			if(IDYES != MsgBox(MB_YESNO, "Are you sure you want to copy the OD lens information to the OS lens, overwriting any existing values?")) {
				return;
			}
		}
		GetDlgItemText(IDC_TREATMENT_COMMENTS_R, str);
		SetDlgItemText(IDC_TREATMENT_COMMENTS_L, str);

		//TES 5/22/2011 - PLID 43790 - Remember the original information
		CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
		arOriginalTreatments.Copy(m_arLeftLensTreatments);
		m_arLeftLensTreatments.Copy(m_arRightLensTreatments);
		if(m_arLeftLensTreatments.GetSize() == 0) {
			IRowSettingsPtr pRowR = m_pLensTreatmentsR->CurSel;
			if(pRowR) {
				m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
			}
			else {
				m_pLensTreatmentsL->CurSel = NULL;
			}
			m_nxlTreatmentsL.ShowWindow(SW_HIDE);
			GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
		}
		else if(m_arLeftLensTreatments.GetSize() == 1) {
			m_pLensTreatmentsL->SetSelByColumn(ltcID, m_arLeftLensTreatments[0].nTreatmentID);
			m_nxlTreatmentsL.ShowWindow(SW_HIDE);
			GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
		}
		else {
			m_nxlTreatmentsL.SetText(m_nxlTreatmentsR.GetText());
			GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
			m_nxlTreatmentsL.ShowWindow(SW_SHOWNA);
		}
		//TES 5/22/2011 - PLID 43790 - Now update the service codes
		UpdateTreatmentServiceCodesL(arOriginalTreatments, m_arRightLensTreatments);
		
		IRowSettingsPtr pRow = m_pThicknessType->CurSel;
		// (s.dhole 2013-05-21 10:58) - PLID 56558 also need to check empty value from <None>
		if(pRow && VarString(pRow->GetValue(ttcCode)) != "DRS" && VarString(pRow->GetValue(ttcCode)) != "") {
			CString strThickness;
			GetDlgItemText(IDC_THICKNESS_R, strThickness);
			SetDlgItemText (IDC_THICKNESS_L, strThickness);
		}
		CheckForIdentical();// (s.dhole 2011-06-08 16:03) - PLID 43320
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2011-06-08 16:03) - PLID 43320
void CVisionWebOrderDlg::CheckForIdentical()
{
	try {
		if(!m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - Check if the rest of the lens fields are also identical; if so, we should go back to 
			// synchronizing the lenses.
			m_bLensesIdentical = true;

			//TES 12/6/2010 - PLID 41730 - Material
			long nMaterialIDL = -1, nMaterialIDR = -1;
			IRowSettingsPtr pRow = m_pLensMaterialL->CurSel;
			if(pRow) {
				nMaterialIDL = VarLong(pRow->GetValue(lmcID),-1);
			}
			pRow = m_pLensMaterialR->CurSel;
			if(pRow) {
				nMaterialIDR = VarLong(pRow->GetValue(lmcID),-1);
			}
			if(nMaterialIDL != nMaterialIDR) {
				m_bLensesIdentical = false;
			}

			//TES 12/6/2010 - PLID 41730 - Treatments
			if(m_arLeftLensTreatments.GetSize() != m_arRightLensTreatments.GetSize()) {
				m_bLensesIdentical = false;
			}
			else {
				for(int i = 0; i < m_arLeftLensTreatments.GetSize() && m_bLensesIdentical; i++) {
					bool bMatchFound = false;
					for(int j = 0; j < m_arRightLensTreatments.GetSize() && !bMatchFound; j++) {
						if(m_arLeftLensTreatments[i].nTreatmentID  == m_arRightLensTreatments[j].nTreatmentID) {
							bMatchFound = true;
						}
					}
					if(!bMatchFound) {
						m_bLensesIdentical = false;
					}
				}
			}

			//TES 12/6/2010 - PLID 41730 - Treatment Comments
			CString strCommentsL, strCommentsR;
			GetDlgItemText(IDC_TREATMENT_COMMENTS_L, strCommentsL);
			GetDlgItemText(IDC_TREATMENT_COMMENTS_R, strCommentsR);
			if(strCommentsL != strCommentsR) {
				m_bLensesIdentical = false;
			}
		}
	}NxCatchAll(__FUNCTION__);

}

// (s.dhole 2010-11-15 15:09) - PLID 
// (s.dhole 2011-05-20 16:08) - PLID 43320  have to change cod edue to removal of populating Tratment without Supplier
void CVisionWebOrderDlg::OnCopyLensDesign()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This button is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		// (s.dhole 2010-11-12 11:59) - PLID Swap L to R
		//Check whether any of the fields are filled
		bool bNonEmptyFound = false;
		IRowSettingsPtr pRow = m_pLensDesignL->CurSel;
		if(pRow) {
			bNonEmptyFound = true;
		}
		pRow = m_pLensMaterialL->CurSel;
		if(pRow) {
			bNonEmptyFound = true;
		}

		if(bNonEmptyFound) {
			if(IDYES != MsgBox(MB_YESNO, "Are you sure you want to copy the OD lens information to the OS lens, overwriting any existing values?")) {
				return;
			}
		}

		pRow = m_pLensDesignR->CurSel;
		if(pRow) {
			m_pLensDesignL->SetSelByColumn(ldcID,pRow->GetValue(ldcID));
			// (j.dinatale 2013-03-29 09:20) - PLID 56161 - need to copy line items, dont need to call the event handle
			BOOL bBillPerLens = VarBool(pRow->GetValue(ldcBillPerLens), FALSE);
			CopyLineItems(OrderServiceListType::Designs, true, bBillPerLens);
			m_nLeftDesignID = m_nRightDesignID;
			m_bLeftDesignBillPerLens = m_bRightDesignBillPerLens;
		}
		else {
			m_pLensDesignL->CurSel = NULL;
			// (j.dinatale 2013-03-29 09:20) - PLID 56161 - remove items if something goes wrong
			RemoveLineItems(OrderServiceListType::Designs, true);
			m_nLeftDesignID = -1;
			m_bLeftDesignBillPerLens = FALSE;
		}
		//TES 5/22/2011 - PLID 43790 - Call the handler to make sure any service codes are updated
		//OnSelChosenVisionwebLensDesignL(m_pLensDesignL->CurSel);
		// (s.dhole 2011-06-08 16:03) - PLID 43320
	
		
		// (s.dhole 2011-03-29 13:29) - PLID 43035 set both Treatemt
		pRow = m_pLensMaterialR->CurSel;
		if(pRow) {
			m_pLensMaterialL->SetSelByColumn(lmcID,pRow->GetValue(lmcID));
			// (j.dinatale 2013-03-29 09:20) - PLID 56161 - need to copy line items, dont need to call the event handle
			BOOL bBillPerLens = VarBool(pRow->GetValue(lmcBillPerLens), FALSE);
			CopyLineItems(OrderServiceListType::Materials, true, bBillPerLens);
			m_nLeftMaterialID = m_nRightMaterialID;
			m_bLeftMaterialBillPerLens = m_bRightMaterialBillPerLens;
		}
		else {
			m_pLensMaterialL->CurSel = NULL;
			// (j.dinatale 2013-03-29 09:20) - PLID 56161 - remove items if something goes wrong
			RemoveLineItems(OrderServiceListType::Materials, true);
			m_nLeftMaterialID = -1;
			m_bLeftMaterialBillPerLens = FALSE;
		}

		CheckForIdentical();

		//TES 5/22/2011 - PLID 43790 - Call the handler to make sure the service codes are updated
		// (j.dinatale 2013-04-09 12:48) - PLID 56161 - no, dont call the event handle...

		// (j.dinatale 2013-03-29 09:20) - PLID 56161 - need to refresh our lists
		RefreshServiceList();
		RefreshSupplierList();
	}NxCatchAll(__FUNCTION__);
}

CString CVisionWebOrderDlg::GetGeneratedDescription()
{
	CString strDescription;

	//TES 10/29/2010 - PLID 41197 - We'll go with "<Order Type> for <Patient Name>"
	//TES 10/29/2010 - PLID 41197 - If there's no order type selected, just go with "Glasses Order" (that's the dialog caption) for now.
	//TES 11/12/2010 - PLID 41197 - Actually, it turns out that VisionWeb only supports one order type for now, "Spectacle Lens Order",
	// so just use that.
	//TES 5/25/2011 - PLID 43737 - We now have two options
	CString strOrderType;
	switch(m_vwot) {
		case vwotSpectacleLens:
			strOrderType = "Spectacle Lens Order";
			break;
		default:
			ASSERT(FALSE);
		
	}

	IRowSettingsPtr pRow;
	CString strPatientName;
	pRow = m_pPatient->CurSel;
	if(pRow) {
		strPatientName = VarString(pRow->GetValue(pcName),"");
	}
	else if(m_pPatient->IsComboBoxTextInUse) {
		strPatientName = CString((LPCTSTR)m_pPatient->ComboBoxText);
	}
	strDescription = strOrderType; 
	if(!strPatientName.IsEmpty()) {
		strDescription += " for " + strPatientName;
	}

	return strDescription;
}

void CVisionWebOrderDlg::UpdateDescription()
{
	//TES 10/29/2010 - PLID 41197 - If we're supposed to keep the description in sync, then do it.
	if(m_bAutoGenerateDescription) {
		SetDlgItemText(IDC_VISIONWEB_ORDER_DESCRIPTION, GetGeneratedDescription());
	}
}

// (c.haag 2010-11-29) - PLID 41124 - Update the title bar text based on the selected patient
//TES 12/14/2010 - PLID 41106 - Changed function name; this updates all patient-related data (which now includes vision plans).
void CVisionWebOrderDlg::ReflectCurrentPatient()
{
	CString strPatientName;
	//TES 12/14/2010 - PLID 41106 - We also need to pull the ID.
	long nPatientID = -1;
	IRowSettingsPtr pRow = m_pPatient->CurSel;
	if(pRow) {
		strPatientName = VarString(pRow->GetValue(pcName));
		//TES 12/14/2010 - PLID 41106 - Get the ID.
		nPatientID = VarLong(pRow->GetValue(pcID));
	}
	else {
		//Must be inactive
		strPatientName = m_strSavedPatientName;
	}
	strPatientName.TrimRight(); // Trim off empty middle name spaces

	// Change the title bar text
	//TES 5/25/2011 - PLID 43737 - We now have two options for the order type
	//TES 6/10/2011 - PLID 43737 - Also, I replaced Spectacle Lens Order with Glasses Order, and replaced the hard-coded "Glasses Order" 
	// in the various descriptions with just m_strOrderType
	CString strOrderType  = "Glasses Order";
	//switch(m_vwot) {
	//	case vwotContactLensPatient:
	//		strOrderType = "Contact Lens Order";
	//		break;
	//	default:
	//		ASSERT(FALSE);
	//	case vwotSpectacleLens:
	//		// (j.jones 2011-08-23 08:44) - PLID 45121 - fixed spelling of Glasses
	//		strOrderType = "Glasses Order";
	//		break;
	//}

	// (s.dhole 2011-03-29 18:33) - PLID 43035 Added order #, visionWeb order # and Submission date 
	if (strPatientName.IsEmpty() ) {
		SetWindowText(strOrderType);
	} else if ( m_nOrderID<=0)
	{
		SetWindowText(strPatientName + " - " + strOrderType );
	}
	else
	{
		SetWindowText(strPatientName + " - " + strOrderType + " #: " +  AsString(m_nOrderID) +  m_strVisoinWebOrderID_DT );
	}

	//TES 12/14/2010 - PLID 41106 - Requery the list of vision plans, if your patient ID has changed.
	if(m_nPatientID != nPatientID) {
		m_nPatientID = nPatientID;
		// (s.dhole 2012-05-14 11:24) - PLID 49992 Show all vision plan
		// (s.dhole 2012-06-05 10:37) - PLID 50777 Alow only primary
		// (r.goldschmidt 2014-04-03 16:46) - PLID 56699 - just show all plans
		CString strWhere = FormatString(" (InsuredPartyT.PatientID = %li)", m_nPatientID);
		m_pVisionPlans->WhereClause = _bstr_t(strWhere);
		m_pVisionPlans->Requery();
		
		
	}

	// (s.dhole 2012-04-25 13:04) - PLID 49968  if user change patient than cleare out emn setting
	if(m_nEMNPatientID	== nPatientID ){
		if (m_nEmnID<1 && m_nLastEMN >0){
			m_nEmnID =m_nLastEMN ;
		}
	}
	else{
		m_nEmnID =-1;
	}
	ReflectEmn();

	// (s.dhole 2012-01-18 13:24) - PLID 47455 if patient is selected then enable it 
	if ( m_nPatientID>0 ){
		GetDlgItem(IDC_VISION_PLANS)->EnableWindow(m_bIsGlassesBilled==FALSE);
		GetDlgItem(IDC_SELECT_PRISCRIPTION)->EnableWindow(TRUE);
	}
	else{
		GetDlgItem(IDC_VISION_PLANS)->EnableWindow(FALSE);
		GetDlgItem(IDC_SELECT_PRISCRIPTION)->EnableWindow(FALSE);
	}
}

void CVisionWebOrderDlg::OnSelChosenVisionwebPatient(LPDISPATCH lpRow)
{
	try {
		m_nPendingPatientID = -1;
		//TES 10/29/2010 - PLID 41197 - The auto-generated description may have changed
		UpdateDescription();
		// (c.haag 2010-11-29) - PLID 41124 - Update the title bar text based on the selected patient
		//TES 12/14/2010 - PLID 41106 - Renamed
		ReflectCurrentPatient();

		//TES 5/16/2011 - PLID 43701 - Load the patient's previous Rx info, if appropriate
		LoadLastPatientRx();

		//(c.copits 2011-09-22) PLID 43743 - Add a warning if they attempt to enter two orders for the same patient on the same day
		if (CheckDoesPatientHaveOrderToday()) {
			MessageBox("An order has already been entered for this patient today.", NULL, MB_OK|MB_ICONWARNING);
		}

	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenVisionwebOrderType(LPDISPATCH lpRow)
{
	try {
		//TES 10/29/2010 - PLID 41197 - The auto-generated description may have changed
		UpdateDescription();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedVisionwebPatient(short nFlags)
{
	try {
		//TES 10/29/2010 - PLID 41197 - Now that we've loaded the patient, see whether our description is the auto-generated one.
		CheckDescription();
		// (c.haag 2010-11-29) - PLID 41124 - Update the title bar text based on the selected patient
		//TES 12/14/2010 - PLID 41106 - Renamed
		ReflectCurrentPatient();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::CheckDescription()
{
	//TES 10/29/2010 - PLID 41197 - If the description is empty, or if it's the same as what we would auto-generate, then keep updating
	// it as things change.  Otherwise, leave it alone.
	CString strDescription;
	GetDlgItemText(IDC_VISIONWEB_ORDER_DESCRIPTION, strDescription);
	if(strDescription.IsEmpty() || strDescription == GetGeneratedDescription()) {
		m_bAutoGenerateDescription = true;
	}
	else {
		m_bAutoGenerateDescription = false;
	}
}
void CVisionWebOrderDlg::OnKillfocusVisionwebOrderDescription()
{
	try {
		//TES 10/29/2010 - PLID 41197 - Check whether the description is still the auto-generated one
		CheckDescription();
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-15 16:12) - PLID 48821 Rewrite logic to support multiple service code link
void CVisionWebOrderDlg::OnSelChosenVisionwebLensDesignR(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//TES 12/6/2010 - PLID 41730 - Check whether we should copy this down to the OS lens.
		IRowSettingsPtr pRow(lpRow);
		if(!pRow){
			return;
		}

		long nDesignID = -1;
		BOOL bNewBillPerLens = FALSE;
		bool bPrompt = false;
		if(pRow) {
			nDesignID = VarLong(pRow->GetValue(ldcID));
			bPrompt = !!VarBool(pRow->GetValue(ldcPrompt), FALSE);
			bNewBillPerLens = VarBool(pRow->GetValue(ldcBillPerLens), FALSE);
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - if they reselect a design/material, ignore the selection
		if(m_nRightDesignID == nDesignID){
			return;
		}

		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - If we have an OS lens, then copy.
			CString strSphereL;
			GetDlgItemText(IDC_SPHERE_L, strSphereL);
			if(!strSphereL.IsEmpty()) {
				if(pRow) {
					m_pLensDesignL->SetSelByColumn(ldcID, pRow->GetValue(ldcID));
				}
				else {
					m_pLensDesignL->CurSel = NULL;
				}
				//TES 5/22/2011 - PLID 43790 - Call the handler to make sure any service codes are updated
				OnSelChosenVisionwebLensDesignL(m_pLensDesignL->CurSel);
				m_nLeftDesignID = nDesignID;
			}else{
				// (j.dinatale 2013-04-18 11:56) - PLID 55936 - at this point the lenses are not identical
				m_bLensesIdentical = false;
			}
		}
		//TES 12/8/2010 - PLID 41715 - Now reflect whether or not either of the currently selected designs has any custom parameters.
		IRowSettingsPtr pRowL = m_pLensDesignL->CurSel;
		if((pRow && VarLong(pRow->GetValue(ldcHasParams))) || (pRowL && VarLong(pRowL->GetValue(ldcHasParams)))) {
			m_bDesignHasParameters = true;
			m_nxbCustomize.EnableWindow(TRUE);
		}
		else {
			m_bDesignHasParameters = false;
			m_arCustomParams.RemoveAll();
			m_nxbCustomize.EnableWindow(FALSE);
		}
		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - handle prompting when necessary
		if(bPrompt){
			if(HandlePrompt(OrderServiceListType::Designs, false, m_nRightDesignID, nDesignID, m_bRightDesignBillPerLens, bNewBillPerLens, m_bLensesIdentical)){
				m_nRightDesignID = nDesignID;
				m_bRightDesignBillPerLens = bNewBillPerLens;
				RefreshServiceList();
			}
			RefreshSupplierList();
			return;
		}

		if(m_nRightDesignID != nDesignID || m_bRightDesignBillPerLens   ) {
			
			// if old is bill perLens is true then remove from current item
			// if old is not billperLens and both Eye does not have same design  then remove it
			// (s.dhole 2012-03-15 16:12) - PLID 48821 Remove deleted code
		
			m_bParameterListLoaded = false;
			BOOL bExist=FALSE;

			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - leverage my new function to remove line items of a specific type
			RemoveLineItems(OrderServiceListType::Designs, false);
			
			_RecordsetPtr rsCPTId = CreateParamRecordset("SELECT * FROM GlassesCatalogDesignsCptT WHERE GlassesCatalogDesignsID = {INT} ", nDesignID);
			while(!rsCPTId ->eof) {
				long nNewCptID =AdoFldLong(rsCPTId , "CptId");
				// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
				HandleServiceProcessing(OrderServiceListType::Designs, false, nDesignID, nNewCptID, bNewBillPerLens);
				rsCPTId->MoveNext();  
			}

			m_bRightDesignBillPerLens = bNewBillPerLens;
			m_nRightDesignID = nDesignID;
			RefreshServiceList();  
			RefreshSupplierList();
		}
	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-03-15 16:12) - PLID 48821 Rewrite logic to support multiple service code link
void CVisionWebOrderDlg::OnSelChosenVisionwebLensDesignL(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);
		IRowSettingsPtr pRow(lpRow);
		if(!pRow){
			return;
		}

		long nDesignID = -1;
		bool bPrompt = false;
		BOOL bNewBillPerLens = FALSE;
		if(pRow) {
			nDesignID = VarLong(pRow->GetValue(ldcID));
			bPrompt = !!VarBool(pRow->GetValue(ldcPrompt), FALSE);
			bNewBillPerLens = VarBool(pRow->GetValue(ldcBillPerLens), FALSE);
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - if they reselect a design/material, ignore the selection
		if(m_nLeftDesignID == nDesignID){
			return;
		}

		IRowSettingsPtr pRowR = m_pLensDesignR->CurSel;
		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - The lenses may no longer be identical.
			if(pRow) {
				if(pRowR) {
					if(VarLong(pRow->GetValue(ldcID)) != VarLong(pRowR->GetValue(ldcID))) {
						m_bLensesIdentical = false;
					}
				}
				else {
					m_bLensesIdentical = false;
				}
			}
			else {
				if(pRowR) {
					m_bLensesIdentical = false;
				}
			}
		}

		//TES 12/8/2010 - PLID 41715 - Now reflect whether either of our current designs has any custom parameters.
		if((pRow && VarLong(pRow->GetValue(ldcHasParams))) || (pRowR && VarLong(pRowR->GetValue(ldcHasParams)))) {
			m_bDesignHasParameters = true;
			m_nxbCustomize.EnableWindow(TRUE);
		}
		else {
			m_bDesignHasParameters = false;
			m_arCustomParams.RemoveAll();
			m_nxbCustomize.EnableWindow(FALSE);
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - handle prompting when necessary
		if(bPrompt){
			if(HandlePrompt(OrderServiceListType::Designs, true, m_nLeftDesignID, nDesignID, m_bLeftDesignBillPerLens, bNewBillPerLens, false)){
				m_nLeftDesignID = nDesignID;
				m_bLeftDesignBillPerLens = bNewBillPerLens;
				RefreshServiceList();
			}
			RefreshSupplierList();
			return;
		}

		//Remove Treatment per Lense
		if(m_nLeftDesignID  != nDesignID || m_bLeftDesignBillPerLens) {
			
			// if old is bill perLens is true then remove from current item
			// if old is not billperLens and both Eye does not have same design  then remove it
			// (s.dhole 2012-03-08 09:23) - PLID 48821
	
			m_bParameterListLoaded = false;
			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - leverage my new function to remove line items of a specific type
			RemoveLineItems(OrderServiceListType::Designs, true);

			// we have to check all the rows 
			_RecordsetPtr rsCPTId = CreateParamRecordset("SELECT * FROM GlassesCatalogDesignsCptT"
			" WHERE GlassesCatalogDesignsID = {INT} ", nDesignID);
			while(!rsCPTId ->eof) {
				long nNewCptID =AdoFldLong(rsCPTId , "CptId");
				// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
				HandleServiceProcessing(OrderServiceListType::Designs, true, nDesignID, nNewCptID, bNewBillPerLens);
				rsCPTId->MoveNext();  
			}
	
			m_bLeftDesignBillPerLens  = bNewBillPerLens;
			m_nLeftDesignID = nDesignID;
			RefreshServiceList();  
			RefreshSupplierList();
		}
	}NxCatchAll(__FUNCTION__);
}


void CVisionWebOrderDlg::RefreshSupplierList()
{
	//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
	if(m_vwot != vwotSpectacleLens) {
		return;
	}

	CString strWhere;

	//TES 11/18/2010 - PLID 40539 - This is all suppliers that are linked to the current location and are linked to either currently
	// selected design (unless both designs are blank, in which case we just filter on the current location)
	//TES 2/18/2010 - PLID 40539 - Filter out inactive suppliers.
	//TES 2/21/2010 - PLID 40539 - But make sure not to filter out any supplier already associated with this order in data.
	// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
	// (s.dhole 2011-03-29 12:03) - PLID 43035 remove VisionWeb filter so user can select non visionweb location
	// (s.dhole 2011-04-21 11:45) - PLID 43040 we need to show inactive Supplier only on Edit order screen 
	CString strFrom = FormatString(" SupplierT INNER JOIN \r\n"
		" PersonT ON SupplierT.PersonID = PersonT.ID LEFT OUTER JOIN \r\n"
		" GlassesSupplierLocationsT \r\n"
		" ON (SupplierT.PersonID = GlassesSupplierLocationsT.SupplierID AND GlassesSupplierLocationsT.LocationID = %li)",m_nLocationID );
	m_pSupplier->FromClause = _bstr_t(strFrom );
	strWhere.Format("(SupplierT.PersonID in (Select SupplierID From GlassesOrderT where ID=%li) OR PersonT.Archived = 0) AND  ("
		" (SupplierT.PersonID IN (SELECT GlassesSupplierCatalogDesignsT.SupplierID  "
		" FROM GlassesSupplierCatalogDesignsT  "
		" WHERE (GlassesSupplierCatalogDesignsT.IsActive = 1) "
		" AND (GlassesSupplierCatalogDesignsT.GlassesCatalogDesignsID IN (%li,%li) "
		" OR (%li = -1 AND %li = -1))))) ", 
		m_nOrderID , m_nLeftDesignID, m_nRightDesignID, m_nLeftDesignID, m_nRightDesignID);
	m_pSupplier->WhereClause = _bstr_t(strWhere);
	m_pSupplier->Requery();
	//(s.dhole 2012-02-08 17:18) - PLID 48033 Suppliere can be optional
	// Append first Row and  <None>
	IRowSettingsPtr pNewRow;
	pNewRow = m_pSupplier->GetNewRow();
	pNewRow->PutValue(scID, (long)-1);
	pNewRow->PutValue(scName, _bstr_t(" <None> "));
	pNewRow->PutValue(scArchived, (bool)FALSE);
	m_pSupplier->AddRowBefore(pNewRow, m_pSupplier->GetFirstRow());
	SetSupplier();
}
void CVisionWebOrderDlg::OnRequeryFinishedVisionwebSupplier(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			//TES 12/15/2010 - PLID 45039 - Sometimes the supplier list will still claim that IsRequerying is true, so since we know that
			// it's not really requerying at this point, tell SetSupplier() to go ahead anyway.
			SetSupplier(true);
		}
	} NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::AutoCheckSubmitBox()
{
	//TES 11/17/2010 - PLID 41528 - If the preference is set, then check the "Submit To VisionWeb" box, otherwise leave it alone.
	//TES 5/25/2011 - PLID 43737 - Contact lens orders can't be sent to VisionWeb
	if(m_vwot == vwotSpectacleLens && GetRemotePropertyInt("VisionWeb_AutoCheckSubmit", 1, 0, "<None>")) {
		CheckDlgButton(IDC_SUBMIT_TO_VISIONWEB, BST_CHECKED);
	}
}
void CVisionWebOrderDlg::OnRequeryFinishedVisionwebFrameType(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
		
			// (s.dhole 2012-02-21 12:00) - PLID 47396 
			//if(m_nFrameTypeID != -1) {
				IRowSettingsPtr pRow =m_pFrameType->FindByColumn(ftcID, m_nFrameTypeID, NULL, g_cvarTrue);
				if (!pRow)
				{
					m_pFrameType->FindByColumn(ftcID, (long)-1, NULL, g_cvarTrue);
				}

			//}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensMaterialR(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			// (s.dhole 2012-02-02 17:32) - PLID 
			//if(m_nRightMaterialID != -1) {
				m_pLensMaterialR->FindByColumn(lmcID, m_nRightMaterialID, NULL, g_cvarTrue);
			//}
			//TES 6/8/2011 - PLID 43790 - Make sure billing information gets updated
			// (j.dinatale 2013-03-29 09:20) - PLID 55936 - no idea why we were requerying here... they should be forced to reselect the material
			/*IRowSettingsPtr pRow = m_pLensMaterialR->CurSel;
			long nNewRightMaterialID = -1;
			if(pRow) {
				nNewRightMaterialID = VarLong(pRow->GetValue(lmcID),-1);
			}
			UpdateRightMaterialID(nNewRightMaterialID, pRow);*/
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensMaterialL(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			// (s.dhole 2012-02-02 17:32) - PLID 
			//if(m_nLeftMaterialID != -1) {
				m_pLensMaterialL->FindByColumn(lmcID, m_nLeftMaterialID, NULL, g_cvarTrue);
			//}
			//TES 6/8/2011 - PLID 43790 - Make sure billing information gets updated
			// (j.dinatale 2013-03-29 09:20) - PLID 55936 - no idea why we were requerying here... they should be forced to reselect the material
			/*IRowSettingsPtr pRow = m_pLensMaterialL->CurSel;
			long nNewLeftMaterialID = -1;
			if(pRow) {
				nNewLeftMaterialID = VarLong(pRow->GetValue(lmcID),-1);
			}
			UpdateLeftMaterialID(nNewLeftMaterialID, pRow);*/

		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensDesignR(short nFlags)
{
	try {
		//TES 2/16/2011 - PLID 40539 - If there are no designs for this location, they're not going to be able to do anything.
		// (s.dhole 2011-03-29 16:10) - PLID 43035 Since we are not filtering any information base on visionWeb we can remocve this code
		/*if(m_pLensDesignR->GetRowCount() == 0) {
			MsgBox("The selected location is not associated with any Lens Designs.  Please choose a different location, or go to VisionWeb Account Setup to dds
			catalog information to this location.");
		}*/

		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			//(s.dhole 2012-02-08 17:18) - PLID 48033 Selecte design including -1
			//if(m_nRightDesignID > 0) {
				m_pLensDesignR->FindByColumn(ldcID, m_nRightDesignID, NULL, g_cvarTrue);
			//}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensDesignL(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			//(s.dhole 2012-02-08 17:18) - PLID 48033 Selecte design including -1
			//if(m_nLeftDesignID > 0) {
				m_pLensDesignL->FindByColumn(ldcID, m_nLeftDesignID, NULL, g_cvarTrue);
			//}
		}
	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2011-05-02 14:02) - PLID 43341 make sure we refresh label as well as dropdown
void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensTreatmentR(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			//TES 5/22/2011 - PLID 43790 - Changed the DWord array to an array of structs
				CArray<TreatmentInformation,TreatmentInformation&> arRightLensTreatments;
				CString strTreatmentNames;
				for(int i = 0; i < m_arRightLensTreatments.GetSize(); i++) {
					// check if record exist in dropdown and reate tepm array
					IRowSettingsPtr pRow = m_pLensTreatmentsR->FindByColumn(ltcID, m_arRightLensTreatments[i].nTreatmentID, NULL, g_cvarFalse);
					if (pRow !=NULL)
					{
						arRightLensTreatments.Add(m_arRightLensTreatments[i]) ;
						strTreatmentNames += VarString(pRow->GetValue(ltcName), "") + ", ";
					}

				}

				//TES 5/24/2011 - PLID 43790 - Track if the array changes
				CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
				arOriginalTreatments.Copy(m_arRightLensTreatments);
				
				m_arRightLensTreatments.RemoveAll();
				CWnd* pWnd =GetFocus();
				// Copy item array into main array
				m_arRightLensTreatments.Copy(arRightLensTreatments) ;
				if(arRightLensTreatments.GetSize() ==0 ) {
					
					m_nxlTreatmentsR.ShowWindow(SW_HIDE);
					GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_SHOW);
					if (pWnd!=NULL) 
						pWnd->SetFocus();	
				}
				else if(arRightLensTreatments.GetSize() >= 1) {
					m_pLensTreatmentsR->FindByColumn(ltcID, arRightLensTreatments[0].nTreatmentID, NULL, g_cvarTrue);
					strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
					m_nxlTreatmentsR.SetText(strTreatmentNames);
					if (arRightLensTreatments.GetSize() == 1)
					{
						m_nxlTreatmentsR.ShowWindow(SW_HIDE);
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_SHOW);
						if (pWnd!=NULL) 
							pWnd->SetFocus();	
					}
					else
					{
						m_nxlTreatmentsR.ShowWindow(SW_SHOW );
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_HIDE);
					}
				}
				arRightLensTreatments.RemoveAll(); 

				//TES 5/24/2011 - PLID 43790 - Now update service codes as needed
				UpdateTreatmentServiceCodesR(arOriginalTreatments);

		}

	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2011-05-02 14:02) - PLID 43341 make sure we refresh label as well as dropdown
void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLensTreatmentL(short nFlags)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			//TES 5/22/2011 - PLID 43790 - Changed the DWord array to an array of structs
				CArray<TreatmentInformation,TreatmentInformation&> arLeftLensTreatments;
				CString strTreatmentNames;
				for(int i = 0; i < m_arLeftLensTreatments.GetSize(); i++) {
					IRowSettingsPtr pRow =m_pLensTreatmentsL->FindByColumn(ltcID, m_arLeftLensTreatments[i].nTreatmentID, NULL, g_cvarFalse);
					if (pRow !=NULL)
					{
						arLeftLensTreatments.Add(m_arLeftLensTreatments[i]) ;
						strTreatmentNames += VarString(pRow->GetValue(ltcName), "") + ", ";
					}

				}

				//TES 5/24/2011 - PLID 43790 - Track if the array changes
				CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
				arOriginalTreatments.Copy(m_arLeftLensTreatments);

				m_arLeftLensTreatments.RemoveAll();
				m_arLeftLensTreatments.Copy(arLeftLensTreatments) ;
				//to set last focused object
				CWnd* pWnd =GetFocus();
				if(arLeftLensTreatments.GetSize() ==0 ) {
					m_nxlTreatmentsL.ShowWindow(SW_HIDE);
					GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
					if (pWnd!=NULL) 
						pWnd->SetFocus();	
				}
				else if(arLeftLensTreatments.GetSize() >= 1) {
					m_pLensTreatmentsL->FindByColumn(ltcID, arLeftLensTreatments[0].nTreatmentID, NULL, g_cvarTrue);
						strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
						m_nxlTreatmentsL.SetText(strTreatmentNames);
						if (arLeftLensTreatments.GetSize() == 1)
						{
							m_nxlTreatmentsL.ShowWindow(SW_HIDE);
							GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_SHOW);
							// if object is not null then set fiocus back to same on
							if (pWnd!=NULL) 
								pWnd->SetFocus();	
						}
						else
						{
							m_nxlTreatmentsL.ShowWindow(SW_SHOW);
							GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
						}
					}
					arLeftLensTreatments.RemoveAll(); 

					//TES 5/24/2011 - PLID 43790 - Now update service codes
					UpdateTreatmentServiceCodesL(arOriginalTreatments, m_arRightLensTreatments);
		}
			
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::ReflectUsedLenses()
{
	//TES 12/2/2010 - PLID 40539 - If a lens doesn't have a sphere value filled in, disable all the fields (except the sphere)
	CString strSphere;
	GetDlgItemText(IDC_SPHERE_L, strSphere);
	BOOL bEnableL = (strSphere.IsEmpty()?FALSE:TRUE);
	GetDlgItem(IDC_CYLINDER_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_AXIS_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_ADDITION_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_PRISM_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_SECONDARY_PRISM_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_BASE_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_SECONDARY_BASE_L)->EnableWindow(bEnableL);; // (s.dhole, 2011-12-07 12:29) - PLID 46883 -  base2 
	GetDlgItem(IDC_DIST_PD_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_NEAR_PD_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_HEIGHT_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_VISIONWEB_LENS_DESIGN_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_VISIONWEB_LENS_MATERIAL_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_TREATMENTS_LABEL_L)->EnableWindow(bEnableL);
	GetDlgItem(IDC_TREATMENT_COMMENTS_L)->EnableWindow(bEnableL);
	IRowSettingsPtr pRow;
	if (bEnableL==FALSE)
	{
		
		pRow = m_pLensDesignL->FindByColumn(ldcID, -1, NULL, g_cvarTrue);  
		OnSelChosenVisionwebLensDesignL(pRow);
		pRow = m_pLensMaterialL ->FindByColumn(lmcID, -1, NULL, g_cvarTrue);  
		OnSelChosenVisionwebLensMaterialL(pRow);
		pRow = m_pLensTreatmentsL ->FindByColumn(ltcID , -1, NULL, g_cvarTrue);  
		OnSelChosenVisionwebLensTreatmentL(pRow);
	}
	//TES 1/27/2011 - PLID 40539 - The thickness should only be enabled if an appropriate Thickness Type is selected.
	pRow = m_pThicknessType->CurSel;
	// (s.dhole 2013-05-21 10:58) - PLID 56558 also need to check empty value from <None>
	BOOL bEnableThickness = (pRow && VarString(pRow->GetValue(ttcCode)) != "DRS" && VarString(pRow->GetValue(ttcCode)) != "");
	GetDlgItem(IDC_THICKNESS_L)->EnableWindow(bEnableL && bEnableThickness);

	GetDlgItemText(IDC_SPHERE_R, strSphere);
	BOOL bEnableR = (strSphere.IsEmpty()?FALSE:TRUE);
	GetDlgItem(IDC_CYLINDER_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_AXIS_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_ADDITION_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_PRISM_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_SECONDARY_PRISM_R)->EnableWindow(bEnableR); 
	GetDlgItem(IDC_BASE_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_SECONDARY_BASE_R)->EnableWindow(bEnableR); // (s.dhole, 2011-12-07 12:29) - PLID 46883 -  base2 
	GetDlgItem(IDC_DIST_PD_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_NEAR_PD_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_HEIGHT_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_VISIONWEB_LENS_DESIGN_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_VISIONWEB_LENS_MATERIAL_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_TREATMENTS_LABEL_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_TREATMENT_COMMENTS_R)->EnableWindow(bEnableR);
	GetDlgItem(IDC_THICKNESS_R)->EnableWindow(bEnableR && bEnableThickness);

	if (bEnableR==FALSE)
	{
		pRow =  m_pLensDesignR->FindByColumn(ldcID, -1, NULL, g_cvarTrue);  
		OnSelChosenVisionwebLensDesignR(pRow);
		pRow = m_pLensMaterialR ->FindByColumn(lmcID, -1, NULL, g_cvarTrue);  
		OnSelChosenVisionwebLensMaterialR(pRow);
		pRow = m_pLensTreatmentsR ->FindByColumn(ltcID, -1, NULL, g_cvarTrue);  
		OnSelChosenVisionwebLensTreatmentR(pRow);
	}

	
	//TES 1/27/2011 - PLID 40539 - Now enable the copy buttons if both lenses are filled (so as not to be copying from or two disabled fields).
	//TES 2/18/2011 - PLID 40539 - Just check the OD lens for the Copy Prescription button.
	GetDlgItem(IDC_COPY_PRESCRIPTION)->EnableWindow(bEnableR);
	GetDlgItem(IDC_COPY_LENS)->EnableWindow(bEnableL && bEnableR);
	GetDlgItem(IDC_COPY_LENS_DESIGN)->EnableWindow(bEnableL && bEnableR);


}
void CVisionWebOrderDlg::OnEnChangeSphereR()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CNxDialog::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	try {
		//TES 12/2/2010 - PLID 40539 - Enable the other fields if they enter a Sphere value.
		ReflectUsedLenses();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnEnChangeSphereL()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CNxDialog::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	try {
		//TES 12/2/2010 - PLID 40539 - Enable the other fields if they enter a Sphere value.
		ReflectUsedLenses();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedVisionwebLocation(short nFlags)
{
	try {
		if(m_pLocation->GetRowCount() == 0) {
			MsgBox("You do not have any locations or suppliers configured to receive VisionWeb orders.  Please select 'VisionWeb Account Setup' to configure your VisionWeb account.  This dialog will now close.");
			OnCancel();
		}
		//TES 6/2/2011 - PLID 43939 - If we don't have a pending location, then don't set the location to blank.
		if(!m_strPendingLocationName.IsEmpty()) {
			//TES 6/2/2011 - PLID 43939 - Tell SetLocation that the requery is definitely finished now
			SetLocation(m_strPendingLocationName, true);
			m_strPendingLocationName = "";
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenVisionwebLocation(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow != NULL) {
			m_nLocationID = VarLong(pRow->GetValue(lcID));
			//TES 12/9/2010 - PLID 40539 - The designs are refreshed separately.
			RefreshDesignLists();
			RefreshSupplierList();
			//TES 4/13/2011 - PLID 43248 - The list of available products will be different based on the location
			RefreshProducts();
			if (m_bIsGlassesBilled ==FALSE) {
				OnSelChosenFrame(m_pFrame->CurSel );
			}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenVisionwebLensMaterialR(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//TES 5/22/2011 - PLID 43790 - Pull the new Material ID
		IRowSettingsPtr pRow(lpRow);
		if(!pRow){
			return;
		}

		long nMaterialID = -1;
		BOOL bBillPerLens = FALSE;
		bool bPrompt = false;
		if(pRow) {
			nMaterialID = VarLong(pRow->GetValue(lmcID));
			bBillPerLens = VarBool(pRow->GetValue(lmcBillPerLens), FALSE);
			bPrompt = !!VarBool(pRow->GetValue(lmcPrompt), FALSE);
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - if they select the same material/design, ignore them
		if(m_nRightMaterialID == nMaterialID){
			return;
		}

		//TES 12/6/2010 - PLID 41730 - Check whether we should copy this down to the OS lens.
		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - If we have an OS lens, then copy.
			CString strSphereL;
			GetDlgItemText(IDC_SPHERE_L, strSphereL);
			if(!strSphereL.IsEmpty()) {
				if(pRow) {
					m_pLensMaterialL->SetSelByColumn(lmcID, pRow->GetValue(lmcID));
				}
				else {
					m_pLensMaterialL->CurSel = NULL;
				}
				//TES 5/22/2011 - PLID 43790 - Call the handler to make sure the service codes are updated
				OnSelChosenVisionwebLensMaterialL(m_pLensMaterialL->CurSel);
			}else{
				// (j.dinatale 2013-04-18 11:56) - PLID 55936 - at this point the lenses are not identical
				m_bLensesIdentical = false;
			}
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - handle prompting when necessary
		if(bPrompt){
			if(HandlePrompt(OrderServiceListType::Materials, false, m_nRightMaterialID, nMaterialID, m_bRightMaterialBillPerLens, bBillPerLens, m_bLensesIdentical)){
				m_nRightMaterialID = nMaterialID;
				m_bRightMaterialBillPerLens = bBillPerLens;
				RefreshServiceList();
			}
		}else{
			//TES 6/8/2011 - PLID 43790 - Moved this code to its own function
			UpdateRightMaterialID(nMaterialID, pRow);
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenVisionwebLensMaterialL(LPDISPATCH lpRow)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		IRowSettingsPtr pRow(lpRow);
		if(!pRow){
			return;
		}

		long nMaterialID = -1;
		BOOL bBillPerLens = FALSE;
		bool bPrompt = false;
		if(pRow) {
			nMaterialID = VarLong(pRow->GetValue(lmcID));
			bBillPerLens = VarBool(pRow->GetValue(lmcBillPerLens), FALSE);
			bPrompt = !!VarBool(pRow->GetValue(lmcPrompt), FALSE);
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - if they select the same material/design, ignore them
		if(m_nLeftMaterialID == nMaterialID){
			return;
		}

		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - The lenses may no longer be identical.
			IRowSettingsPtr pRowR = m_pLensMaterialR->CurSel;
			if(pRow) {
				if(pRowR) {
					variant_t vt = pRowR->GetValue(lmcID);
					if(VarLong(pRow->GetValue(lmcID)) != VarLong(pRowR->GetValue(lmcID))) {
						m_bLensesIdentical = false;
					}
				}
				else {
					m_bLensesIdentical = false;
				}
			}
			else {
				if(pRowR) {
					m_bLensesIdentical = false;
				}
			}
		}

		// (j.dinatale 2013-03-29 09:20) - PLID 55936 - handle prompting when necessary
		if(bPrompt){
			if(HandlePrompt(OrderServiceListType::Materials, true, m_nLeftMaterialID, nMaterialID, m_bLeftMaterialBillPerLens, bBillPerLens, false)){
				m_nLeftMaterialID = nMaterialID;
				m_bLeftMaterialBillPerLens = bBillPerLens;
				RefreshServiceList();
			}
		}else{
			//TES 6/8/2011 - PLID 43790 - Moved this code to its own function
			UpdateLeftMaterialID(nMaterialID, pRow);
		}
			
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnKillfocusTreatmentCommentsR()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This field is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);
		
		//TES 12/6/2010 - PLID 41730 - Check whether we should copy this down to the OS lens.
		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - If we have an OS lens, then copy.
			CString strSphereL;
			GetDlgItemText(IDC_SPHERE_L, strSphereL);
			if(!strSphereL.IsEmpty()) {
				CString strComments;
				GetDlgItemText(IDC_TREATMENT_COMMENTS_R, strComments);
				SetDlgItemText(IDC_TREATMENT_COMMENTS_L, strComments);
			}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnKillfocusTreatmentCommentsL()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This field is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		if(m_bLensesIdentical) {
			//TES 12/6/2010 - PLID 41730 - The lenses may no longer be identical.
			CString strCommentsL, strCommentsR;
			GetDlgItemText(IDC_TREATMENT_COMMENTS_L, strCommentsL);
			GetDlgItemText(IDC_TREATMENT_COMMENTS_R, strCommentsR);
			if(strCommentsL != strCommentsR) {
				m_bLensesIdentical = false;
			}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnCustomize()
{
	try {
		//TES 5/25/2011 - PLID 43737 - This button is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//TES 12/8/2010 - PLID 41715 - Do we actually have any parameters to modify?
		if(!m_bDesignHasParameters) {
			//TES 12/8/2010 - PLID 41715 - This shouldn't happen! (The button should be disabled).
			ASSERT(FALSE);
			MsgBox("The currently selected Lens Designs are not associated with any custom parameters.");
			return;
		}
		
		//TES 12/8/2010 - PLID 41715 - Make sure our list of parameters is loaded.
		EnsureParameterList();

		//TES 12/8/2010 - PLID 41715 - Now pop up the parameters dialog, it will update our variables.
		CVisionWebOrderParametersDlg dlg(this);
		dlg.m_pOrderDlg = this;
		dlg.DoModal();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::EnsureParameterList()
{
	//TES 12/8/2010 - PLID 41715 - Is it already loaded?
	if(!m_bParameterListLoaded) {
		//TES 5/25/2011 - PLID 43737 - Contact Lens orders don't have parameters
		if(m_vwot == vwotSpectacleLens) {
			//TES 12/8/2010 - PLID 41715 - Nope, pull the current design codes from the lists.
			CString strDesignCodeL, strDesignCodeR;
			IRowSettingsPtr pRow = m_pLensDesignL->CurSel;
			if(pRow) {
				//(s.dhole 2012-02-08 17:18) - PLID 48033 design code = -1 then ""
				if (VarLong (m_pLensDesignL->CurSel->GetValue(ldcID)) !=-1 )
				{
					strDesignCodeL = VarString(pRow->GetValue(ldcCode),"");
				}
			}
			pRow = m_pLensDesignR->CurSel;
			if(pRow) {
				//(s.dhole 2012-02-08 17:18) - PLID 48033 design code = -1 then ""
				if (VarLong (m_pLensDesignR->CurSel->GetValue(ldcID)) !=-1 )
				{
					strDesignCodeR = VarString(pRow->GetValue(ldcCode),"");
				}
			}

			//TES 12/8/2010 - PLID 41715 - Now load all the associated parameters into our list.
			// (s.dhole 2010-03-10 10:18) - PLID 42723 change Db Table and column name changes from VisionWeb To Glasses
			_RecordsetPtr rsParams = CreateParamRecordset("SELECT GlassesCustomParameterT.* "
				"FROM GlassesCustomParameterT INNER JOIN GlassesDesignCustomParameterT "
				"ON GlassesCustomParameterT.GlassesCustomParameterID = GlassesDesignCustomParameterT.GlassesCustomParameterID "
				"WHERE DesignCode IN ({STRING},{STRING})", 
				strDesignCodeL, strDesignCodeR);
			m_arCustomParams.RemoveAll();
			while(!rsParams->eof) {
				VisionWebCustomParam vwcp;
				vwcp.strID = AdoFldString(rsParams, "GlassesCustomParameterID");
				vwcp.nDisplayOrder = AdoFldLong(rsParams, "DisplayOrder",-1);
				vwcp.bIsRequired = AdoFldLong(rsParams, "IsRequired")?true:false;
				vwcp.nMaxLength = AdoFldLong(rsParams, "MaxLength", -1);
				vwcp.dMinValue = AdoFldDouble(rsParams, "MinValue", INVALID_FLOAT_VALUE);
				vwcp.dMaxValue = AdoFldDouble(rsParams, "MaxValue", INVALID_FLOAT_VALUE);
				vwcp.strDefaultValue = AdoFldString(rsParams, "DefaultValue","");
				vwcp.dIncrementValue = AdoFldDouble(rsParams, "IncrementValue", INVALID_FLOAT_VALUE);
				vwcp.nPrecisionValue = AdoFldLong(rsParams, "PrecisionValue", -1);
				vwcp.nScaleValue = AdoFldLong(rsParams, "ScaleValue", -1);
				vwcp.strEyeSite = AdoFldString(rsParams, "EyeSite","");
				vwcp.strName = AdoFldString(rsParams, "ParameterName","");
				m_arCustomParams.Add(vwcp);
				rsParams->MoveNext();
			}
		}
		m_bParameterListLoaded = true;
	}
}


	// (s.dhole 2012-02-02 10:15) - PLID 47396
void CVisionWebOrderDlg::AddFirstRowToFrame()
{
try{
	IRowSettingsPtr pRow ;
	// (s.dhole 2012-05-16 18:20) - PLID 49734 Allow only  if you have frames License
	//If you do not have Frame  License then no need to show this option
	if (g_pLicense->CheckForLicense(CLicense::lcFrames, CLicense::cflrSilent) ){
		pRow = m_pFrame->GetNewRow();
		pRow->PutValue(fcID, (long)-2);
		pRow->PutValue(fcServiceID, (long)-2);
		pRow->PutValue(fcServiceName , _bstr_t(" <Frames...> "));
		pRow->PutValue(fcFPCCode, _bstr_t(""));
		m_pFrame->AddRowBefore(pRow, m_pFrame->GetFirstRow());
	}
	pRow = m_pFrame->GetNewRow();
	pRow->PutValue(fcID, (long)-1);
	pRow->PutValue(fcServiceID, (long)-1);
	pRow->PutValue(fcServiceName , _bstr_t(" <None> "));
	pRow->PutValue(fcFPCCode, _bstr_t(""));
	m_pFrame->AddRowBefore(pRow, m_pFrame->GetFirstRow());
	//m_pFrame->CurSel = m_pFrame->GetFirstRow();
	
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnRequeryFinishedFrame(short nFlags)
{
	try {
		m_bLoadingFrameFromData = false;
		// (s.dhole 2012-04-09 12:05) - PLID 49925
		// check if this product is exist	
		IRowSettingsPtr pRow =m_pFrame->FindByColumn(fcServiceID, m_nFrameProductID, NULL, g_cvarTrue);
		if (!pRow ||  m_nFrameProductID ==-1)
		{
			// check if this Frame is exist
			pRow =m_pFrame->FindByColumn(fcID, m_nFrameID, NULL, g_cvarTrue);
			if (!pRow)
			{
				pRow =m_pFrame->FindByColumn(fcID, (long)-1, NULL, g_cvarTrue);
			}
		}
		if (pRow){
			// (s.dhole 2012-05-15 18:58) - PLID 49925
			// if user check option and save orderre-open a same order ,then ucheck bilable qnt. 
			if (m_bSavedFrameToBeOrdered==TRUE){
				GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(TRUE);
			}
			else{ 
				BOOL bIsBillable=FALSE;
				BOOL bIsTrackableStatus=FALSE;
				CheckFrameProductBillable(m_nFrameProductID,m_nLocationID, bIsBillable,bIsTrackableStatus);
				
				// (s.dhole 2012-05-15 18:58) - PLID 49925
				if (bIsTrackableStatus==TRUE){
					GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(TRUE);
				}
				else{
					SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED,FALSE);
					GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(FALSE);
				}
			}
		}
		GetDlgItem(IDC_FRAME_LODING_LABEL)->ShowWindow(SW_HIDE);
	}NxCatchAll(__FUNCTION__);
}

//TES 12/10/2010 - PLID 45039 - Update the screen to reflect m_nLocationID and strLocationName.
//TES 6/2/2011 - PLID 43939 - Added bRequeryFinished, which will be set to true if this is called from OnRequeryFinished
// (s.dhole 2012-02-20 13:05) - PLID 48249 Order can be without location
void CVisionWebOrderDlg::SetLocation(const CString &strLocationName, bool bRequeryFinished /*= false*/)
{
	//TES 6/2/2011 - PLID 43939 - Sometimes IsRequerying() returns true even in the OnRequeryFinished handler, so if we've been explicitly
	// told that the requery is finished, then ignore what IsRequerying() says.
	if(bRequeryFinished || !m_pLocation->IsRequerying()) {
		//ASSERT(m_nLocationID != -1);
		m_pLocation->SetSelByColumn(lcID, m_nLocationID);
		if(m_pLocation->CurSel == NULL) {
			m_pLocation->ComboBoxText = _bstr_t(strLocationName);
		}
		//TES 4/13/2011 - PLID 43248 - The list of available products will be different based on the location
		RefreshProducts();
	}
	else {
		//TES 12/10/2010 - PLID 45039 - If we're requerying, just remember the name, OnRequeryFinished() will call this function.
		m_strPendingLocationName = strLocationName;
	}
}

void CVisionWebOrderDlg::OnSelChangingVisionwebLocation(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		//TES 12/10/2010 - PLID 45039 - Don't let them select no location.
		if (*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}
	}NxCatchAll(__FUNCTION__);
}

//TES 12/10/2010 - PLID 45039 - Update the screen to reflect m_nSupplierID, warn the user if that supplier is no longer valid.
//TES 12/15/2010 - PLID 45039 - Added bWaitForRequery
void CVisionWebOrderDlg::SetSupplier(bool bWaitForRequery /*= false*/)
{
	//TES 5/25/2011 - PLID 43737 - This is a different list on contact lens orders
	if(m_vwot == vwotSpectacleLens) {
		//TES 12/10/2010 - PLID 45039 - Don't do anything if it's requerying, OnRequeryFinished() will call this function.
		//TES 12/15/2010 - PLID 45039 - Actually, sometimes when this is called from OnRequeryFinished(), IsRequerying() still returns true
		// for some reason, so if bWaitForRequery is true, go ahead with SetSelByColumn.
		if(bWaitForRequery || !m_pSupplier->IsRequerying()) {
			m_pSupplier->SetSelByColumn(scID, m_nSupplierID);
			// (s.dhole 2011-03-30 11:53) - PLID 43237 
			if (!(GetCurrentUserPermissions(bioInvGlassesOrderTab) & ( sptWrite))) {
				GetDlgItem(IDC_CATALOG_SETUP)->EnableWindow(FALSE);
			}
			else{
				// (s.dhole 2012-05-02 11:16) - PLID 49728
				GetDlgItem(IDC_CATALOG_SETUP)->EnableWindow(m_bIsGlassesBilled==FALSE);
			}

			if(m_pSupplier->CurSel == NULL ) {
				
				GetDlgItem(IDC_CATALOG_SETUP)->EnableWindow(FALSE); // (s.dhole 2011-03-30 11:53) - PLID 43039 
				//TES 11/18/2010 - PLID 40539 - OK, this supplier isn't valid, let the user know what's up.
				if(m_nSupplierID > 0) {
					m_nSupplierID = -1;
					m_pSupplier->SetSelByColumn(scID, (long)m_nSupplierID);
					if(m_pSupplier->GetRowCount() == 1) {
						MsgBox("There are no suppliers associated with the currently selected location and lens designs.  "
							"Please select a different location or lens design, or select the VisionWeb Account Setup button on the "
							"Glasses Order tab to associate suppliers with the current location and designs.");
					}
					else {
						MsgBox("The previously selected supplier/lab is not associated with the currently selected location and lens designs.  "
							"Please select a different supplier/lab for this order.");
					}
				}
			}
		}
	}
	else {
		//nothing
	}
	//(c.copits 2011-09-27) PLID 45112 - Disable "Glasses Catalog" button for inactive suppliers
	UpdateGlassesCatalogButton();
}

LRESULT CVisionWebOrderDlg::OnBarcodeScan(WPARAM wParam, LPARAM lParam)
{
	//(r.wilson 5/9/2012) PLID 49193 - if this is a bill then we should shouldn't add anything
	if(m_bIsGlassesBilled == TRUE)
	{
		return 0;
	}

	try {		
		BOOL bCompletedAction = FALSE;

		//TES 5/25/2011 - PLID 43737 - Contact Lens Orders don't have frames
		 if(m_vwot == vwotSpectacleLens) {
			//TES 12/10/2010 - PLID 41109 - See if this barcode is for one of our frames.
			_bstr_t bstrBarCodeDataRaw = (BSTR)lParam;
			IRowSettingsPtr pRow = m_pFrame->FindByColumn(fcBarcode, bstrBarCodeDataRaw, NULL, VARIANT_FALSE);
			if(pRow && pRow != m_pFrame->CurSel) {
				//TES 12/10/2010 - PLID 41109 - It is, so go ahead and select it.
				m_pFrame->CurSel = pRow;
				OnSelChosenFrame(pRow);
				bCompletedAction = TRUE;
			}
		}
		else {
			///nothing
		}

		/*r.wilson 3/5/2012 - PLID 48294
		Try to see if the item scanned was a service code
		*/
		if(bCompletedAction == FALSE)
		{
			if(GetServiceCodeFromBarcode(wParam, lParam) == 1){
				bCompletedAction = TRUE;
			}
		}

		//if none of the three above test passed then check to see if the barcode is in inventory
		 if(bCompletedAction == FALSE)
		{

			if(GetProductCodeFromBarcode(wParam, lParam) == 1){
				bCompletedAction = TRUE;
			}
		}
		
	}NxCatchAll(__FUNCTION__);
	return 0;
}
void CVisionWebOrderDlg::OnRequeryFinishedVisionPlans(short nFlags)
{
	try {
		//TES 12/14/2010 - PLID 41106 - If there's a patient selected that doesn't have any plans, show <None>
		if(m_nPatientID != -1 ) {
			IRowSettingsPtr pRow = m_pVisionPlans->GetNewRow();
			pRow->PutValue(vpcName, _bstr_t(" <None>"));
			pRow->PutValue(vpcPriority, (long)-1);
			// (s.dhole 2012-04-25 17:05) - PLID 49992 
			pRow->PutValue(vpcPersonID, (long)-1);
			m_pVisionPlans->AddRowBefore(pRow, m_pVisionPlans->GetFirstRow());
		}
		// (s.dhole 2012-04-25 17:05) - PLID 49992 
		IRowSettingsPtr pRow ;
		if (m_nOrderID>0 || (m_nPatientID != m_nPendingPatientID  &&  m_nPendingPatientID !=-1) )   {
			// select primary
			pRow = m_pVisionPlans->FindByColumn(vpcPersonID, (long)m_nInsuredPartyID, NULL, g_cvarTrue);
		}
		else{
			// (s.dhole 2012-06-05 10:45) - PLID 50777 Vision will be selected
			pRow = m_pVisionPlans->FindByColumn(vpcCategoryCategoryType, 2L, NULL, g_cvarTrue);
		}
		// If no isnuranc company than select none
		if (!pRow ){
			pRow = m_pVisionPlans->FindByColumn(vpcPersonID, -1L, NULL, g_cvarTrue);
			m_nInsuredPartyID=-1;
		}
		else if  ( VarLong (pRow->GetValue( vpcPersonID) ,-1)>0 ){
			m_nInsuredPartyID=VarLong (pRow->GetValue( vpcPersonID) ,-1);
		}	
		


		if(pRow &&  m_nInsuredPartyID >0 ){
			// (s.dhole 2012-04-20 14:34) - PLID 49729  Set visionPlan  flag
			m_bIsGlassesvisionPlanExist = TRUE;
		}
		else{
			// (s.dhole 2012-04-20 14:34) - PLID 49729  Reset visionPlan  flag
			m_bIsGlassesvisionPlanExist = FALSE; 
		}
		// (s.dhole 2012-03-12 12:51) - PLID 48821
		RefreshServiceList();
		CVisionWebOrderDlg::ApplyVisionPlanSetting();
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChangingVisionwebThicknessType(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);
		if (*lppNewSel == NULL) {
			//TES 2/21/2011 - PLID 40539 - Don't let them select nothing, change it back to the old row
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2011-03-21 18:56) - PLID 42898 Show Glasses Order report 
void CVisionWebOrderDlg::OnBtnOredrPrintPreview()
{
	try {
				//Validate the fields, this will also tell us which lenses to save.
		BOOL bSaveLeftLens = FALSE, bSaveRightLens = FALSE;
		if(!Validate(bSaveLeftLens, bSaveRightLens)) {
			return;
		}

		//Now save
		Save(bSaveLeftLens, bSaveRightLens);
	
		m_bOrderChanged=TRUE;
		CReportInfo  infReport(CReports::gcs_aryKnownReports[CReportInfo::GetInfoIndex(704)]);
		CPrintInfo prInfo;
		CPtrArray aryParams;
		infReport.nExtraID = m_nOrderID; 
		RunReport(&infReport, &aryParams, TRUE, (CWnd*)this, "Glasses Order",  &prInfo);
		ClearRPIParameterList(&aryParams);		//clear our parameters now that the report is done
		// (b.savon 2012-01-10 17:21) - PLID 46663 - Save Column Widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			SaveColumnWidths();
		}

		//TES 3/23/2011 - PLID 42975 - Consolidated this code
		CloseCleanup(IDOK);
		
		CNxDialog::OnOK();
	
	}NxCatchAll(__FUNCTION__);
}
 
// (s.dhole 2011-03-21 18:56) - PLID 42898 Create Show Rx report 
void CVisionWebOrderDlg::OnBtnOredrPrintPreviewRx()
{
	try {
				//Validate the fields, this will also tell us which lenses to save.
		BOOL bSaveLeftLens = FALSE, bSaveRightLens = FALSE;
		if(!Validate(bSaveLeftLens, bSaveRightLens)) {
			return;
		}

		//r.wilson 2/22/2012 PLID 43702
		BOOL bShipToPatient = ((CButton*) GetDlgItem(IDC_CHECK_SHIP_TO_PATIENT))->GetCheck();
		BOOL bSubmitToVisionWeb = ((CButton*) GetDlgItem(IDC_SUBMIT_TO_VISIONWEB))->GetCheck();

		//r.wilson VisionWeb doesn't support shipping to the patient so one has to give
		if(bShipToPatient && bSubmitToVisionWeb)
		{
			AfxMessageBox("VisionWeb does not support direct shipping to the patient.");
			return;
		}

		//Now save
		Save(bSaveLeftLens, bSaveRightLens);
	
		/*
		m_bOrderChanged=TRUE;
		CReportInfo  infReport(CReports::gcs_aryKnownReports[CReportInfo::GetInfoIndex(706)]);
		CPrintInfo prInfo;
		CPtrArray aryParams;
		infReport.nExtraID = m_nLensRxID; 
		RunReport(&infReport, &aryParams, TRUE, (CWnd*)this, "Glasses Rx",  &prInfo);
		ClearRPIParameterList(&aryParams);		//clear our parameters now that the report is done
		*/

		//(7/9/2012 r.wilson)  PLID 51423 - Print glasses report (Always goes to the print preview screen)
		ShowPrescriptionReport(m_nOrderID, (long) vwotSpectacleLens, this);	

		// (b.savon 2012-01-10 17:21) - PLID 46663 - Save Column Widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			SaveColumnWidths();
		}

		//TES 3/23/2011 - PLID 42975 - Consolidated this code
		CloseCleanup(IDOK);
		
		CNxDialog::OnOK();
	
	}NxCatchAll(__FUNCTION__);
}

//TES 3/23/2011 - PLID 42975 - Show/Hide the controls related to the EMN this order was created from
void CVisionWebOrderDlg::ReflectEmn()
{
	//TES 3/23/2011 - PLID 42975 - Do we have an EMN?
	//TES 5/23/2011 - PLID 42975 - Also make sure that we're licensed and have permission.
	// (j.armen 2012-05-31 14:39) - PLID 50718 - Check if we are licensed using the helper function
	if(m_nEmnID == -1 || !(g_pLicense->HasEMR(CLicense::cflrSilent) == 2) || !(GetCurrentUserPermissions(bioPatientEMR) & SPT__R_________ANDPASS)) {
		//TES 3/23/2011 - PLID 42975 - No, so hide the controls
		m_nxsCreatedFromEmn.ShowWindow(SW_HIDE);
		m_nxbPreviewEmn.EnableWindow(FALSE);
		m_nxbPreviewEmn.ShowWindow(SW_HIDE);
		
		//TES 3/23/2011 - PLID 42975 - Now expand the description field over where the EMN controls would be.
		CRect rcDescription;
		GetDlgItem(IDC_VISIONWEB_ORDER_DESCRIPTION)->GetWindowRect(&rcDescription);
		ScreenToClient(&rcDescription);
		CRect rcPreview;
		GetDlgItem(IDC_PREVIEW_EMN)->GetWindowRect(&rcPreview);
		ScreenToClient(&rcPreview);

		rcDescription.right = rcPreview.right;
		GetDlgItem(IDC_VISIONWEB_ORDER_DESCRIPTION)->MoveWindow(&rcDescription);
	}
	else {
		//TES 5/25/2011 - PLID 43737 - EMNs can't create contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);
		//TES 3/23/2011 - PLID 42975 - Yes, so show the controls, and update the EMN description
		m_nxsCreatedFromEmn.ShowWindow(SW_SHOWNA);
		m_nxbPreviewEmn.EnableWindow(TRUE);
		m_nxbPreviewEmn.ShowWindow(SW_SHOWNA);

		// no description
		m_nxsCreatedFromEmn.SetWindowText("EMN: " );

		//TES 3/23/2011 - PLID 42975 - Now make sure the description field doesn't overlap our EMN controls
		CRect rcDescription;
		GetDlgItem(IDC_VISIONWEB_ORDER_DESCRIPTION)->GetWindowRect(&rcDescription);
		ScreenToClient(&rcDescription);
		CRect rcLabel;
		GetDlgItem(IDC_CREATED_FROM_EMN)->GetWindowRect(&rcLabel);
		ScreenToClient(&rcLabel);

		rcDescription.right = rcLabel.left - 10;
		GetDlgItem(IDC_VISIONWEB_ORDER_DESCRIPTION)->MoveWindow(&rcDescription);
	}

}
void CVisionWebOrderDlg::OnPreviewEmn()
{
	try {
		//TES 5/25/2011 - PLID 43737 - EMNs can't create contact lens orders
		ASSERT(m_vwot == vwotSpectacleLens);

		//TES 3/23/2011 - PLID 42975 - Create a Preview Popup dialog for our EMN
		if(m_nEmnID == -1) {
			//TES 3/23/2011 - PLID 42975 - This button should have been disabled!
			ASSERT(FALSE);
			return;
		}

		//TES 5/23/2011 - PLID 42975 - Make sure we have permission
		if(!CheckCurrentUserPermissions(bioPatientEMR, sptRead)) {
			return;
		}

		//TES 4/14/2011 - PLID 42975 - Check if the EMN has been deleted.
		_RecordsetPtr rsDeleteInfo = CreateParamRecordset(
			"SELECT Deleted, DeletedBy, DeleteDate, EmnTabChartID, ModifiedDate \r\n"
			"FROM EmrMasterT \r\n"
			"LEFT JOIN EmnTabChartsLinkT ON EmrMasterT.ID = EmnTabChartsLinkT.EmnID \r\n"
			"WHERE ID = {INT} \r\n"
			, m_nEmnID);
		if(rsDeleteInfo->eof) {
			return;
		}
		if(AdoFldBool(rsDeleteInfo, "Deleted")) {
			MsgBox("This EMN was deleted by %s on %s, it cannot be previewed", AdoFldString(rsDeleteInfo, "DeletedBy"), 
				FormatDateTimeForInterface(AdoFldDateTime(rsDeleteInfo, "DeleteDate")));
			return;
		}

		// (z.manning 2011-05-23 09:05) - PLID 33114 - Don't let them preview if they don't have permission to this EMN's chart.
		long nChartID = AdoFldLong(rsDeleteInfo, "EmnTabChartID", -1);
		if(nChartID != -1 && !CheckCurrentUserPermissions(bioEmrCharts, sptView, TRUE, nChartID)) {
			return;
		}

		COleDateTime dtEmnModifiedDate = AdoFldDateTime(rsDeleteInfo, "ModifiedDate");

		if (m_pEMRPreviewPopupDlg == NULL) {
			//TES 3/23/2011 - PLID 42975 - Create our dialog
			m_pEMRPreviewPopupDlg = new CEMRPreviewPopupDlg(this);
			m_pEMRPreviewPopupDlg->Create(IDD_EMR_PREVIEW_POPUP, this);

			//TES 3/23/2011 - PLID 42975 - Remember the size for previewing from Glasses Orders
			m_pEMRPreviewPopupDlg->RestoreSize("GlassesOrder");
		}
		
		//TES 3/23/2011 - PLID 42975 - Now give it our patient ID and EMN ID
		// (z.manning 2012-09-10 15:06) - PLID 52543 - Use the new EmnPreviewPopup struct
		EmnPreviewPopup emn(m_nEmnID, dtEmnModifiedDate);
		m_pEMRPreviewPopupDlg->SetPatientID(m_nPatientID, emn);
		//TES 3/23/2011 - PLID 42975 - Now preview the first (only) EMN that we gave it.
		m_pEMRPreviewPopupDlg->PreviewEMN(emn, 0);

		//TES 3/23/2011 - PLID 42975 - Now show the dialog, if we haven't already
		if (!m_pEMRPreviewPopupDlg->IsWindowVisible()) {
			m_pEMRPreviewPopupDlg->ShowWindow(SW_SHOWNA);
		}
	}NxCatchAll(__FUNCTION__);
}

//TES 3/23/2011 - PLID 42975 - This code was getting called several places, I consolidated it into one function, and added cleanup
// for the EMR Preview dialog
void CVisionWebOrderDlg::CloseCleanup(UINT nReturn)
{
	// (c.haag 2010-11-16 9:53) - PLID 41124 - Notify the VisionWeb order dialog that this window has closed if it exists.
	// You could be thinking "Why not just use a table checker like everywhere else?" Because I want the behavior to be as
	// consistent as possible in the otherwise modal world where the tab was required after the dialog was dismissed...and
	// we don't have table checkers for VisionWeb at the time of this writing.
	//TES 11/18/2010 - PLID 40539 - Let our parent now what our order ID is.
	// (s.dhole 2011-05-04 10:43) - PLID 42760 if we call this order dialog from Emn screen than need to post mag to same parent else gose to Glasses tab
	// (s.dhole 2012-05-01 08:56) - PLID 50088 Remove InvEMNToGlassesOrderDlg code
	CInvView* pView = (CInvView *)GetMainFrame()->GetOpenView(INVENTORY_MODULE_NAME);
	if (NULL != pView) {
		if (IsWindow(pView->m_GlassesOrderSheet.GetSafeHwnd())) {
			pView->m_GlassesOrderSheet.PostMessage(NXM_VISIONWEB_ORDER_DLG_CLOSED, nReturn, (LPARAM)m_nOrderID);
		}		
	}
	
	GetMainFrame()->PostMessage(NXM_VISIONWEB_ORDER_DLG_CLOSED, nReturn, (LPARAM)this);
	// (s.dhole 2011-05-16 12:12) - PLID 41986 Release Bitmap
	if (m_hBitmap)
			DeleteObject(m_hBitmap);
	if (m_pEMRPreviewPopupDlg) {
		m_pEMRPreviewPopupDlg->DestroyWindow();
		delete m_pEMRPreviewPopupDlg;
		m_pEMRPreviewPopupDlg = NULL;
	}
	// (s.dhole 2012-04-30 09:08) - PLID 43785 now release discount object
	for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
			LenseServiceInfo ServiceInfo =m_arLenseServiceInfo[nCnt] ;
			DiscountList *pDiscountList = ServiceInfo.DiscountList;
			if(pDiscountList ) {
				delete pDiscountList ;
				pDiscountList =NULL;
			}
		}
	
}

//TES 4/8/2011 - PLID 43058
void CVisionWebOrderDlg::OnTrySetSelFinishedVisionwebProvider(long nRowEnum, long nFlags)
{
	try {

		if(nFlags == dlTrySetSelFinishedFailure) {
			//maybe it's inactive?
			_RecordsetPtr rsProvider = CreateParamRecordset("SELECT Last +  ', ' + First + ' ' + Middle AS Name FROM PersonT "
				"WHERE ID = {INT}", m_nPendingProviderID);
			if(!rsProvider->eof) {
				m_pProvider->PutComboBoxText(_bstr_t(AdoFldString(rsProvider, "Name", "")));
			}
			else 
				m_pProvider->PutCurSel(NULL);
		}
		else {
			m_nPendingProviderID = -1;
		}

	}NxCatchAll(__FUNCTION__);
}

//TES 4/8/2011 - PLID 43058
void CVisionWebOrderDlg::OnSelChosenVisionwebProvider(LPDISPATCH lpRow)
{
	try {
		m_nPendingProviderID = -1;
		IRowSettingsPtr pRow(lpRow);
		if(pRow != NULL) {
			m_nProviderID = VarLong(pRow->GetValue(prcID));
		}
		else {
			m_nProviderID = -1;
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelectServiceCodes()
{
	try {
		//TES 4/12/2011 - PLID 43248 - Show the appropriate list
		GetDlgItem(IDC_AVAILABLE_PRODUCTS)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_AVAILABLE_SERVICE_CODES)->ShowWindow(SW_SHOW);
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelectProducts()
{
	try {
		//TES 4/12/2011 - PLID 43248 - Show the appropriate list
		GetDlgItem(IDC_AVAILABLE_SERVICE_CODES)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_AVAILABLE_PRODUCTS)->ShowWindow(SW_SHOW);
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenAvailableServiceCodes(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}

		//TES 5/20/2011 - PLID 43790 - Moved this code into its own function
		//TES 7/6/2011 - PLID 44381 - Contact Lenses should always have services flagged as "Contact Len"
		// (s.dhole 2012-05-18 15:13) - PLID 48968 Change to support new functionality
		long nServiceID =VarLong( pRow->GetValue(asccID),-1) ;
		BOOL bExist = FALSE;

		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - if we are not increasing the quantity, then we act as if the line item didnt exist
		//		allowing for new items to be added below
		if(m_bIncreaseItemToBillQty){
			if (nServiceID >-1){
				// Check if Service code exist and not link to any items
				for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
					if (m_arLenseServiceInfo[nCnt].nServiceID  ==nServiceID  
						&& m_arLenseServiceInfo[nCnt].bIsDefault==FALSE ){
							if (m_arLenseServiceInfo[nCnt].bIsDelete == FALSE){
								m_arLenseServiceInfo[nCnt].nQty +=1;
							}
							m_arLenseServiceInfo[nCnt].bIsDelete = FALSE;
							bExist = TRUE;
							break;
					}
				}
			}
		}

		if (bExist==FALSE && nServiceID >-1) {
			AddItemsToList(-1,FALSE,FALSE,-1,FALSE,-1,FALSE,-1,FALSE,pRow, m_vwot == vwotContactLensPatient?gostContactLens:gostOther) ;
		} else {
			//Nothing
		}

		RefreshServiceList(); 
		m_pServiceCodeList->CurSel = NULL;
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSelChosenAvailableProducts(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}
		//TES 4/14/2011 - PLID 43288 - Moved this code to its own function
		//TES 7/6/2011 - PLID 44381 - Contact Lenses should always have services flagged as "Contact Len"
		// (s.dhole 2012-05-18 15:13) - PLID 48968 Change to support new functionality
		long nServiceID =VarLong( pRow->GetValue(apcID),-1) ;
		BOOL bExist = FALSE;

		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - if we are not increasing the quantity, then we act as if the line item didnt exist
		//		allowing for new items to be added below
		if(m_bIncreaseItemToBillQty){
			if (nServiceID >-1){
				// Check if Service code exist and not link to any items
				for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
					if (m_arLenseServiceInfo[nCnt].nServiceID  ==nServiceID  
						&& m_arLenseServiceInfo[nCnt].bIsDefault==FALSE ){
							if (m_arLenseServiceInfo[nCnt].bIsDelete == FALSE){
								m_arLenseServiceInfo[nCnt].nQty +=1;
							}
							m_arLenseServiceInfo[nCnt].bIsDelete = FALSE;
							bExist = TRUE;
							break;
					}
				}
			}
		}

		if (bExist==FALSE && nServiceID >-1) {
			AddItemsToList(-1,FALSE,FALSE,-1,FALSE,-1,FALSE,-1,FALSE,pRow,m_vwot == vwotContactLensPatient?gostContactLens:gostOther,TRUE);
		} else {
			// nothing
		}

		RefreshServiceList();
		m_pProductList->CurSel = NULL;
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::RefreshProducts()
{
	//TES 4/12/2011 - PLID 43248 - The list of available products depends on what location we're at, so requery it now.
	// (s.dhole 2012-03-15 13:12) - PLID 48968 if location is not selected than use current location 
	if (m_nLocationID != -1)
		m_pProductList->WhereClause = _bstr_t(FormatString("ProductLocationInfoT.LocationID = %li AND ProductLocationInfoT.Billable = 1 AND ServiceT.Active = 1", m_nLocationID));
	else
		m_pProductList->WhereClause = _bstr_t(FormatString("ProductLocationInfoT.LocationID = %li AND ProductLocationInfoT.Billable = 1 AND ServiceT.Active = 1", GetCurrentLocationID()) );
	m_pProductList->Requery();
}

enum GlassesOrderServicesMenuOptions {
	gosmoDelete = 1,
};

void CVisionWebOrderDlg::OnRButtonDownGlassesOrderServices(LPDISPATCH lpRow, short nCol, long x, long y, long nFlags)
{
	try {
		//TES 4/14/2011 - PLID 43248 - Added a Delete option
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}
		// (s.dhole 2012-04-16 11:22) - PLID 49728 ne delete functionality
		if (m_bIsGlassesBilled) 
			return;
		m_pServices->CurSel = pRow;
		// (s.dhole 2012-03-15 12:22) - PLID 48811 if selected  item is frame or link service codes then do not allow to change Qnt
		if (pRow){	
			_variant_t var  = pRow->GetValue(sscIsDefaultProduct );
			if (var.vt != VT_NULL && var.lVal !=FALSE   ){
				return;
			}
			else{
			}

			
		}

		CMenu mnuPopup;
		mnuPopup.CreatePopupMenu();
		mnuPopup.AppendMenu(MF_ENABLED, gosmoDelete, "Delete");
		
		CPoint ptScreen, ptClient;
		GetCursorPos(&ptScreen);
		ptClient = ptScreen;
		ScreenToClient(&ptClient);

		switch(mnuPopup.TrackPopupMenu(TPM_LEFTALIGN|TPM_RIGHTBUTTON|TPM_LEFTBUTTON|TPM_RETURNCMD, ptScreen.x, ptScreen.y, this)) {
			case gosmoDelete:
				//TES 4/22/2011 - PLID 43389 - If this is an existing service, remember its description for auditing.
				
				
				CString strDescription = VarString(pRow->GetValue(sscCode),"");
				if(!strDescription.IsEmpty()) {
					strDescription += " - ";
				}
				strDescription += VarString(pRow->GetValue(sscDescription),"");
				//TES 6/29/2011 - PLID 44192 - We now track the ID as well as the description
				for(int i=0 ;  i< m_arLenseServiceInfo.GetCount(); i++)
				{
				if (m_arLenseServiceInfo[i].nRowID ==  VarLong(  pRow->GetValue(sscRowID),-1)) 
					{
					m_arLenseServiceInfo[i].bIsDelete  = TRUE;
					break ;
					}
				}
			
				
				RefreshServiceList(); 
				
		}
	}NxCatchAll(__FUNCTION__);
}



void CVisionWebOrderDlg::OnRequeryFinishedVisionwebProvider(short nFlags)
{
	try {
		//TES 4/20/2011 - PLID 43058 - Add a <No Provider> option.
		IRowSettingsPtr pRow = m_pProvider->GetNewRow();
		pRow->PutValue(prcID, (long)-1);
		pRow->PutValue(prcName, _bstr_t("<No Provider>"));
		m_pProvider->AddRowBefore(pRow, m_pProvider->GetFirstRow());
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnTrySetSelFinishedFrame(long nRowEnum, long nFlags)
{
	try {
		//TES 6/3/2011 - PLID 43275 - Don points out that all this code is un-needed, because OnRequeryFinished() does the same thing, 
		// so having this code at the very least leads to an extra database access for inactive frames.
		/*//TES 5/25/2011 - PLID 43737 - This list is hidden on contact lens orders
		if(m_vwot == vwotSpectacleLens) {
			CString strPendingFrameFPC = m_strPendingFrameFPC;
			m_strPendingFrameFPC = "";
			if(nFlags == dlTrySetSelFinishedFailure) {
				//TES 4/26/2011 - PLID 43275 - If we don't have a pending code, don't bother.
				if(!strPendingFrameFPC.IsEmpty()) {
					//TES 4/20/2011 - PLID 43275 - Maybe it's inactive?
					_RecordsetPtr rsFrame = CreateParamRecordset("SELECT ManufacturerName + ' - ' + StyleName + ', ' + ColorDescription AS Name "
						"FROM FramesDataT "
						"WHERE FPC = {STRING}", strPendingFrameFPC);
					if(!rsFrame->eof) {
						m_pFrame->PutComboBoxText(_bstr_t(AdoFldString(rsFrame, "Name", "")));
						//TES 5/12/2011 - PLID 43103 - Since it's still not selected, remember the pending value for any future requeries.
						m_strPendingFrameFPC = strPendingFrameFPC;
					}
					else {
						m_pFrame->PutCurSel(NULL);
					}
				}
			}
		}*/

	}NxCatchAll(__FUNCTION__);
}

#define IDT_SET_SEL_CYL_R	1000
#define IDT_SET_SEL_CYL_L	1001

void CVisionWebOrderDlg::OnSetFocusCylinderR()
{
	try {
		//TES 5/13/2011 - PLID 43703 - Do they have the preference to default to negative?
		if(GetRemotePropertyInt("GlassesOrder_DefaultCylinderNegative", 0, 0, GetCurrentUserName())) {
			//TES 5/13/2011 - PLID 43703 - Is this box enabled?
			if(m_nxeCylinderR.IsWindowEnabled()) {
				//TES 5/13/2011 - PLID 43703 - Is the field currently empty?
				CString str;
				GetDlgItemText(IDC_CYLINDER_R, str);
				if(str.IsEmpty()) {
					//TES 5/13/2011 - PLID 43703 - Everything checks out, let's put in the - sign, and put the cursor
					// after it.
					SetDlgItemText(IDC_CYLINDER_R, "-");
					//TES 5/17/2011 - PLID 43703 - We want to change the selection so the cursor is after the -, but if we got to this
					// function via mouse-click, that won't work right.  So, set a timer instead.
					SetTimer(IDT_SET_SEL_CYL_R, 0, NULL);
				}
			}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnSetFocusCylinderL()
{
	try {
		//TES 5/13/2011 - PLID 43703 - Do they have the preference to default to negative?
		if(GetRemotePropertyInt("GlassesOrder_DefaultCylinderNegative", 0, 0, GetCurrentUserName())) {
			//TES 5/13/2011 - PLID 43703 - Is this box enabled?
			if(m_nxeCylinderL.IsWindowEnabled()) {
				//TES 5/13/2011 - PLID 43703 - Is the field currently empty?
				CString str;
				GetDlgItemText(IDC_CYLINDER_L, str);
				if(str.IsEmpty()) {
					//TES 5/13/2011 - PLID 43703 - Everything checks out, let's put in the - sign, and put the cursor
					// after it.
					SetDlgItemText(IDC_CYLINDER_L, "-");
					//TES 5/17/2011 - PLID 43703 - We want to change the selection so the cursor is after the -, but if we got to this
					// function via mouse-click, that won't work right.  So, set a timer instead.
					SetTimer(IDT_SET_SEL_CYL_L, 0, NULL);
				}
			}
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnTimer(UINT nIDEvent)
{
	try {
		switch(nIDEvent) {
			case IDT_SET_SEL_CYL_R:
				KillTimer(IDT_SET_SEL_CYL_R);
				//TES 5/17/2011 - PLID 43703 - Put the cursor after the - that was just added
				m_nxeCylinderR.SetSel(1,1);				
				break;
			case IDT_SET_SEL_CYL_L:
				KillTimer(IDT_SET_SEL_CYL_L);
				//TES 5/17/2011 - PLID 43703 - Put the cursor after the - that was just added
				m_nxeCylinderL.SetSel(1,1);
				break;
		}
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::LoadLastPatientRx()
{
	//TES 5/16/2011 - PLID 43701 - First, do we have a patient?
	IRowSettingsPtr pRow = m_pPatient->CurSel;
	long nPatientID = -1;
	if(pRow) {
		nPatientID = VarLong(pRow->GetValue(pcID),-1);
	}
	if(nPatientID == -1) {
		return;
	}
	
	//TES 5/16/2011 - PLID 43701 - Second, is the preference on?
	long nConfig = GetRemotePropertyInt("GlassesOrder_CopyPatientRx", 1, 0, "<None>");
	if(!nConfig) {
		return;
	}
	// (s.dhole 2012-03-27 09:58) - PLID 47610
	if(m_pRxDate->GetStatus() == 1){
		return;
	}

	if(m_pRxExpirationDate->GetStatus() == 1){
		return;
	}


	//TES 5/16/2011 - PLID 43701 - Third, are any of the Rx Fields already filled in?
	CString str;
	GetDlgItemText(IDC_SPHERE_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CYLINDER_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_AXIS_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_ADDITION_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_PRISM_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_SECONDARY_PRISM_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_BASE_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_DIST_PD_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_NEAR_PD_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_HEIGHT_L, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_SPHERE_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CYLINDER_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_AXIS_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_ADDITION_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_PRISM_R, str);
	if(!str.IsEmpty()) {
		return;
	}	
	// (s.dhole, 2011-12-07 12:29) - PLID 46883 - select base2 value
	GetDlgItemText(IDC_SECONDARY_PRISM_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_BASE_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	 // (s.dhole, 2011-12-07 12:29) - PLID 46883 -  base2 
	GetDlgItemText(IDC_SECONDARY_BASE_R, str);
	if(!str.IsEmpty()) {
		return;
	}

	GetDlgItemText(IDC_DIST_PD_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_NEAR_PD_R, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_HEIGHT_R, str);
	if(!str.IsEmpty()) {
		return;
	}

	// (b.spivey, October 17, 2011) - PLID 44918 - Added Secondary Prism Value
	//TES 5/16/2011 - PLID 43701 - Finally, does the patient actually have a previous prescription?
	// (s.dhole, 2011-12-07 12:29) - PLID 46883 -  Added PrismAxis2 AS PrismAxisR2, RightRxDetail.PrismAxisStr2 AS PrismAxisStrR2
	// (s.dhole 2012-03-26 12:29) - PLID 47610 Check if this is Glasses RX and  Expiration date
	_RecordsetPtr rsLastRx = CreateParamRecordset("SELECT TOP 1 "
		"LeftRxDetail.PrescriptionSphere AS SphereL, LeftRxDetail.CylinderValue AS CylinderL, "
		"LeftRxDetail.CylinderAxis AS AxisL, LeftRxDetail.AdditionValue AS AdditionL, "
		"LeftRxDetail.PrismValue AS PrismL, LeftRxDetail.PrismAxis AS PrismAxisL, "
		"LeftRxDetail.SecondaryPrismValue AS SecdPrismL, "
		"LeftRxDetail.PrismAxisStr AS PrismAxisStrL, LeftRxDetail.FarHalfPD AS DistPDL, "
		"LeftRxDetail.NearHalfPD AS NearPDL, LeftRxDetail.SegHeight AS HeightL, "
		"LeftRxDetail.PrismAxis2 AS PrismAxisL2, LeftRxDetail.PrismAxisStr2 AS PrismAxisStrL2, "
		"RightRxDetail.PrescriptionSphere AS SphereR, RightRxDetail.CylinderValue AS CylinderR, "
		"RightRxDetail.CylinderAxis AS AxisR, RightRxDetail.AdditionValue AS AdditionR, "
		"RightRxDetail.PrismValue AS PrismR, RightRxDetail.PrismAxis AS PrismAxisR, "
		"RightRxDetail.SecondaryPrismValue AS SecdPrismR, "
		"RightRxDetail.PrismAxisStr AS PrismAxisStrR, RightRxDetail.FarHalfPD AS DistPDR, "
		"RightRxDetail.NearHalfPD AS NearPDR, RightRxDetail.SegHeight AS HeightR, "
		"RightRxDetail.PrismAxis2 AS PrismAxisR2, RightRxDetail.PrismAxisStr2 AS PrismAxisStrR2, "
		" LensRxT.RxExpirationDate, LensRxT.RxDate "
		"FROM GlassesOrderT LEFT JOIN LensRxT ON GlassesOrderT.LensRxID = LensRxT.ID "
		"LEFT JOIN LensDetailRxT LeftRxDetail ON LensRxT.LeftLensDetailRxID = LeftRxDetail.ID "
		"LEFT JOIN LensDetailRxT RightRxDetail ON LensRxT.RightLensDetailRxID = RightRxDetail.ID "
		"WHERE GlassesOrderT.IsDelete = 0 AND GlassesOrderT.PersonID = {INT} "
		"AND LensRxT.RxExpirationDate >=Getdate()  AND LensRxT.RxExpirationDate IS NOT NULL "
		" AND GlassesOrderType =1 " //vwotSpectacleLens
		"ORDER BY GlassesOrderT.OrderCreateDate DESC", nPatientID);

	if(!rsLastRx->eof) {
		// (s.dhole 2012-03-26 12:29) - PLID 47610 show if this is Glasses RX and  Expiration date
		_variant_t varRxDate = rsLastRx->Fields->Item["RxDate"]->Value;
		if(varRxDate.vt == VT_DATE) {
			m_dtSavedRxDate = VarDateTime(varRxDate);
			m_pRxDate->SetDateTime(VarDateTime(varRxDate));
		}
		else {
			m_pRxDate->Clear();
		}
		// (s.dhole 2011-06-15 17:11) - PLID 43813 Expiration Date
		_variant_t varRxExpirationDate = rsLastRx->Fields->Item["RxExpirationDate"]->Value;
		if(varRxExpirationDate.vt == VT_DATE) {
			m_dtSavedRxExpiration = VarDateTime(varRxExpirationDate);
			m_pRxExpirationDate->SetDateTime(VarDateTime(varRxExpirationDate));
		}
		else {
			m_pRxExpirationDate->Clear();
		}
		//TES 5/16/2011 - PLID 43701 - Great, we're all set, load the information onto the dialog

		DOUBLE dSphere = AdoFldDouble(rsLastRx, "SphereL", 0.00);
		if(dSphere != 0) {
			SetDlgItemText(IDC_SPHERE_L, AsString(dSphere));
			FormatPrescriptionNumber(IDC_SPHERE_L, pnfSignedFloat);
		}
		
		_variant_t varCylinder = rsLastRx->Fields->GetItem("CylinderL")->Value;
		if(varCylinder.vt != VT_NULL) {
			SetDlgItemText(IDC_CYLINDER_L, AsString(varCylinder));
			FormatPrescriptionNumber(IDC_CYLINDER_L, pnfSignedFloat);
		}

		_variant_t varAxis = rsLastRx->Fields->GetItem("AxisL")->Value;
		if(varAxis.vt != VT_NULL) {
			SetDlgItemText(IDC_AXIS_L, AsString(varAxis));
		}

		_variant_t varAddition = rsLastRx->Fields->GetItem("AdditionL")->Value;
		if(varAddition.vt != VT_NULL) {
			SetDlgItemText(IDC_ADDITION_L, AsString(varAddition));
			FormatPrescriptionNumber(IDC_ADDITION_L, pnfUnsignedFloat);
		}

		_variant_t varPrism = rsLastRx->Fields->GetItem("PrismL")->Value;
		if(varPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_PRISM_L, AsString(varPrism));
			FormatPrescriptionNumber(IDC_PRISM_L, pnfUnsignedFloat);
		}

		// (b.spivey, October 17, 2011) - PLID 44918 - Load the left secondary prism value. 
		_variant_t varSecdPrism = rsLastRx->Fields->GetItem("SecdPrismL")->Value;
		if(varSecdPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_PRISM_L, AsString(varSecdPrism));
			FormatPrescriptionNumber(IDC_SECONDARY_PRISM_L, pnfUnsignedFloat);
		}

		_variant_t varAxisVal = rsLastRx->Fields->GetItem("PrismAxisL")->Value;
		if(varAxisVal.vt == VT_NULL) {
			SetDlgItemText(IDC_BASE_L, AdoFldString(rsLastRx, "PrismAxisStrL", ""));
		}
		else {
			SetDlgItemText(IDC_BASE_L, AsString(varAxisVal));
		}
		FormatPrescriptionNumber(IDC_BASE_L, pnfBase);
		// (s.dhole, 2011-12-07 12:29) - PLID 46883 -  Added PrismAxisStrL2 
		_variant_t varAxisVal2 = rsLastRx->Fields->GetItem("PrismAxisL2")->Value;
		if(varAxisVal2.vt == VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_BASE_L, AdoFldString(rsLastRx, "PrismAxisStrL2", ""));
		}
		else {
			SetDlgItemText(IDC_SECONDARY_BASE_L, AsString(varAxisVal2));
		}
		FormatPrescriptionNumber(IDC_SECONDARY_BASE_L, pnfBase);


		DOUBLE dDistPD = AdoFldDouble(rsLastRx, "DistPDL", 0.00);
		if(dDistPD != 0) {
			SetDlgItemText(IDC_DIST_PD_L, AsString(dDistPD));
			FormatPrescriptionNumber(IDC_DIST_PD_L, pnfNaturalFloat);
		}

		_variant_t varNearPD = rsLastRx->Fields->GetItem("NearPDL")->Value;
		if(varNearPD.vt != VT_NULL) {
			SetDlgItemText(IDC_NEAR_PD_L, AsString(varNearPD));
		}
		FormatPrescriptionNumber(IDC_NEAR_PD_L, pnfNaturalFloat);

		_variant_t varHeight = rsLastRx->Fields->GetItem("HeightL")->Value;
		if(varHeight.vt != VT_NULL) {
			SetDlgItemText(IDC_HEIGHT_L, AsString(varHeight));
		}
		FormatPrescriptionNumber(IDC_HEIGHT_L, pnfNaturalFloat);

		dSphere = AdoFldDouble(rsLastRx, "SphereR", 0.0);
		if(dSphere != 0) {
			SetDlgItemText(IDC_SPHERE_R, AsString(dSphere));
			FormatPrescriptionNumber(IDC_SPHERE_R, pnfSignedFloat);
		}
		
		varCylinder = rsLastRx->Fields->GetItem("CylinderR")->Value;
		if(varCylinder.vt != VT_NULL) {
			SetDlgItemText(IDC_CYLINDER_R, AsString(varCylinder));
			FormatPrescriptionNumber(IDC_CYLINDER_R, pnfSignedFloat);
		}

		varAxis = rsLastRx->Fields->GetItem("AxisR")->Value;
		if(varAxis.vt != VT_NULL) {
			SetDlgItemText(IDC_AXIS_R, AsString(varAxis));
		}

		varAddition = rsLastRx->Fields->GetItem("AdditionR")->Value;
		if(varAddition.vt != VT_NULL) {
			SetDlgItemText(IDC_ADDITION_R, AsString(varAddition));
			FormatPrescriptionNumber(IDC_ADDITION_R, pnfUnsignedFloat);
		}

		varPrism = rsLastRx->Fields->GetItem("PrismR")->Value;
		if(varPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_PRISM_R, AsString(varPrism));
			FormatPrescriptionNumber(IDC_PRISM_R, pnfUnsignedFloat);
		}

		// (b.spivey, October 17, 2011) - PLID 44918 - Load the right secondary prism value. 
		varSecdPrism = rsLastRx->Fields->GetItem("SecdPrismR")->Value;
		if(varSecdPrism.vt != VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_PRISM_R, AsString(varSecdPrism));
			FormatPrescriptionNumber(IDC_SECONDARY_PRISM_R, pnfUnsignedFloat);
		}

		varAxisVal = rsLastRx->Fields->GetItem("PrismAxisR")->Value;
		if(varAxisVal.vt == VT_NULL) {
			SetDlgItemText(IDC_BASE_R, AdoFldString(rsLastRx, "PrismAxisStrR", ""));
		}
		else {
			SetDlgItemText(IDC_BASE_R, AsString(varAxisVal));
		}
		FormatPrescriptionNumber(IDC_BASE_R, pnfBase);

		varAxisVal2 = rsLastRx->Fields->GetItem("PrismAxisR2")->Value;
		if(varAxisVal2.vt == VT_NULL) {
			SetDlgItemText(IDC_SECONDARY_BASE_R, AdoFldString(rsLastRx, "PrismAxisStrR2", ""));
		}
		else {
			SetDlgItemText(IDC_SECONDARY_BASE_R, AsString(varAxisVal2));
		}
		FormatPrescriptionNumber(IDC_SECONDARY_BASE_R, pnfBase);

		dDistPD = AdoFldDouble(rsLastRx, "DistPDR", 0.0);
		if(dDistPD != 0) {
			SetDlgItemText(IDC_DIST_PD_R, AsString(dDistPD));
			FormatPrescriptionNumber(IDC_DIST_PD_R, pnfNaturalFloat);
		}

		varNearPD = rsLastRx->Fields->GetItem("NearPDR")->Value;
		if(varNearPD.vt != VT_NULL) {
			SetDlgItemText(IDC_NEAR_PD_R, AsString(varNearPD));
		}
		FormatPrescriptionNumber(IDC_NEAR_PD_R, pnfNaturalFloat);

		varHeight = rsLastRx->Fields->GetItem("HeightR")->Value;
		if(varHeight.vt != VT_NULL) {
			SetDlgItemText(IDC_HEIGHT_R, AsString(varHeight));
		}
		FormatPrescriptionNumber(IDC_HEIGHT_R, pnfNaturalFloat);


	}
}


// (s.dhole 2012-03-12 12:51) - PLID 48821 Load service code and product list
void CVisionWebOrderDlg::LoadServiceList()
{
	try{
		// Clean if array is exist
		for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
			LenseServiceInfo ServiceInfo =m_arLenseServiceInfo[nCnt] ;
			DiscountList *pDiscountList = ServiceInfo.DiscountList;
			if(pDiscountList ) {
				delete pDiscountList ;
				pDiscountList =NULL;
			}
		}
		m_arLenseServiceInfo.RemoveAll(); 
		m_pServices->Clear(); 
		// (s.dhole 2012-04-24 09:30) - PLID 47398 load OpticalLineItemCost as cost\
		// (j.dinatale 2013-02-27 15:15) - PLID 53423 - need to pull forward if this is a product and the inscode
		// (j.dinatale 2013-04-08 12:04) - PLID 56083 - bill per lens is now stored in the DB
		_RecordsetPtr rsSelectedServicCode = CreateParamRecordset(" SELECT GlassesOrderServiceT.ID, GlassesOrderServiceT.GlassesOrderID, GlassesOrderServiceT.ServiceID, GlassesOrderServiceT.Price,  "
		" GlassesOrderServiceT.Quantity, GlassesOrderServiceT.Type, GlassesOrderServiceT.OpticalLineItemCost, GlassesOrderServiceT.GlassesCatalogMaterialsID,  "
		" GlassesCatalogDesignsID, GlassesOrderServiceT.GlassesCatalogTreatmentsID, "
		" GlassesOrderServiceT.bODEye , GlassesOrderServiceT.bOSEye ,GlassesOrderServiceT.IsDefaultProduct,GlassesOrderServiceT.IsOffTheShelf,CPTCodeT.Code, ServiceT.Name, "
		" GlassesOrderServiceT.PatientRespAmt, GlassesOrderServiceT.VisionRespAmt, ProductT.InsCode, "  
		" CASE WHEN ProductT.ID IS NOT NULL THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS IsProduct, "
		" GlassesOrderServiceT.BillPerLens "
		" FROM  GlassesOrderServiceT INNER JOIN "
		" ServiceT ON GlassesOrderServiceT.ServiceID = ServiceT.ID LEFT OUTER JOIN "
		" CPTCodeT ON ServiceT.ID = CPTCodeT.ID LEFT OUTER JOIN "
		" ProductT ON ServiceT.ID = ProductT.ID "
		" WHERE GlassesOrderServiceT.GlassesOrderID = {INT} " 
		, m_nOrderID );
			while(!rsSelectedServicCode ->eof) {
				LenseServiceInfo ServiceInfo;
				ServiceInfo.nRowID = -1;
				ServiceInfo.nID = AdoFldLong(rsSelectedServicCode,"ID"); 
				ServiceInfo.nServiceID  = AdoFldLong(rsSelectedServicCode,"ServiceID"); 
				ServiceInfo.nType = AdoFldLong  (rsSelectedServicCode,"Type" );
				ServiceInfo.nSavedType= AdoFldLong  (rsSelectedServicCode,"Type" );
				// (j.dinatale 2013-02-27 15:14) - PLID 53423 - determine if this is a product or not, then get either the ins code or the cpt code accordingly
				if(AdoFldBool(rsSelectedServicCode, "IsProduct", FALSE)){
					ServiceInfo.strCode = AdoFldString  (rsSelectedServicCode,"InsCode" ,"");
				}else{
					ServiceInfo.strCode = AdoFldString  (rsSelectedServicCode,"Code" ,"");
				}
				ServiceInfo.strDescription  = AdoFldString  (rsSelectedServicCode,"Name" ,"");
				// (s.dhole 2012-04-24 09:30) - PLID 47398 load cost
				ServiceInfo.SavedCost = AdoFldCurrency(rsSelectedServicCode,"OpticalLineItemCost", COleCurrency(0,0) ); 
				ServiceInfo.Cost = AdoFldCurrency(rsSelectedServicCode,"OpticalLineItemCost", COleCurrency(0,0) ); 
				ServiceInfo.SavedPrice= AdoFldCurrency(rsSelectedServicCode,"Price", COleCurrency(0,0) ); 
				ServiceInfo.Price = AdoFldCurrency(rsSelectedServicCode,"Price", COleCurrency(0,0) ); 
				ServiceInfo.nQty = AdoFldDouble (rsSelectedServicCode,"Quantity", 1 ); 
				ServiceInfo.nSavedQty  = AdoFldDouble (rsSelectedServicCode,"Quantity", 1 ); 
				ServiceInfo.nDesignID = AdoFldLong(rsSelectedServicCode,"GlassesCatalogDesignsID",-1); 
				ServiceInfo.nMaterialID = AdoFldLong(rsSelectedServicCode,"GlassesCatalogMaterialsID",-1);
				ServiceInfo.nTreatmentID = AdoFldLong(rsSelectedServicCode,"GlassesCatalogTreatmentsID",-1);
				ServiceInfo.bIsOD  = AdoFldBool(rsSelectedServicCode,"bODEye",FALSE);
				ServiceInfo.bIsOS= AdoFldBool(rsSelectedServicCode,"bOSEye",FALSE);
				ServiceInfo.PatientResp   = AdoFldCurrency(rsSelectedServicCode,"PatientRespAmt",COleCurrency(0,0));
				ServiceInfo.VisionResp= AdoFldCurrency(rsSelectedServicCode,"VisionRespAmt",COleCurrency(0,0));
				// (s.dhole 2012-03-15 16:27) - PLID 48811 
				ServiceInfo.bIsDefault   = AdoFldBool(rsSelectedServicCode,"IsDefaultProduct",FALSE);
				ServiceInfo.bIsOffTheShelf = AdoFldBool(rsSelectedServicCode,"IsOffTheShelf",FALSE);
				ServiceInfo.SavedVisionResp=AdoFldCurrency(rsSelectedServicCode,"VisionRespAmt", COleCurrency(0,0) ); 
				ServiceInfo.SavedPatientResp=AdoFldCurrency(rsSelectedServicCode,"PatientRespAmt", COleCurrency(0,0) ); 
				ServiceInfo.bIsDelete = FALSE; 
				ServiceInfo.bTreatmentBillPerLens =FALSE; 
				ServiceInfo.bMaterialBillPerLens=FALSE;
				ServiceInfo.bDesignBillPerLens =FALSE;
				// (s.dhole 2012-04-24 10:27) - PLID 43785 load discount
				// (j.dinatale 2013-04-08 12:04) - PLID 56083 - bill per lens is now stored in the DB
				ServiceInfo.DiscountList = LoadServiceDiscount(AdoFldLong(rsSelectedServicCode,"ID"));
				if (ServiceInfo.bIsDefault)  {
					if (ServiceInfo.nDesignID > 0) {
						ServiceInfo.bDesignBillPerLens = AdoFldBool(rsSelectedServicCode,"BillPerLens",FALSE);
					}
					else if (ServiceInfo.nMaterialID > 0) {
						ServiceInfo.bMaterialBillPerLens = AdoFldBool(rsSelectedServicCode,"BillPerLens",FALSE);
					}
					else if (ServiceInfo.nTreatmentID > 0){
						ServiceInfo.bTreatmentBillPerLens = AdoFldBool(rsSelectedServicCode,"BillPerLens",FALSE);
					}
				}
				m_arLenseServiceInfo.Add(ServiceInfo) ;
				rsSelectedServicCode ->MoveNext();  
			}

			RefreshServiceList();

	}NxCatchAll(__FUNCTION__);

}


// (s.dhole 2012-04-24 10:27) - PLID 43785 load discount 
DiscountList  *LoadServiceDiscount(long GlassesOrderServiceID)
{
	DiscountList *pDiscountList = new DiscountList;
	_variant_t var;
	_RecordsetPtr rsServicDiscount = CreateParamRecordset(" SELECT  * FROM GlassesOrderServiceDiscountsT "
		" WHERE GlassesOrderServiceID = {INT} " 
		, GlassesOrderServiceID );
	while(!rsServicDiscount ->eof) {
			stDiscount  Discount  ;
			Discount.ID =AdoFldLong(rsServicDiscount,"ID",-1);
			var = rsServicDiscount->Fields->Item["PercentOff"]->Value; 
			if (var.vt != VT_NULL)
				Discount.PercentOff = var.lVal;
			var = rsServicDiscount->Fields->Item["Discount"]->Value; 
			if (var.vt != VT_NULL)
				Discount.Discount  = var.cyVal;
			Discount.DiscountCategoryID=rsServicDiscount->Fields->Item["DiscountCategoryID"]->Value; 
			Discount.CouponID =rsServicDiscount->Fields->Item["CouponID"]->Value;  
			Discount.CustomDiscountDescription =AdoFldString (rsServicDiscount,"CustomDiscountDesc","");
			pDiscountList->aryDiscounts.Add(Discount )  ;
			rsServicDiscount->MoveNext();  
	}
	return pDiscountList;
}

// (s.dhole 2012-03-15 16:27) - PLID 48821 
void CVisionWebOrderDlg::RefreshServiceList()
{
	try{
		RemoveDeletedRowFromServiceList();
		IRowSettingsPtr pRow;
		COleCurrency cyTotal(0,0),cyVisionTotal (0,0),cyPatientTotal (0,0); 
		for(int nCount= 0 ; nCount <m_arLenseServiceInfo.GetSize() ;  nCount++  )
		{
		BOOL bIsNewRow=FALSE;
		
		pRow = m_pServices->FindByColumn(sscRowID , (long)m_arLenseServiceInfo[nCount].nRowID  , NULL, g_cvarFalse);
		
		if (pRow ){
			if (m_arLenseServiceInfo[nCount].bIsDelete == TRUE){
				m_pServices->RemoveRow(pRow);
			}
		}
		else{
			bIsNewRow=TRUE;
			pRow = m_pServices->GetNewRow();
		}
		if (m_arLenseServiceInfo[nCount].bIsDelete == FALSE){
			long nRow = VarLong( m_arLenseServiceInfo[nCount].nRowID, -1);
			if (VarLong( m_arLenseServiceInfo[nCount].nRowID, -1)==-1  )
			{
				m_nRowID +=1;
				m_arLenseServiceInfo[nCount].nRowID =(long)m_nRowID ;
			}
			pRow->PutValue(sscRowID  , (long)m_arLenseServiceInfo[nCount].nRowID );
			// if product and sevice apply to both eye than we are calculating a quantity
			if ((BOOL)m_arLenseServiceInfo[nCount].bIsOD == TRUE && 
				(BOOL)m_arLenseServiceInfo[nCount].bIsOS == TRUE &&
				(BOOL)m_arLenseServiceInfo[nCount].bIsDefault  == TRUE){
				if  ((BOOL)m_arLenseServiceInfo[nCount].bDesignBillPerLens == TRUE ||
					(BOOL)m_arLenseServiceInfo[nCount].bMaterialBillPerLens== TRUE || 
					(BOOL)m_arLenseServiceInfo[nCount].bTreatmentBillPerLens== TRUE ){
					m_arLenseServiceInfo[nCount].nQty=2;
				}
				else{
					m_arLenseServiceInfo[nCount].nQty=1;
				}
			}
			//  igf it is default item and may apply to only one eye  
			else if((BOOL)m_arLenseServiceInfo[nCount].bIsDefault  == TRUE){
				m_arLenseServiceInfo[nCount].nQty=1;
			}

			pRow->PutValue(sscID , (long)m_arLenseServiceInfo[nCount].nID  );
			pRow->PutValue(sscServiceID , (long)m_arLenseServiceInfo[nCount].nServiceID    );
			pRow->PutValue(sscCode , _bstr_t(m_arLenseServiceInfo[nCount].strCode ));
			_variant_t vt =  pRow->GetValue(sscCode );
			pRow->PutValue(sscDescription ,_bstr_t( m_arLenseServiceInfo[nCount].strDescription  )  );
			pRow->PutValue(sscPrice, _variant_t(m_arLenseServiceInfo[nCount].Price  ) );
			pRow->PutValue(sscSavedPrice ,_variant_t(m_arLenseServiceInfo[nCount].SavedPrice)  );
			pRow->PutValue(sscQty, (double)m_arLenseServiceInfo[nCount].nQty   );
			pRow->PutValue(sscSavedQty ,(double)m_arLenseServiceInfo[nCount].nSavedQty );
			pRow->PutValue(sscType,_variant_t( m_arLenseServiceInfo[nCount].nType )   );
			pRow->PutValue(sscSavedType,_variant_t( m_arLenseServiceInfo[nCount].nSavedType) );
			// (s.dhole 2012-04-01 17:15) - PLID 47398
			pRow->PutValue(sscCost,_variant_t( m_arLenseServiceInfo[nCount].Cost));
			pRow->PutValue(sscSavedCost ,_variant_t( m_arLenseServiceInfo[nCount].SavedCost)  );
			pRow->PutValue(sscDesignID,(long)m_arLenseServiceInfo[nCount].nDesignID    );
			pRow->PutValue(sscMaterialID ,(long)m_arLenseServiceInfo[nCount].nMaterialID    );
			pRow->PutValue(sscTreatmentID ,(long)m_arLenseServiceInfo[nCount].nTreatmentID  );
			pRow->PutValue(sscIsOD,(BOOL)m_arLenseServiceInfo[nCount].bIsOD  );
			pRow->PutValue(sscIsOS,(BOOL)m_arLenseServiceInfo[nCount].bIsOS );
			pRow->PutValue(sscIsDefaultProduct ,(BOOL)m_arLenseServiceInfo[nCount].bIsDefault );
			pRow->PutValue(sscIsOffTheShelf,(BOOL)m_arLenseServiceInfo[nCount].bIsOffTheShelf  );

			// (s.dhole 2012-04-05 09:08) - PLID 49447 Discount Calculation
			COleCurrency cyTotalDollarDiscount(0,0), cyTotalLineDiscount(0,0);
			long nTotalPercentOff = 0;
			m_arLenseServiceInfo[nCount].TotalAmount = m_arLenseServiceInfo[nCount].nQty * m_arLenseServiceInfo[nCount].Price ;
			COleCurrency cyCurrentTotal = m_arLenseServiceInfo[nCount].TotalAmount;  
			long nPercentOff = 0;
			//check the discount count list is not null
			if (m_arLenseServiceInfo[nCount].DiscountList ) {
			for (int i = 0; i < m_arLenseServiceInfo[nCount].DiscountList->aryDiscounts.GetCount(); i++) {
					stDiscount disc = m_arLenseServiceInfo[nCount].DiscountList->aryDiscounts[i];
					if (disc.Discount.vt == VT_CY) {
						cyTotalDollarDiscount += disc.Discount.cyVal;
					}
					if (disc.PercentOff.vt == VT_I4) {
						nPercentOff += disc.PercentOff.lVal;
					}
				}
			}
			//calculate the total line discount	
			cyTotalLineDiscount = COleCurrency(0,0);
			COleCurrency cyTemp = COleCurrency(0,0);
			//first the practice total
			cyTemp = cyCurrentTotal;
			cyCurrentTotal= (cyCurrentTotal * (100000 - nPercentOff * 1000));
			cyCurrentTotal/= 100000;
			cyTotalLineDiscount = cyTemp - cyCurrentTotal;
			cyTotalLineDiscount += cyTotalDollarDiscount;
			cyCurrentTotal-= cyTotalDollarDiscount;
			m_arLenseServiceInfo[nCount].Discount =cyTotalLineDiscount ;
			m_arLenseServiceInfo[nCount].LineTotal = cyCurrentTotal;
			// (s.dhole 2012-04-20 14:35) - PLID 49729  visionPlan Exist than allow vision ammount to enter
			if (m_bIsGlassesvisionPlanExist==TRUE)		{
				m_arLenseServiceInfo[nCount].PatientResp =  (cyCurrentTotal - m_arLenseServiceInfo[nCount].VisionResp) ;
			}
			else {
				m_arLenseServiceInfo[nCount].VisionResp =  COleCurrency(0,0);
				m_arLenseServiceInfo[nCount].PatientResp =  cyCurrentTotal ;
			}
			cyVisionTotal +=m_arLenseServiceInfo[nCount].VisionResp ;
			cyPatientTotal +=m_arLenseServiceInfo[nCount].PatientResp ;
			cyTotal += m_arLenseServiceInfo[nCount].LineTotal;
			pRow->PutValue(sscTotal,_variant_t(m_arLenseServiceInfo[nCount].LineTotal)  );
			pRow->PutValue(sscDiscount  ,_variant_t(m_arLenseServiceInfo[nCount].Discount)  );
			pRow->PutValue(sscVisionResp ,_variant_t(m_arLenseServiceInfo[nCount].VisionResp)  );
			pRow->PutValue(sscPatientResp  ,_variant_t(m_arLenseServiceInfo[nCount].PatientResp)  );
			
			// (s.dhole 2012-04-16 11:22) - PLID 49728 if flag is not set then load regular else try to format special column  
			if (m_bIsGlassesBilled != TRUE){
				// (s.dhole 2012-03-15 12:22) - PLID 48811 if product is frame then mark as Blue
				if (m_arLenseServiceInfo[nCount].bIsDefault){
					pRow->ForeColor=RGB(0,0,255);
				}
				else{
					pRow->ForeColor = RGB(0,0,0);
				}
			}
			else
			{
				if (m_arLenseServiceInfo[nCount].bIsDefault){
					pRow->ForeColor=RGB(135,206,250);  					
					pRow->CellForeColor[sscCost] = RGB(0,0,255);
				}
				else{
					pRow->ForeColor=RGB(205,205,193);  
					pRow->CellForeColor[sscCost]= RGB(0,0,0);
				}
			}

			if (bIsNewRow)
				m_pServices->AddRowSorted(pRow, NULL);
		}
		}
		SetDlgItemText(IDC_GLS_ORD_VISION_RESP_AMT,FormatCurrencyForInterface(cyVisionTotal)  ) ;
		SetDlgItemText(IDC_GLS_ORD_PATIENT_RESP_AMT,FormatCurrencyForInterface(cyPatientTotal)  ) ;
		SetDlgItemText(IDC_GLS_ORD_TOTAL_AMT,FormatCurrencyForInterface(cyTotal )  ) ;
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-07-05 14:35) - PLID 48926 Change functio to support new sevicecode selection 
void CVisionWebOrderDlg::UpdateTreatmentServiceCodesL(CArray<TreatmentInformation,TreatmentInformation&> &arOldTreatments, CArray<TreatmentInformation,TreatmentInformation&> &arRightLensTreatments)
{
	// Check new list for any mising item from original one
	for(int i = 0; i < arOldTreatments.GetSize(); i++) {
		bool bFound = false;
		for(int j = 0; j < m_arLeftLensTreatments.GetSize() && !bFound; j++) {
			if(arOldTreatments[i].nTreatmentID == m_arLeftLensTreatments[j].nTreatmentID) {
				bFound = true;
				break;
			}
		}
		if(!bFound) {
			for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
				if (m_arLenseServiceInfo[nCnt].nTreatmentID ==arOldTreatments[i].nTreatmentID  && 
					m_arLenseServiceInfo[nCnt].bIsOS ==TRUE  && 
					m_arLenseServiceInfo[nCnt].bIsDefault==TRUE ){
					// if assign to eye than remove from selected eye
					if (m_arLenseServiceInfo[nCnt].bIsOD ==  TRUE ){
						m_arLenseServiceInfo[nCnt].bIsOS =FALSE;
					}
					// If it is from selected eye than mark it as delete
					else if (m_arLenseServiceInfo[nCnt].bIsOD ==  FALSE){
						m_arLenseServiceInfo[nCnt].bIsDelete  =TRUE;
						m_arLenseServiceInfo[nCnt].bIsOS =FALSE;
					}
				}
			}
		}
	}

	//TES 5/22/2011 - PLID 43790 - Find the treatments that were added
	CArray<TreatmentInformation,TreatmentInformation&> arTreatmentsAdded;
	for(int i = 0; i < m_arLeftLensTreatments.GetSize(); i++) {
		bool bFound = false;
		for(int j = 0; j < arOldTreatments.GetSize() && !bFound; j++) {
			if(m_arLeftLensTreatments[i].nTreatmentID == arOldTreatments[j].nTreatmentID) {
				bFound = true;
				break;
			}
		}
		if(!bFound) {
			arTreatmentsAdded.Add(m_arLeftLensTreatments[i]);
		}
	}
	
		
	//TES 5/22/2011 - PLID 43790 - Now go through each of the codes that was removed, and remove it, unless it's not billed per lens, and
	//Remove Treatment per Lense
	if (arTreatmentsAdded.GetSize()>0  ){
		//TES 5/22/2011 - PLID 43790 - Now go through each of the codes that was added, and add it to the list, unless it's not billed per
		// lens, and already selected on the other lens
		for(int i = 0; i < arTreatmentsAdded.GetSize(); i++) {
			TreatmentInformation ti = arTreatmentsAdded[i];
			BOOL bNewBillPerLens = ti.bBillPerLens ;
			BOOL bExist = FALSE;
			// (s.dhole 2012-05-01 15:50) - PLID 48926 Load Cpt list from table
			_RecordsetPtr rsCPTId = CreateParamRecordset("SELECT * FROM GlassesCatalogTreatmentsCptT"
			" WHERE GlassesCatalogTreatmentsID = {INT} ", ti.nTreatmentID );
			while(!rsCPTId ->eof) {
				long nNewCptID =AdoFldLong(rsCPTId , "CptId");
				arTreatmentsAdded[i].bIsOD  =FALSE;

				// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
				HandleServiceProcessing(OrderServiceListType::Treatments, true, ti.nTreatmentID, nNewCptID, ti.bBillPerLens);
				rsCPTId->MoveNext();  
			}
		}
	}
	// time to refresh list
	RefreshServiceList(); 
}


void CVisionWebOrderDlg::AddItemsToList(long nCptID ,
										  BOOL bIsOD,BOOL bIsOS ,
										  long nDesignID ,BOOL bDesignBillPerLens ,
										  long nMaterialID ,BOOL bMaterialBillPerLens,
										  long nTreatmentID ,BOOL bTreatmentBillPerLens,
										  NXDATALIST2Lib::IRowSettingsPtr  pServiceRow
										  ,GlassesOrderServiceType  nType, BOOL bIsProduct , BOOL bIsDefault
										  ,BOOL bIsOffTheShelf){
	if (!pServiceRow ){
		if (bIsProduct ){
			pServiceRow = m_pProductList  ->FindByColumn(apcID,  nCptID , NULL, g_cvarFalse);
		}
		else {
			pServiceRow = m_pServiceCodeList->FindByColumn(asccID,  nCptID , NULL, g_cvarFalse);
		}
	}
	if (pServiceRow )
	{
		if (VarLong( pServiceRow->GetValue(bIsProduct?apcID:asccID),-1)!=-1)
		{
			LenseServiceInfo ServiceInfo;
			ServiceInfo.nServiceID =pServiceRow->GetValue(bIsProduct?apcID:asccID);
			ServiceInfo.nRowID = -1;
			ServiceInfo.nID  =-1;
			if (!bIsProduct){
				ServiceInfo.strCode=pServiceRow->GetValue(asccCode) ;
			}
			else {
				// (j.dinatale 2013-02-27 12:26) - PLID 53423 - need to set the code to be the insurance code
				if(nType == gostFrame){
					ServiceInfo.strCode = pServiceRow->GetValue(fcInsCode);
				} else {
					if(nType == gostOther){
						ServiceInfo.strCode = pServiceRow->GetValue(apcInsCode);
					} else {
						// nothing
					}
				}
			}
			ServiceInfo.strDescription = pServiceRow->GetValue(bIsProduct?apcDescription :asccDescription);
			ServiceInfo.SavedPrice = g_cvarNull;
			ServiceInfo.nQty =(double)1;
			ServiceInfo.nSavedQty =(double)-1;
			ServiceInfo.nType =nType; 
			ServiceInfo.nSavedType =0;
			// (s.dhole 2012-04-24 09:25) - PLID 47398 Set Cost
			ServiceInfo.Cost=pServiceRow->GetValue(bIsProduct?apcCost:asccCost );
			ServiceInfo.SavedCost=g_cvarNull;
			ServiceInfo.nDesignID =nDesignID;
			ServiceInfo.bDesignBillPerLens = bDesignBillPerLens; 
			ServiceInfo.nMaterialID =nMaterialID;
			ServiceInfo.bMaterialBillPerLens=bMaterialBillPerLens;
			ServiceInfo.nTreatmentID=nTreatmentID;
			ServiceInfo.bTreatmentBillPerLens =bTreatmentBillPerLens ;
			ServiceInfo.bIsOD = bIsOD;
			ServiceInfo.bIsOS = bIsOS;
			ServiceInfo.bIsDefault  = bIsDefault;
			ServiceInfo.bIsOffTheShelf = bIsOffTheShelf;
			ServiceInfo.bIsDelete = FALSE;
			// (s.dhole 2012-03-28 12:22) - PLID 43785 Discount
			COleCurrency cyPrice = COleCurrency(0,0);
			variant_t vtCur  = pServiceRow->GetValue(bIsProduct?apcPrice   :asccPrice);
			if (vtCur.vt == VT_CY && vtCur.vt != VT_NULL){
				cyPrice =VarCurrency(vtCur, COleCurrency(0,0) );
			}
			ServiceInfo.Price =cyPrice ;
			ServiceInfo.TotalAmount =  cyPrice ;
			ServiceInfo.LineTotal  =cyPrice * ServiceInfo.nQty ;
			ServiceInfo.Discount =  COleCurrency(0,0); 
			ServiceInfo.VisionResp =  COleCurrency(0,0) ;
			ServiceInfo.SavedVisionResp=g_cvarNull;
			ServiceInfo.PatientResp =  cyPrice ;
			ServiceInfo.SavedPatientResp=g_cvarNull;
			ServiceInfo.DiscountList = new DiscountList;
			m_arLenseServiceInfo.Add(ServiceInfo);  
		}
	}
}


// (s.dhole 2012-07-05 14:35) - PLID 48926 Change functio to support new sevicecode selection 
void CVisionWebOrderDlg::UpdateTreatmentServiceCodesR(CArray<TreatmentInformation,TreatmentInformation&> &arOldTreatments)
{
	//TES 5/22/2011 - PLID 43790 - Find the treatments that were removed
	// Check new list and if any old item is missing then mark as deleted
	for(int i = 0; i < arOldTreatments.GetSize(); i++) {
		bool bFound = false;
		for(int j = 0; j < m_arRightLensTreatments.GetSize() && !bFound; j++) {
			if(arOldTreatments[i].nTreatmentID == m_arRightLensTreatments[j].nTreatmentID) {
				bFound = true;
				break;
			}
		}
		if(!bFound) {
			for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
				if (m_arLenseServiceInfo[nCnt].nTreatmentID ==arOldTreatments[i].nTreatmentID  && 
					m_arLenseServiceInfo[nCnt].bIsOD ==TRUE  && 
					m_arLenseServiceInfo[nCnt].bIsDefault==TRUE ){
					// if both eye than remove from selected eye
					if (m_arLenseServiceInfo[nCnt].bIsOS ==  TRUE){
						m_arLenseServiceInfo[nCnt].bIsOD =FALSE;
					}
					// If selected eye than mark as delete
					else if (m_arLenseServiceInfo[nCnt].bIsOS ==  FALSE){
						m_arLenseServiceInfo[nCnt].bIsDelete  =TRUE;
						m_arLenseServiceInfo[nCnt].bIsOD =FALSE;//s.dhole should mark as false
					}
				}
			}
		}
	}

	//TES 5/22/2011 - PLID 43790 - Find the treatments that were added
	// Now check fo an y new item which is not exist in list
	CArray<TreatmentInformation,TreatmentInformation&> arTreatmentsAdded;
	for(int i = 0; i < m_arRightLensTreatments.GetSize(); i++) {
		bool bFound = false;
		for(int j = 0; j < arOldTreatments.GetSize() && !bFound; j++) {
			if(m_arRightLensTreatments[i].nTreatmentID == arOldTreatments[j].nTreatmentID) {
				bFound = true;
				break;
			}
		}
		if(!bFound) {
			arTreatmentsAdded.Add(m_arRightLensTreatments[i]);
		}
	}

	// there are new item  now add to list
	if (arTreatmentsAdded.GetSize()>0  ){
		//TES 5/22/2011 - PLID 43790 - Now go through each of the codes that was added, and add it to the list, unless it's not billed per
		// lens, and already selected on the other lens
		for(int i = 0; i < arTreatmentsAdded.GetSize(); i++) {
			TreatmentInformation ti = arTreatmentsAdded[i];
			BOOL BOOLbNewBillPerLens = ti.bBillPerLens ;
			// (s.dhole 2012-05-01 15:50) - PLID 48926 Load Cpt list from table
			_RecordsetPtr rsCPTId = CreateParamRecordset("SELECT * FROM GlassesCatalogTreatmentsCptT"
			" WHERE GlassesCatalogTreatmentsID = {INT} ", ti.nTreatmentID );
			while(!rsCPTId ->eof) {
				long nNewCptID =AdoFldLong(rsCPTId , "CptId");
				arTreatmentsAdded[i].bIsOD  =TRUE;

				// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
				HandleServiceProcessing(OrderServiceListType::Treatments, false, ti.nTreatmentID, nNewCptID, ti.bBillPerLens);
				rsCPTId->MoveNext();  
			}
		}
	}
	RefreshServiceList(); 
}

// Remove item ServiceList
void CVisionWebOrderDlg::RemoveDeletedRowFromServiceList ()
{
	for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  )
		{
		if (m_arLenseServiceInfo[nCnt].bIsDelete==TRUE && m_arLenseServiceInfo[nCnt].nID ==-1) 
		{
			IRowSettingsPtr pServiceRow = m_pServices->FindByColumn(sscRowID,  (long)m_arLenseServiceInfo[nCnt].nRowID , NULL, g_cvarFalse);
			if (pServiceRow )
			{
				m_pServices->RemoveRow(pServiceRow ) ;
			}
			//s.dhole 6/29/2012 PLID 48821 delete object befor remove it from list
			{	
				LenseServiceInfo ServiceInfo =m_arLenseServiceInfo[nCnt] ;
				DiscountList *pDiscountList = ServiceInfo.DiscountList;
				if(pDiscountList ) {
					delete pDiscountList ;
					pDiscountList =NULL;
				}
			}
			m_arLenseServiceInfo.RemoveAt (nCnt);
			RemoveDeletedRowFromServiceList ();
			break;
		}
		else if (m_arLenseServiceInfo[nCnt].bIsDelete==TRUE && m_arLenseServiceInfo[nCnt].nID !=-1) 
		{
			IRowSettingsPtr pServiceRow = m_pServices->FindByColumn(sscRowID,  (long)m_arLenseServiceInfo[nCnt].nRowID , NULL, g_cvarFalse);
			if (pServiceRow )
			{
				m_pServices->RemoveRow(pServiceRow ) ;
			}
			break;
		}
	}
}



CVisionWebOrderDlg::TreatmentInformation CVisionWebOrderDlg::GetTreatmentInformation(long nTreatmentID)
{
	//TES 5/25/2011 - PLID 43737 - There are no treatments on contact lens orders
	ASSERT(m_vwot == vwotSpectacleLens);

	//TES 5/22/2011 - PLID 43790 - First, try finding the treatment in our list (we'll use the right list, they're identical so it doesn't matter)
	IRowSettingsPtr pRow = m_pLensTreatmentsL->FindByColumn(ltcID, nTreatmentID, NULL, g_cvarFalse);
	if(pRow) {
		//TES 5/22/2011 - PLID 43790 - Found it!
		TreatmentInformation ti;
		ti.nTreatmentID = nTreatmentID;
		//ti.nCptID = VarLong(pRow->GetValue(ltcCptID), -1);
		
		//ti.nCptID = -1;
		ti.bBillPerLens = VarBool(pRow->GetValue(ltcBillPerLens), FALSE);
		return ti;
	}
	else {
		//TES 5/22/2011 - PLID 43790 - Rats, we'll have to check the database.
		_RecordsetPtr rsTreatment = CreateParamRecordset("SELECT  BillPerLens FROM GlassesCatalogTreatmentsT WHERE ID = {INT}", nTreatmentID);
		if(!rsTreatment->eof) {
			TreatmentInformation ti;
			ti.nTreatmentID = nTreatmentID;
			//ti.nCptID = AdoFldLong(rsTreatment, "CptID", -1);
			ti.bBillPerLens = AdoFldBool(rsTreatment, "BillPerLens", FALSE);
			return ti;
		}
		else {
			//TES 5/22/2011 - PLID 43790 - How could it not exist?
			ASSERT(FALSE);
			TreatmentInformation ti;
			ti.nTreatmentID = nTreatmentID;
			//ti.nCptID = -1;
			ti.bBillPerLens = FALSE;
			return ti;
		}
	}
}

void CVisionWebOrderDlg::ReflectOrderType()
{
	ASSERT(m_vwot == vwotSpectacleLens || m_vwot == vwotContactLensPatient);
	UINT nShowGlasses = (m_vwot == vwotSpectacleLens ? SW_SHOW : SW_HIDE);
	UINT nShowContactLenses = (m_vwot == vwotContactLensPatient ? SW_SHOW : SW_HIDE);

	//TES 5/24/2011 - PLID 43737 - Glasses-specific fields
	GetDlgItem(IDC_JOB_TYPE_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_JOB_TYPE)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_JOB_INSTRUCTIONS_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_SPECIAL_INSTRUCTIONS)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_DESIGN_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_SUPPLIER_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_MATERIAL_LABEL)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_LENS_OD_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_LENS_DESIGN_R)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_SUPPLIER)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_LENS_MATERIAL_R)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_LENS_OS_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_LENS_DESIGN_L)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_CATALOG_SETUP)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_LENS_MATERIAL_L)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_COPY_LENS_DESIGN)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_TREATMENT_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TREATMENT_NOTES_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_THICKNESS_LABEL)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_TREATMENT_OD_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TREATMENTS_LABEL_R)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TREATMENT_COMMENTS_R)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_THICKNESS_R)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_THICKNESS_TYPE_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_THICKNESS_TYPE)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_TREATMENT_OS_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TREATMENTS_LABEL_L)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TREATMENT_COMMENTS_L)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_THICKNESS_L)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_COPY_LENS)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_CUSTOMIZE)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_FRAME)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_FRAME_TYPE_LABEL)->ShowWindow(nShowGlasses);
	// (s.dhole 2012-03-12 12:08) - PLID 48811 Frame To be ordered
	GetDlgItem(IDC_VISIONWEB_FRAME_TYPE)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_BOX_A_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_A_BOX)->ShowWindow(nShowGlasses);
	// (s.dhole 2012-03-12 12:08) - PLID 48811 Frame To be ordered
	GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_BOX_B_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_B_BOX)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_DBL_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_DBL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_ED_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_ED)->ShowWindow(nShowGlasses);

	GetDlgItem(IDC_MANUFACTURER_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_MANUFACTURER)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_STYLE_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_STYLE)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_COLOR_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_FRAME_COLOR)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TEMPLE_LENGTH_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_TEMPLE_LENGTH)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_EYE_SIZE_LABEL)->ShowWindow(nShowGlasses);
	GetDlgItem(IDC_EYE_SIZE)->ShowWindow(nShowGlasses);
	

	

	GetDlgItem(IDC_SUBMIT_TO_VISIONWEB)->ShowWindow(nShowGlasses);

	//TES 6/29/2011 - PLID 44166 - Added Cost fields
	///*
	//TES 6/29/2011 - PLID 44381 - We also need to change the Type column in the services based on 
	// the order type
	IColumnSettingsPtr pCol = m_pServices->GetColumn(sscType);
	if(m_vwot == vwotSpectacleLens) {
		pCol->ComboSource = _bstr_t("1;Frame;2;Lens;0;Other;");
	}
	else {
	/*Nothing*/
	}
}




void CVisionWebOrderDlg::UpdateRightMaterialID(long nNewMaterialID, NXDATALIST2Lib::IRowSettingsPtr pMaterialRow)
{
	if(m_nRightMaterialID != nNewMaterialID || m_bRightMaterialBillPerLens ) {
		
		BOOL bNewBillPerLens = (pMaterialRow == NULL)?FALSE:VarBool(pMaterialRow->GetValue(lmcBillPerLens), FALSE);

		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - leverage my new function to remove line items of a specific type
		RemoveLineItems(OrderServiceListType::Materials, false);
		
		_RecordsetPtr rsCPTId = CreateParamRecordset("SELECT * FROM GlassesCatalogMaterialsCptT "
		" WHERE GlassesCatalogMaterialsID = {INT} ", nNewMaterialID);
		while(!rsCPTId ->eof) {
			long nNewCptID =AdoFldLong(rsCPTId , "CptId");

			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
			HandleServiceProcessing(OrderServiceListType::Materials, false, nNewMaterialID, nNewCptID, bNewBillPerLens);
			rsCPTId->MoveNext();  
		}
		m_bRightMaterialBillPerLens = bNewBillPerLens;
		m_nRightMaterialID = nNewMaterialID;
		RefreshServiceList(); 
	}
}

// (j.dinatale 2013-04-02 10:08) - PLID 55936 - this function is used to copy line items from lens to the other 
void CVisionWebOrderDlg::CopyLineItems(OrderServiceListType::ServiceListType oslType, bool bIsOS, BOOL bBillPerLens)
{
	RemoveLineItems(oslType, bIsOS);

	// for all items in our list ORIGINAL list (we can potentially add, and only add items here, never remove)
	long nSize = m_arLenseServiceInfo.GetSize();
	for(int j = 0; j < nSize; j++){
		LenseServiceInfo* temp = &m_arLenseServiceInfo[j];
		if(m_arLenseServiceInfo[j].bIsDelete){
			continue;	// skip deleted items
		}

		// figure out if our service item is for the object we are interested in
		bool bIsType = false;
		switch(oslType){
			case OrderServiceListType::Materials:
				bIsType = (m_arLenseServiceInfo[j].nMaterialID > 0);
				break;
			case OrderServiceListType::Designs:
				bIsType = (m_arLenseServiceInfo[j].nDesignID > 0);
				break;
			case OrderServiceListType::Treatments:	// (j.dinatale 2013-04-30 11:21) - PLID 56458 - now have a treatment type in our enum
				bIsType = (m_arLenseServiceInfo[j].nTreatmentID > 0);
				break;
			default:
				ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::CopyLineItems() when determining type.");
		}

		// if the type checks out and this is a "default" (auto added) item, set the lens to what the other lens is
		if(bIsType && m_arLenseServiceInfo[j].bIsDefault){
			// do we really need this here? not sure...
			// (j.dinatale 2013-04-30 12:10) - PLID 56458 - need this to handle a case where we need to keep track of 
			//		IsOD and IsOS but we arent increasing the qty and are billing per lens
			switch(oslType){
				case OrderServiceListType::Materials:
					m_arLenseServiceInfo[j].bMaterialBillPerLens = bBillPerLens && m_bIncreaseItemToBillQty;
					break;
				case OrderServiceListType::Designs:
					m_arLenseServiceInfo[j].bDesignBillPerLens = bBillPerLens && m_bIncreaseItemToBillQty;
					break;
				case OrderServiceListType::Treatments:	// (j.dinatale 2013-04-30 11:21) - PLID 56458 - now have a treatment type in our enum
					m_arLenseServiceInfo[j].bTreatmentBillPerLens = bBillPerLens && m_bIncreaseItemToBillQty;
					break;
				default:
					ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::CopyLineItems() when setting bill per lens.");
			}

			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - so here, if we are looking to increase our quantity, or if we arent billing per lens
			//		follow old logic. We want to follow the old logic if we arent billing per lens because we still want to write this to data so that
			//		way when the user changes their design/material/treatments we dont remove a line item by mistake.
			if(m_bIncreaseItemToBillQty || !bBillPerLens){
				if(bIsOS){
					m_arLenseServiceInfo[j].bIsOS = m_arLenseServiceInfo[j].bIsOD;
				}else{
					m_arLenseServiceInfo[j].bIsOD = m_arLenseServiceInfo[j].bIsOS;
				}

				m_arLenseServiceInfo[j].bIsDelete = (!m_arLenseServiceInfo[j].bIsOD && !m_arLenseServiceInfo[j].bIsOS);
			}else{
				// if we are billing per lens, we want to go ahead and add a separate line item based on the increase quantity preference
				if(bBillPerLens){
					// as to not have duplicates...
					// add a new line item here, because we want to bill items separately
					// also we forcibly set the bill per lens flag to FALSE since we are trying to add separate line items to the list
					switch(oslType){
						case OrderServiceListType::Materials:
							AddItemsToList(m_arLenseServiceInfo[j].nServiceID, !bIsOS, bIsOS, -1, FALSE, m_arLenseServiceInfo[j].nMaterialID, FALSE, -1, FALSE, NULL, gostOther, FALSE, TRUE);
							break;
						case OrderServiceListType::Designs:
							AddItemsToList(m_arLenseServiceInfo[j].nServiceID, !bIsOS, bIsOS, m_arLenseServiceInfo[j].nDesignID, FALSE, -1, FALSE, -1, FALSE, NULL, gostOther, FALSE, TRUE);
							break;
						case OrderServiceListType::Treatments:
							AddItemsToList(m_arLenseServiceInfo[j].nServiceID, !bIsOS, bIsOS, -1, FALSE, -1, FALSE, m_arLenseServiceInfo[j].nTreatmentID, FALSE, NULL, gostOther, FALSE, TRUE);
							break;
						default:
							ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::CopyLineItems() when adding a new service.");
					}
				}
			}
		}
	}
}

// (j.dinatale 2013-03-29 09:20) - PLID 55936 - function to remove all line items for a given lens
void CVisionWebOrderDlg::RemoveLineItems(OrderServiceListType::ServiceListType oslType, bool bIsOS)
{
	// go through, mark our specific items deleted
	for(int i = 0; i <  m_arLenseServiceInfo.GetSize(); i++){
		LenseServiceInfo* temp = &m_arLenseServiceInfo[i];
		bool bIsType = false;

		// check our service item type
		switch(oslType){
			case OrderServiceListType::Materials:
				bIsType = (m_arLenseServiceInfo[i].nMaterialID > 0);
				break;
			case OrderServiceListType::Designs:
				bIsType = (m_arLenseServiceInfo[i].nDesignID > 0);
				break;
			case OrderServiceListType::Treatments:	// (j.dinatale 2013-04-30 11:21) - PLID 56458 - now have an item type for treatment in our enum
				bIsType = (m_arLenseServiceInfo[i].nTreatmentID > 0);
				break;
			default:
				ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::RemoveLineItems()");
		}

		// if the type checks out and this item is a "default" (auto added) item, set it accordingly
		if(bIsType && m_arLenseServiceInfo[i].bIsDefault){
			if(bIsOS){
				m_arLenseServiceInfo[i].bIsOS = FALSE;
				m_arLenseServiceInfo[i].bIsDelete = !m_arLenseServiceInfo[i].bIsOD;
			}else{
				m_arLenseServiceInfo[i].bIsOD = FALSE;
				m_arLenseServiceInfo[i].bIsDelete = !m_arLenseServiceInfo[i].bIsOS;
			}
		}
	}
}

// (j.dinatale 2013-04-30 11:21) - PLID 56458 - we now need a centralized place for handling adding line items to our to be billed section so that way we can stay consistent
void CVisionWebOrderDlg::HandleServiceProcessing(OrderServiceListType::ServiceListType oslType, bool bIsOS, long nNewID, long nServiceID, BOOL bBillPerLens)
{
	bool bExist = false;

	// (j.dinatale 2013-04-30 11:35) - PLID 56458 - only try and find existing line items if we are looking to increase the qty
	for(int nCnt = 0; nCnt < m_arLenseServiceInfo.GetSize(); nCnt++){
		// need to get the design or material ID
		long nObjectID = -1;
		switch(oslType){
			case OrderServiceListType::Materials:
				nObjectID = m_arLenseServiceInfo[nCnt].nMaterialID;
				break;
			case OrderServiceListType::Designs:
				nObjectID = m_arLenseServiceInfo[nCnt].nDesignID;
				break;
			case OrderServiceListType::Treatments:
				nObjectID = m_arLenseServiceInfo[nCnt].nTreatmentID;
				break;
			default:
				ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::HandleServiceProcessing() when determining object ID.");
		}

		if (nObjectID == nNewID && m_arLenseServiceInfo[nCnt].nServiceID == nServiceID && m_arLenseServiceInfo[nCnt].bIsDefault){
			switch(oslType){
				case OrderServiceListType::Materials:
					m_arLenseServiceInfo[nCnt].bMaterialBillPerLens = bBillPerLens && m_bIncreaseItemToBillQty;
					break;
				case OrderServiceListType::Designs:
					m_arLenseServiceInfo[nCnt].bDesignBillPerLens = bBillPerLens && m_bIncreaseItemToBillQty;
					break;
				case OrderServiceListType::Treatments:
					m_arLenseServiceInfo[nCnt].bTreatmentBillPerLens = bBillPerLens && m_bIncreaseItemToBillQty;
					break;
				default:
					ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::HandleServiceProcessing() when setting bill per lens.");
			}

			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - so here, if we are looking to increase our quantity, or if we arent billing per lens
			//		follow old logic. We want to follow the old logic if we arent billing per lens because we still want to write this to data so that
			//		way when the user changes their design/material/treatments we dont remove a line item by mistake.
			if(m_bIncreaseItemToBillQty || !bBillPerLens){
				if(!bExist){
					//we found record we can use
					if(bIsOS){
						m_arLenseServiceInfo[nCnt].bIsOS = TRUE;
					}else{
						m_arLenseServiceInfo[nCnt].bIsOD = TRUE;
					}

					m_arLenseServiceInfo[nCnt].bIsDelete = FALSE; 
					bExist = true;
				} else {
					//if we have duplicate record than delete it, should not happen
					m_arLenseServiceInfo[nCnt].bIsDelete = TRUE; 
				}
			}
		}
	}

	// the item didnt exist, so we need to add it to our service item list
	// (j.dinatale 2013-04-30 12:14) - PLID 56458 - we dont act as if we are billing per lens when not increasing the qty
	if (!bExist){		
		switch(oslType){
			case OrderServiceListType::Materials:
				AddItemsToList(nServiceID, !bIsOS, bIsOS, -1, FALSE, nNewID, bBillPerLens && m_bIncreaseItemToBillQty, -1, FALSE, NULL, gostOther, FALSE, TRUE);
				break;
			case OrderServiceListType::Designs:
				AddItemsToList(nServiceID, !bIsOS, bIsOS, nNewID, bBillPerLens && m_bIncreaseItemToBillQty, -1, FALSE, -1, FALSE, NULL, gostOther, FALSE, TRUE);
				break;
			case OrderServiceListType::Treatments:
				AddItemsToList(nServiceID, !bIsOS, bIsOS, -1, FALSE, -1, FALSE, nNewID, bBillPerLens && m_bIncreaseItemToBillQty, NULL, gostOther, FALSE, TRUE);
				break;
			default:
				ThrowNxException("Invalid OrderServiceListType in CVisionWebOrderDlg::HandleServiceProcessing() when adding a new service.");
		}
	}
}

// (j.dinatale 2013-03-29 09:23) - PLID 55936 - Make a function to handle all the prompting regarding service codes in this dialog
// NOTE: the bCopyServiceItemsToLens param is used to short circuit this function so we dont prompt, it is used to indicate that the current lens should match the opposite/other lens
// NOTE 2: we are passing the old bill per lens and old id so we can change the correct member variables in our dialog
// RETURNS: the bool represents if a change was made to the list, so true means a change was made, false means a change was NOT made
bool CVisionWebOrderDlg::HandlePrompt(OrderServiceListType::ServiceListType oslType, bool bIsOS, long &nOldID, long nNewID, BOOL &bOldBillPerLens, BOOL bNewBillPerLens, bool bCopyServiceItemsToLens)
{
	// (j.dinatale 2013-05-01 15:43) - PLID 56458 - let's prevent people from doing stupid things shall we?
	ASSERT(oslType != OrderServiceListType::Treatments);
	if(oslType == OrderServiceListType::Treatments){
		ThrowNxException("CVisionWebOrderDlg::HandlePrompt cannot be called with a Service List Type of Treatments!");
	}

	//	this means we dont prompt, we are interested in making the service items in the list for the other list also for this lens
	//	just set the OS or OD for the particular object
	if(bCopyServiceItemsToLens){
		CopyLineItems(oslType, bIsOS, bNewBillPerLens);
		return true;
	}

	// if our IDs match and we are not interested in per lens billing, we need to bail
	if(nOldID == nNewID && !bOldBillPerLens ) {
		return false;
	}

	RemoveLineItems(oslType, bIsOS);
	
	// see if we should skip the prompt altogether
	CSqlFragment sqlSkipPrompt;
	sqlSkipPrompt.Create("SELECT TOP 1 1 FROM {CONST_STR} WHERE {CONST_STR} = {INT}", 
		OrderServiceListType::GetCptTableName(oslType), OrderServiceListType::GetCptColumnName(oslType), nNewID);
	if(nNewID <= 0 || !ReturnsRecordsParam(sqlSkipPrompt)){
		return true;	// change was made
	}

	// prompt for what services they want to select
	CGlassesOrderServiceSelectDlg dlg(oslType, nNewID, this);
	if(IDOK != dlg.DoModal()){
		return true;	// change was made
	}
	
	// now lets go through our list, and make sure we didnt mark something as deleted that can be undeleted
	GlassesOrderServices goServices = dlg.GetSelectedServices();
	foreach(long nServiceID, goServices){
		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
		HandleServiceProcessing(oslType, bIsOS, nNewID, nServiceID, bNewBillPerLens);
	}

	return true;
}

void CVisionWebOrderDlg::UpdateLeftMaterialID(long nNewMaterialID, NXDATALIST2Lib::IRowSettingsPtr pMaterialRow)
{	
	if(m_nLeftMaterialID != nNewMaterialID || m_bLeftMaterialBillPerLens ) {
		BOOL bNewBillPerLens = (pMaterialRow == NULL)?FALSE:VarBool(pMaterialRow->GetValue(lmcBillPerLens), FALSE);
		BOOL bExist=FALSE;

		// (j.dinatale 2013-04-30 11:21) - PLID 56458 - leverage my new function to remove line items of a specific type
		RemoveLineItems(OrderServiceListType::Materials, true);
	
		_RecordsetPtr rsCPTId = CreateParamRecordset("SELECT * FROM GlassesCatalogMaterialsCptT WHERE GlassesCatalogMaterialsID = {INT} ", nNewMaterialID);
		while(!rsCPTId ->eof) {
			long nNewCptID =AdoFldLong(rsCPTId , "CptId");
			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - new function to centralize the service addition logic
			HandleServiceProcessing(OrderServiceListType::Materials, true, nNewMaterialID, nNewCptID, bNewBillPerLens);
			rsCPTId->MoveNext();  
		}
		m_bLeftMaterialBillPerLens = bNewBillPerLens;
		m_nLeftMaterialID = nNewMaterialID;
		RefreshServiceList(); 
	}	
}

void CVisionWebOrderDlg::OnKillfocusLensCost()
{
	try {
		//TES 6/29/2011 - PLID 44166 - Format as currency
		COleCurrency cyCost;
		CString strCost;
		GetDlgItemText(IDC_LENS_COST, strCost);
		cyCost = ParseCurrencyFromInterface(strCost);
		if(cyCost.GetStatus() != COleCurrency::valid) {
			cyCost = COleCurrency(0,0);
		}
		m_bChangingLensCost = true;
		SetDlgItemText(IDC_LENS_COST, FormatCurrencyForInterface(cyCost));
		m_bChangingLensCost = false;
	}NxCatchAll(__FUNCTION__);
}

void CVisionWebOrderDlg::OnKillfocusFrameCost()
{
	try {
		//TES 6/29/2011 - PLID 44166 - Format as currency
		COleCurrency cyCost;
		CString strCost;
		GetDlgItemText(IDC_FRAME_COST, strCost);
		cyCost = ParseCurrencyFromInterface(strCost);
		if(cyCost.GetStatus() != COleCurrency::valid) {
			cyCost = COleCurrency(0,0);
		}
		m_bChangingFrameCost = true;
		SetDlgItemText(IDC_FRAME_COST, FormatCurrencyForInterface(cyCost));
		m_bChangingFrameCost = false;
	}NxCatchAll(__FUNCTION__);
}

//void CVisionWebOrderDlg::OnKillfocusClCost()
//{
//	try {
//		//TES 6/29/2011 - PLID 44166 - Format as currency
//		COleCurrency cyCost;
//		CString strCost;
//		GetDlgItemText(IDC_CL_COST, strCost);
//		cyCost = ParseCurrencyFromInterface(strCost);
//		if(cyCost.GetStatus() != COleCurrency::valid) {
//			cyCost = COleCurrency(0,0);
//		}
//		m_bChangingCLCost = true;
//		SetDlgItemText(IDC_CL_COST, FormatCurrencyForInterface(cyCost));
//		m_bChangingCLCost = false;
//	}NxCatchAll(__FUNCTION__);
//}


void CVisionWebOrderDlg::OnEditingFinishedGlassesOrderServices(LPDISPATCH lpRow, short nCol, const VARIANT& varOldValue, const VARIANT& varNewValue, BOOL bCommit)
{
	try {
		//If already cancelling, don't need to do any checking
		if(bCommit== FALSE)
			return;

		//TES 6/30/2011 - PLID 44166 - If they changed the type, we should recalculate our costs
		//TES 7/5/2011 - PLID 44166 - We also need to recalculate if they change the quantity.
		if(nCol == sscType || nCol == sscQty || nCol == sscPrice || sscQty) {
			IRowSettingsPtr pRow(lpRow);
			long nRowID = VarLong(  pRow->GetValue(sscRowID),-1); 
			if (nRowID !=-1)
			{
				for(int i=0 ;  i< m_arLenseServiceInfo.GetSize(); i++  )
				{
					if (m_arLenseServiceInfo[i].nRowID == nRowID)
					{
						if (nCol == sscType){
							m_arLenseServiceInfo[i].nType  =  (GlassesOrderServiceType)VarLong(varNewValue);
						}
						else if (nCol == sscQty ){
							m_arLenseServiceInfo[i].nQty  =  VarDouble(  varNewValue,1);
						}
						else if (nCol == sscPrice){
							m_arLenseServiceInfo[i].Price  =  VarCurrency (  varNewValue);
						}
						// (s.dhole 2012-03-28 17:17) - PLID  47398
						else if (nCol == sscCost ){
								m_arLenseServiceInfo[i].Cost  =  VarCurrency (  varNewValue);
						}
						// (s.dhole 2012-03-28 12:22) - PLID 50777 
						else if (nCol == sscVisionResp  ){
							m_arLenseServiceInfo[i].VisionResp =  VarCurrency (  varNewValue);
						}
					}

				}
			}

			// (s.dhole 2012-03-28 12:22) - PLID 43785 Refresh datalist
			RefreshServiceList(); 
		}
	}NxCatchAll(__FUNCTION__);
}



//void CVisionWebOrderDlg::OnChangeClCost()
//{
//	try {
//		if(!m_bChangingCLCost) {
//			//TES 6/30/2011 - PLID 44166 - Don't auto-calculate this field any more now that it's been manually set.
//			m_bCLCostChangedByUser = true;
//		}
//	}NxCatchAll(__FUNCTION__);
//}
//
//void CVisionWebOrderDlg::OnChangeLensCost()
//{
//	try {
//		if(!m_bChangingLensCost) {
//			//TES 7/5/2011 - PLID 44166 - Don't auto-calculate this field any more now that it's been manually set.
//			m_bLensCostChangedByUser = true;
//		}
//	}NxCatchAll(__FUNCTION__);
//}

//(c.copits 2011-09-22) PLID 43743 - Add a warning if they attempt to enter two orders for the same patient on the same day
bool CVisionWebOrderDlg::CheckDoesPatientHaveOrderToday()
{
	bool bOrderExists = false;

	try {

		IRowSettingsPtr pRow = m_pPatient->CurSel;
		long nPatientID = -1;
		if(pRow) {
			nPatientID = VarLong(pRow->GetValue(pcID),-1);
		}
		if(nPatientID == -1) {
			return false;
		}

		_RecordsetPtr rsOrder = CreateParamRecordset("SELECT TOP 1 * FROM GlassesOrderT WHERE PersonID = {INT} AND "
			"dbo.AsDateNoTime(GlassesOrderT.OrderCreateDate) = dbo.AsDateNoTime(getdate()) AND GlassesOrderT.IsDelete <> 1", nPatientID);
		
		if(!rsOrder->eof) {
			bOrderExists = true;
		}

	} NxCatchAll(__FUNCTION__);

	return bOrderExists;
}

//(c.copits 2011-09-27) PLID 45112 - Disable "Glasses Catalog" button for inactive suppliers
void CVisionWebOrderDlg::UpdateGlassesCatalogButton()
{
	try {

		IRowSettingsPtr pRow = m_pSupplier->CurSel;
		BOOL bArchived = FALSE;

		if(pRow) {
			bArchived = VarBool(pRow->GetValue(scArchived), FALSE);
		}
		if (bArchived) {
			GetDlgItem(IDC_CATALOG_SETUP)->EnableWindow(FALSE);
		}
		else {
			GetDlgItem(IDC_CATALOG_SETUP)->EnableWindow(m_bIsGlassesBilled==FALSE);
		}

	} NxCatchAll(__FUNCTION__);
}

// (b.savon 2012-01-10 14:30) - PLID 46663 - Column Widths
// Code based off of CEMRSearch::RestoreColumns()
void CVisionWebOrderDlg::RestoreColumnWidths()
{
   // (s.dhole 2012-04-17 16:01) - PLID 49925 change VisionOrderFrameColumnWidths to GlassesOrderFrameColumnWidths 
	CString strColumnWidths = GetRemotePropertyText("GlassesOrderFrameColumnWidths", "", 0, GetCurrentUserName(), false);

	CArray<int, int> arWidths;

	int tokIndex = strColumnWidths.Find(',');

	// It is empty or invalid, so rebuild
	if (tokIndex == -1) {
		// (b.savon 2012-01-10 17:21) - PLID 46663 - Save Column Widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			SaveColumnWidths();
		}
		return;
	}

	int nColIndex = 0;
	while(tokIndex != -1) {
		CString str = strColumnWidths.Left(tokIndex);
		arWidths.Add(atoi(str));
		strColumnWidths = strColumnWidths.Right(strColumnWidths.GetLength() - (tokIndex + 1));
		tokIndex = strColumnWidths.Find(',');

		nColIndex++;
	}
	arWidths.Add(atoi(strColumnWidths));

	if (arWidths.GetSize() != m_pFrame->ColumnCount) {
		// (b.savon 2012-01-10 17:21) - PLID 46663 - Save Column Widths if this is a glasses order.
		if(m_vwot == vwotSpectacleLens) {
			SaveColumnWidths();
		}
		return;
	}

	int nDataListWidth = 0;
	for (int i = 0; i < m_pFrame->ColumnCount; i++)
	{
		// Now go through the columns, clear any that are set as Auto or Data, and set their saved width.
		IColumnSettingsPtr pCol = m_pFrame->GetColumn(i);
		long nStyle = pCol->ColumnStyle;
		nStyle = (nStyle&(~csWidthAuto)&(~csWidthData));
		pCol->ColumnStyle = nStyle;
		pCol->StoredWidth = arWidths[i];
		nDataListWidth += arWidths[i];
	}

	//	Make the drop down width match the column widths plus some pixels to avoid a scroll bar
	m_pFrame->PutDropDownWidth(nDataListWidth+20);
}

// (b.savon 2012-01-10 14:30) - PLID 46663 - Column Widths
// Code based off of CEMRSearch::SaveColumns()
void CVisionWebOrderDlg::SaveColumnWidths()
{
	CString strColumnWidths;

	// Store the columns in a xx,xx,xx,xx format
	for (int i = 0; i < m_pFrame->ColumnCount; i++)
	{
		IColumnSettingsPtr pCol = m_pFrame->GetColumn(i);
		CString str;		
		
		str.Format("%d", pCol->StoredWidth);
		
		if (i > 0)
			strColumnWidths += ",";

		strColumnWidths += str;
	}
	// (s.dhole 2012-04-17 16:01) - PLID 49925 change VisionOrderFrameColumnWidths to GlassesOrderFrameColumnWidths 	
	SetRemotePropertyText("GlassesOrderFrameColumnWidths", strColumnWidths, 0, GetCurrentUserName());
}
// (s.dhole 2012-01-18 13:24) - PLID 47455 import prescription
// added prism1, prism2 ,base1,base2 
void CVisionWebOrderDlg::OnBnClickedSelectPriscription()
{
try{
	IRowSettingsPtr pRow = m_pPatient->CurSel;
	long nPatientID = -1;
	if(pRow) {
		nPatientID = VarLong(pRow->GetValue(pcID),-1);
		if (nPatientID != -1 )
		{
			CGlassesEMNPrescriptionList dlg;
			// (s.dhole 2012-04-20 13:29) - PLID 49728 Make Glasses Prescription readonly
			dlg.m_bIsReadOnly = m_bIsGlassesBilled; 
			// (s.dhole 2012-04-25 12:35) - PLID 47395 change name
			dlg.m_PrescriptionWindowDisplayType= dlg.pwAllowRxSelection;
			dlg.m_strPatientName = VarString(pRow->GetValue(pcName));
			dlg.m_nPatientID =nPatientID;
			if (dlg.DoModal() == IDOK && dlg.m_oLensRx.ISRecordExist == TRUE  )
			{
				_variant_t varRxDate = dlg.m_oLensRx.strRxDate ;
				if(varRxDate.vt == VT_DATE) {
					m_dtSavedRxDate = VarDateTime(varRxDate);
					m_pRxDate->SetDateTime(VarDateTime(varRxDate));
				}
				else {
					m_pRxDate->Clear();
				}

				_variant_t varRxExpirationDate = dlg.m_oLensRx.strRxExpDate ;
				if(varRxExpirationDate.vt == VT_DATE) {
					m_dtSavedRxExpiration = VarDateTime(varRxExpirationDate);
					m_pRxExpirationDate->SetDateTime(VarDateTime(varRxExpirationDate));
				}
				else {
					m_pRxExpirationDate->Clear();
				}
				// (s.dhole 2012-04-25 12:28) - PLID 49968 Load Emn id and refresh screen
				if (dlg.m_oLensRx.nEmnId >0){
					m_nEmnID = dlg.m_oLensRx.nEmnId ;
					m_nEMNPatientID	 =m_nPatientID; 
					m_nLastEMN =m_nEmnID;

					// (j.dinatale 2012-11-28 13:07) - PLID 53913 - try to calculate the new expiration date if we came from an EMN
					CalcNewExpirationDate();
				}
				else{
					m_nEmnID = -1;
				}
				ReflectEmn();
				//TES 4/18/2012 - PLID 49746 - If we have an EMN object, fill from it rather than the LensRxOD object.
				if(dlg.m_oLensRx.LensRxOD.pEmnInfo) {

					
					GlassesOrderLensDetails *pGold = dlg.m_oLensRx.LensRxOD.pEmnInfo;
					SetDlgItemText(IDC_SPHERE_R, pGold->strSphere);
					FormatPrescriptionNumber(IDC_SPHERE_R, pnfSignedFloat);

					SetDlgItemText(IDC_CYLINDER_R, pGold->strCylinder);
					FormatPrescriptionNumber(IDC_CYLINDER_R, pnfSignedFloat);

					SetDlgItemText(IDC_AXIS_R, pGold->strAxis);

					SetDlgItemText(IDC_ADDITION_R, pGold->strAddition);
					FormatPrescriptionNumber(IDC_ADDITION_R, pnfUnsignedFloat);

					SetDlgItemText(IDC_PRISM_R, pGold->strPrism);
					FormatPrescriptionNumber(IDC_PRISM_R, pnfUnsignedFloat);

					//TES 4/18/2012 - PLID 49746 - Secondary Prism can't be set by an EMN

					SetDlgItemText(IDC_BASE_R, pGold->strBase);
					FormatPrescriptionNumber(IDC_BASE_R, pnfBase);

					//TES 4/18/2012 - PLID 49746 - Secondary Base can't be set by an EMN

					SetDlgItemText(IDC_DIST_PD_R, pGold->strDistPD);
					FormatPrescriptionNumber(IDC_DIST_PD_R, pnfNaturalFloat);

					SetDlgItemText(IDC_NEAR_PD_R, pGold->strNearPD);
					FormatPrescriptionNumber(IDC_NEAR_PD_R, pnfNaturalFloat);

					SetDlgItemText(IDC_HEIGHT_R, pGold->strHeight);
					FormatPrescriptionNumber(IDC_HEIGHT_R, pnfNaturalFloat);

					//TES 4/18/2012 - PLID 49746 - Now load the designs, materials, and treatments (code copied from ReflectGlassesOrderData())
					OnSelChosenVisionwebLensDesignR(m_pLensDesignR->SetSelByColumn(ldcID, pGold->nDesignID));
					OnSelChosenVisionwebLensMaterialR(m_pLensMaterialR->SetSelByColumn(lmcID, pGold->nMaterialID));

					CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
					arOriginalTreatments.Append(m_arRightLensTreatments);
					for(int i = 0; i < pGold->arTreatmentIDs.GetSize(); i++) {
						//TES 5/25/2011 - PLID 42761 - Skip duplicates
						bool bFound = false;
						for(int j = 0; j < m_arRightLensTreatments.GetSize() && !bFound; j++) {
							if(m_arRightLensTreatments[j].nTreatmentID == pGold->arTreatmentIDs[i]) bFound = true;
						}
						//TES 6/1/2011 - PLID 42761 - Also skip -1 IDs.
						if(!bFound && pGold->arTreatmentIDs[i] != -1) {
							m_arRightLensTreatments.Add(GetTreatmentInformation(pGold->arTreatmentIDs[i]));
						}
					}
					if(m_arRightLensTreatments.GetSize() == 0) {
						m_pLensTreatmentsR->SetSelByColumn(ltcID, (long)-1);
						//TES 6/3/2011 - PLID 43737 - Make sure to hide the multi-select label
						m_nxlTreatmentsR.ShowWindow(SW_HIDE);
					}
					else if(m_arRightLensTreatments.GetSize() == 1) {
						m_pLensTreatmentsR->SetSelByColumn(ltcID, m_arRightLensTreatments[0].nTreatmentID);
						//TES 6/3/2011 - PLID 43737 - Make sure to hide the multi-select label
						m_nxlTreatmentsR.ShowWindow(SW_HIDE);
					}
					else {
						//TES 3/22/2011 - PLID 42761 - We need to get the treatment names, try to load them from the datalist to avoid a data access.
						CDWordArray dwMissingNames;
						CString strTreatmentNames;
						for(int i = 0; i < m_arRightLensTreatments.GetSize(); i++) {
							IRowSettingsPtr pRow = m_pLensTreatmentsR->FindByColumn(ltcID, m_arRightLensTreatments[i].nTreatmentID, NULL, g_cvarFalse);
							if(pRow) {
								strTreatmentNames += VarString(pRow->GetValue(ltcName), "") + ", ";
							}
							else {
								dwMissingNames.Add(m_arRightLensTreatments[i].nTreatmentID);
							}
						}
						if(dwMissingNames.GetSize()) {
							//TES 3/22/2011 - PLID 42761 - Sigh, we'll have to check data.
							_RecordsetPtr rsTreatmentNames = CreateParamRecordset("SELECT TreatmentName FROM GlassesCatalogTreatmentsT "
								"WHERE ID IN ({INTARRAY})", dwMissingNames);
							while(!rsTreatmentNames->eof) {
								strTreatmentNames += AdoFldString(rsTreatmentNames, "TreatmentName", "") + ", ";
								rsTreatmentNames->MoveNext();
							}
						}

						strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
						m_nxlTreatmentsR.SetText(strTreatmentNames);
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R)->ShowWindow(SW_HIDE);
						m_nxlTreatmentsR.ShowWindow(SW_SHOWNA);
					}
					//TES 5/24/2011 - PLID 43790 - Now make any changes needed based on these treatments
					UpdateTreatmentServiceCodesR(arOriginalTreatments);

					//TES 4/18/2012 - PLID 49746 - We've gathered all the information we need from this object, so free up its memory.
					delete pGold;
				}
				else {
					SetDlgItemText(IDC_SPHERE_R, dlg.m_oLensRx.LensRxOD.strSphere  );
					FormatPrescriptionNumber(IDC_SPHERE_R, pnfSignedFloat);
					
					SetDlgItemText(IDC_CYLINDER_R, dlg.m_oLensRx.LensRxOD.strCylinder );
					FormatPrescriptionNumber(IDC_CYLINDER_R, pnfSignedFloat);
					
					SetDlgItemText(IDC_AXIS_R, dlg.m_oLensRx.LensRxOD.strAxis  );
					
					SetDlgItemText(IDC_ADDITION_R, dlg.m_oLensRx.LensRxOD.strAddition  );
					FormatPrescriptionNumber(IDC_ADDITION_R, pnfUnsignedFloat);
				
					SetDlgItemText(IDC_PRISM_R, dlg.m_oLensRx.LensRxOD.strPrism1 );
					FormatPrescriptionNumber(IDC_PRISM_R, pnfUnsignedFloat);

					SetDlgItemText(IDC_SECONDARY_PRISM_R, dlg.m_oLensRx.LensRxOD.strPrism2); 
					FormatPrescriptionNumber(IDC_SECONDARY_PRISM_R, pnfUnsignedFloat);
					
					SetDlgItemText(IDC_BASE_R,dlg.m_oLensRx.LensRxOD.strBase1 );
					FormatPrescriptionNumber(IDC_BASE_R, pnfBase);

					SetDlgItemText(IDC_SECONDARY_BASE_R, dlg.m_oLensRx.LensRxOD.strBase2);
					FormatPrescriptionNumber(IDC_SECONDARY_BASE_R, pnfBase);
					
					SetDlgItemText(IDC_DIST_PD_R, dlg.m_oLensRx.LensRxOD.strDistPD );
					FormatPrescriptionNumber(IDC_DIST_PD_R, pnfNaturalFloat);

					SetDlgItemText(IDC_NEAR_PD_R, dlg.m_oLensRx.LensRxOD.strNearPD );
					FormatPrescriptionNumber(IDC_NEAR_PD_R, pnfNaturalFloat);

					SetDlgItemText(IDC_HEIGHT_R, dlg.m_oLensRx.LensRxOD.strHeight );
					FormatPrescriptionNumber(IDC_HEIGHT_R, pnfNaturalFloat);
				}

				//TES 4/18/2012 - PLID 49746 - If we have an EMN object, fill from it rather than the LensRxOS object.
				if(dlg.m_oLensRx.LensRxOS.pEmnInfo) {
					GlassesOrderLensDetails *pGold = dlg.m_oLensRx.LensRxOS.pEmnInfo;
					SetDlgItemText(IDC_SPHERE_L, pGold->strSphere);
					FormatPrescriptionNumber(IDC_SPHERE_L, pnfSignedFloat);

					SetDlgItemText(IDC_CYLINDER_L, pGold->strCylinder);
					FormatPrescriptionNumber(IDC_CYLINDER_L, pnfSignedFloat);

					SetDlgItemText(IDC_AXIS_L, pGold->strAxis);

					SetDlgItemText(IDC_ADDITION_L, pGold->strAddition);
					FormatPrescriptionNumber(IDC_ADDITION_L, pnfUnsignedFloat);

					SetDlgItemText(IDC_PRISM_L, pGold->strPrism);
					FormatPrescriptionNumber(IDC_PRISM_L, pnfUnsignedFloat);

					//TES 4/18/2012 - PLID 49746 - Secondary Prism can't be set by an EMN

					SetDlgItemText(IDC_BASE_L, pGold->strBase);
					FormatPrescriptionNumber(IDC_BASE_L, pnfBase);

					//TES 4/18/2012 - PLID 49746 - Secondary Base can't be set by an EMN

					SetDlgItemText(IDC_DIST_PD_L, pGold->strDistPD);
					FormatPrescriptionNumber(IDC_DIST_PD_L, pnfNaturalFloat);

					SetDlgItemText(IDC_NEAR_PD_L, pGold->strNearPD);
					FormatPrescriptionNumber(IDC_NEAR_PD_L, pnfNaturalFloat);

					SetDlgItemText(IDC_HEIGHT_L, pGold->strHeight);
					FormatPrescriptionNumber(IDC_HEIGHT_L, pnfNaturalFloat);

					//TES 4/18/2012 - PLID 49746 - Now load the designs, materials, and treatments (code copied from ReflectGlassesOrderData())
					OnSelChosenVisionwebLensDesignL(m_pLensDesignL->SetSelByColumn(ldcID, pGold->nDesignID));
					OnSelChosenVisionwebLensMaterialL(m_pLensMaterialL->SetSelByColumn(lmcID, pGold->nMaterialID));

					CArray<TreatmentInformation,TreatmentInformation&> arOriginalTreatments;
					arOriginalTreatments.Append(m_arLeftLensTreatments);
					for(int i = 0; i < pGold->arTreatmentIDs.GetSize(); i++) {
						//TES 5/25/2011 - PLID 42761 - Skip duplicates
						bool bFound = false;
						for(int j = 0; j < m_arLeftLensTreatments.GetSize() && !bFound; j++) {
							if(m_arLeftLensTreatments[j].nTreatmentID == pGold->arTreatmentIDs[i]) bFound = true;
						}
						//TES 6/1/2011 - PLID 42761 - Also skip -1 IDs.
						if(!bFound && pGold->arTreatmentIDs[i] != -1) {
							m_arLeftLensTreatments.Add(GetTreatmentInformation(pGold->arTreatmentIDs[i]));
						}
					}
					if(m_arLeftLensTreatments.GetSize() == 0) {
						m_pLensTreatmentsL->SetSelByColumn(ltcID, (long)-1);
						//TES 6/3/2011 - PLID 43737 - Make sure to hide the multi-select label
						m_nxlTreatmentsL.ShowWindow(SW_HIDE);
					}
					else if(m_arLeftLensTreatments.GetSize() == 1) {
						m_pLensTreatmentsL->SetSelByColumn(ltcID, m_arLeftLensTreatments[0].nTreatmentID);
						//TES 6/3/2011 - PLID 43737 - Make sure to hide the multi-select label
						m_nxlTreatmentsL.ShowWindow(SW_HIDE);
					}
					else {
						//TES 3/22/2011 - PLID 42761 - We need to get the treatment names, try to load them from the datalist to avoid a data access.
						CDWordArray dwMissingNames;
						CString strTreatmentNames;
						for(int i = 0; i < m_arLeftLensTreatments.GetSize(); i++) {
							IRowSettingsPtr pRow = m_pLensTreatmentsL->FindByColumn(ltcID, m_arLeftLensTreatments[i].nTreatmentID, NULL, g_cvarFalse);
							if(pRow) {
								strTreatmentNames += VarString(pRow->GetValue(ltcName), "") + ", ";
							}
							else {
								dwMissingNames.Add(m_arLeftLensTreatments[i].nTreatmentID);
							}
						}
						if(dwMissingNames.GetSize()) {
							//TES 3/22/2011 - PLID 42761 - Sigh, we'll have to check data.
							_RecordsetPtr rsTreatmentNames = CreateParamRecordset("SELECT TreatmentName FROM GlassesCatalogTreatmentsT "
								"WHERE ID IN ({INTARRAY})", dwMissingNames);
							while(!rsTreatmentNames->eof) {
								strTreatmentNames += AdoFldString(rsTreatmentNames, "TreatmentName", "") + ", ";
								rsTreatmentNames->MoveNext();
							}
						}

						strTreatmentNames = strTreatmentNames.Left(strTreatmentNames.GetLength()-2);
						m_nxlTreatmentsL.SetText(strTreatmentNames);
						GetDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L)->ShowWindow(SW_HIDE);
						m_nxlTreatmentsL.ShowWindow(SW_SHOWNA);
					}
					//TES 5/24/2011 - PLID 43790 - Now make any changes needed based on these treatments
					UpdateTreatmentServiceCodesL(arOriginalTreatments, m_arRightLensTreatments);
					//TES 4/18/2012 - PLID 49746 - We've gathered all the information we need from this object, so free up its memory.
					delete pGold;

				}
				else {
					SetDlgItemText(IDC_SPHERE_L, dlg.m_oLensRx.LensRxOS.strSphere  );
					FormatPrescriptionNumber(IDC_SPHERE_L, pnfSignedFloat);
					
					SetDlgItemText(IDC_CYLINDER_L, dlg.m_oLensRx.LensRxOS.strCylinder );
					FormatPrescriptionNumber(IDC_CYLINDER_L, pnfSignedFloat);
					
					SetDlgItemText(IDC_AXIS_L, dlg.m_oLensRx.LensRxOS.strAxis  );
					
					SetDlgItemText(IDC_ADDITION_L, dlg.m_oLensRx.LensRxOS.strAddition  );
					FormatPrescriptionNumber(IDC_ADDITION_L, pnfUnsignedFloat);
				
					SetDlgItemText(IDC_PRISM_L, dlg.m_oLensRx.LensRxOS.strPrism1 );
					FormatPrescriptionNumber(IDC_PRISM_L, pnfUnsignedFloat);

					SetDlgItemText(IDC_SECONDARY_PRISM_L, dlg.m_oLensRx.LensRxOS.strPrism2); 
					FormatPrescriptionNumber(IDC_SECONDARY_PRISM_L, pnfUnsignedFloat);
					
					SetDlgItemText(IDC_BASE_L,dlg.m_oLensRx.LensRxOS.strBase1 );
					FormatPrescriptionNumber(IDC_BASE_L, pnfBase);

					SetDlgItemText(IDC_SECONDARY_BASE_L, dlg.m_oLensRx.LensRxOS.strBase2);
					FormatPrescriptionNumber(IDC_SECONDARY_BASE_L, pnfBase);
					
					SetDlgItemText(IDC_DIST_PD_L, dlg.m_oLensRx.LensRxOS.strDistPD );
					FormatPrescriptionNumber(IDC_DIST_PD_L, pnfNaturalFloat);

					SetDlgItemText(IDC_NEAR_PD_L, dlg.m_oLensRx.LensRxOS.strNearPD );
					FormatPrescriptionNumber(IDC_NEAR_PD_L, pnfNaturalFloat);

					SetDlgItemText(IDC_HEIGHT_L, dlg.m_oLensRx.LensRxOS.strHeight );
					FormatPrescriptionNumber(IDC_HEIGHT_L, pnfNaturalFloat);
				}
			}
		}
	}
	
} NxCatchAll(__FUNCTION__);

}

/* (r.wilson 2012-20-2)  Function created by r.wilson but the guts created by s.dhole. 
      Function requeries the supplier data list.
*/
void CVisionWebOrderDlg::UpdateSupplierDataList()
{
	CString strWhere;
		// (s.dhole 2011-03-29 12:03) - PLID 43035 remove VisionWeb filter so user can select non-visionweb location
		// (s.dhole 2011-04-21 11:45) - PLID 43040 we need to show inactive Supplier only on Edit order screen 
		CString strFrom = FormatString(" SupplierT INNER JOIN \r\n"
			" PersonT ON SupplierT.PersonID = PersonT.ID LEFT OUTER JOIN \r\n"
			" GlassesSupplierLocationsT \r\n"
			" ON (SupplierT.PersonID = GlassesSupplierLocationsT.SupplierID AND GlassesSupplierLocationsT.LocationID = %li)",m_nLocationID );
		m_pSupplier->FromClause = _bstr_t(strFrom );
		strWhere.Format("(SupplierT.PersonID in (Select SupplierID From GlassesOrderT where ID=%li)  OR PersonT.Archived = 0) AND  ("
			" (SupplierT.PersonID IN (SELECT GlassesSupplierCatalogDesignsT.SupplierID  "
			" FROM GlassesSupplierCatalogDesignsT  "
			" WHERE (GlassesSupplierCatalogDesignsT.IsActive = 1) "
			" AND (GlassesSupplierCatalogDesignsT.GlassesCatalogDesignsID IN (%li,%li) "
			" OR (%li = -1 AND %li = -1))))) ", 
			m_nOrderID, m_nLeftDesignID, m_nRightDesignID, m_nLeftDesignID, m_nRightDesignID);
		m_pSupplier->WhereClause = _bstr_t(strWhere);
		m_pSupplier->Requery(); 
}

int CVisionWebOrderDlg::GetServiceCodeFromBarcode(WPARAM wParam, LPARAM lParam)
{
	int nFoundRow = 0;
	
	try{
		//r.wilson 3/5/2012 PLID 48294
		//bstr holds the actual barcode that was received	
		_bstr_t bstr = (BSTR)lParam;

		//r.wilson - find the row with the appropriate service code (barcode)	
		IRowSettingsPtr pRow = m_pServiceCodeList->FindByColumn(asccBarcode, bstr, NULL, VARIANT_FALSE);
			
		if(pRow && pRow != m_pFrame->CurSel) {	
			//r.wilson - if the service code exists then add it to the 'Items to Bill' datalist
			m_pServiceCodeList->CurSel = pRow;				

			long nServiceID =VarLong( pRow->GetValue(asccID),-1) ;
			BOOL bExist = FALSE;

			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - if we are not increasing the quantity, then we act as if the line item didnt exist
			//		allowing for new items to be added below
			if(m_bIncreaseItemToBillQty){
				if (nServiceID >-1){
					// Check if Service code exist and not link to any items
					for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
						if (m_arLenseServiceInfo[nCnt].nServiceID  ==nServiceID  
							&& m_arLenseServiceInfo[nCnt].bIsDefault==FALSE ){
								m_arLenseServiceInfo[nCnt].bIsDelete  =FALSE;
								m_arLenseServiceInfo[nCnt].nQty +=1;
								bExist = TRUE;
								break;
						}
					}
				}
			}

			if (bExist==FALSE && nServiceID >-1) {
				AddItemsToList(-1,FALSE,FALSE,-1,FALSE,-1,FALSE,-1,FALSE,pRow, m_vwot == vwotContactLensPatient?gostContactLens:gostOther) ;
			} else{
				//Nothing
			}


			//AddServiceCode(pRow, m_vwot == vwotContactLensPatient?gostContactLens:gostOther);
			//AddItemsToList(-1,FALSE,FALSE,-1,FALSE,-1,FALSE,-1,FALSE,pRow, gostOther)  ;
			RefreshServiceList();
			nFoundRow = 1;
		}
	}NxCatchAll("Error in GetServiceCodeFromBarcode");

	return nFoundRow;
}

int CVisionWebOrderDlg::GetProductCodeFromBarcode(WPARAM wParam, LPARAM lParam)
{
	int nFoundRow = 0;
	BOOL bOffTheShelf = FALSE;
	try{
		//r.wilson 3/5/2012 PLID 48294
		//bstr holds the actual barcode that was received	
		_bstr_t bstr = (BSTR)lParam;
			
		//r.wilson - find the row with the appropriate barcode (an inventory item)
		IRowSettingsPtr pRow = m_pProductList->FindByColumn(apcBarcode, bstr, NULL, VARIANT_FALSE);
		if(pRow && pRow != m_pFrame->CurSel) {			
			//r.wilson - if the barcode code exists then add it to the 'Items to Bill' datalist
			m_pProductList->CurSel = pRow;

			long nProductID = VarLong( pRow->GetValue(asccID),-1) ;
			BOOL bExist = FALSE;

			// (j.dinatale 2013-04-30 11:21) - PLID 56458 - if we are not increasing the quantity, then we act as if the line item didnt exist
			//		allowing for new items to be added below
			if(m_bIncreaseItemToBillQty){
				long tmpLength = m_arLenseServiceInfo.GetSize();
				if (nProductID >-1){
					// Check if Service code exist and not link to any items
					for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
						if (m_arLenseServiceInfo[nCnt].nServiceID  == nProductID  
							&& m_arLenseServiceInfo[nCnt].bIsDefault==FALSE ){
								m_arLenseServiceInfo[nCnt].bIsDelete  =FALSE;
								m_arLenseServiceInfo[nCnt].nQty +=1;
								bExist = TRUE;
								break;
						}
					}
				}
			}

			//AddProduct(pRow, 1, m_vwot == vwotContactLensPatient?gostContactLens:gostOther);
			if(bExist == FALSE && nProductID > -1){
				if  (IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED)){
					bOffTheShelf =TRUE;
				}

				AddItemsToList(nProductID /*-1*/,FALSE,FALSE,-1,FALSE,-1,FALSE,-1,FALSE,pRow, m_vwot == vwotContactLensPatient?gostContactLens:gostFrame,TRUE,FALSE,bOffTheShelf) ;				
			}

			RefreshServiceList();
			nFoundRow = 1;
		}		
	}NxCatchAll("Error in GetProductCodeFromBarcode");

	return nFoundRow;
}

//r.wilson 3/12/2012 PLID 47609 - This fires when the Exam Date textbox loses focus. It is responsible for automatically populating the Expiration date if the preference is set
void CVisionWebOrderDlg::KillFocusGlassesOrderRxDate()
{
	try{
		// (j.dinatale 2012-11-28 13:07) - PLID 53913 - call the function instead
		CalcNewExpirationDate();
	}NxCatchAll("Error in function KillFocusGlassesOrderRxDate")

}

// (j.dinatale 2012-11-28 13:07) - PLID 53913 - need to move this to its own function, this can happen in more than one place.
void CVisionWebOrderDlg::CalcNewExpirationDate()
{
	//r.wilson 3/12/2012 PLID 47609  (See line below)
	using namespace boost::gregorian; //This namespace is for the boost lib

	COleDateTime dtExamDateTmp;
	dtExamDateTmp = m_pRxDate->GetDateTime();	


	if(dtExamDateTmp.GetStatus() != COleDateTime::valid || m_pRxDate->GetDateTime() == NULL){
		//r.wilson 3/12/2012 PLID 47609 - Invalid Datetime so abandon the auto calculate
		return;
	}

	long nMonthsToAdd = -1;

	//(r.wilson 3/12/2012) PLID 47609 - the index is the number of months to go forward from the Exam Date		
	nMonthsToAdd = GetRemotePropertyInt("InvGlassesOrder_AutoCalcExpirationDateLength",/*default to 0 months*/ 0,0,"<None>",true);

	COleDateTime dtTmpDate = m_pRxDate->GetDateTime();

	//(r.wilson 3/12/2012) PLID 47609 -> from the boost lib ....
	/* Create a boost date based from our coledatetime. We do this because the coledatetime will not allow us to add months
	while at the same time changing the day based on events like leap years.... The boost lib does this. 
	*/
	date d(dtTmpDate.GetYear(),dtTmpDate.GetMonth(), dtTmpDate.GetDay());

	//Increase the current date by 'nMonthsToAdd' Months
	d += months(nMonthsToAdd);

	//Create a ColeDateTime from the pieces of the boost lib's date
	COleDateTime dtExpirationDateTmp(d.year(),d.month(), d.day() , dtTmpDate.GetHour() ,dtTmpDate.GetMinute(),dtTmpDate.GetSecond());

	m_pRxExpirationDate->SetDateTime(dtExpirationDateTmp);
}

// (s.dhole 2012-03-15 12:03) - PLID 48811
void CVisionWebOrderDlg::OnBnClickedChkFrameToBeOrdered()
{
	try 
	{
		// (j.dinatale 2013-02-11 09:47) - PLID 55093 - need to keep track of what the last manual set value was
		m_bSoldOffShelfManualSet = true;
		m_bSoldOffShelfManualLastVal = !!IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED);

		BOOL bOffTheShelf=FALSE;
		// (s.dhole 2012-05-18 14:36) - PLID 49925
		BOOL bIsBillable=FALSE;
		BOOL bIsTrackableStatus=FALSE;
		CheckFrameProductBillable(m_nFrameProductID, m_nLocationID  , bIsBillable,bIsTrackableStatus);
		if (bIsTrackableStatus==TRUE){
			GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(TRUE);
		}
		else{
			SetDlgItemCheck(IDC_CHK_FRAME_TO_BE_ORDERED,FALSE);
			GetDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED)->EnableWindow(FALSE);
		}
		if  (IsDlgButtonChecked(IDC_CHK_FRAME_TO_BE_ORDERED)){
			bOffTheShelf =TRUE;
		}
		for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  ){
			// (j.dinatale 2012-11-26 15:09) - PLID 53885 - need to ensure that we only update the off the shelf flag for the frame that is
			//		from our frames dropdown.
			if (m_arLenseServiceInfo[nCnt].nType == gostFrame && m_arLenseServiceInfo[nCnt].bIsDefault  ==TRUE){
				m_arLenseServiceInfo[nCnt].bIsOffTheShelf  = bOffTheShelf ; 
				RefreshServiceList(); 
				break;
			}
		}	
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-15 12:22) - PLID 48811 item is frame or any link service code then do not allow to change Qnt
void CVisionWebOrderDlg::EditingStartingGlassesOrderServices(LPDISPATCH lpRow, short nCol, VARIANT* pvarValue, BOOL* pbContinue)
{
	try 
	{
		IRowSettingsPtr pRow(lpRow);
		if (pRow)
		{
			_variant_t var  = pRow->GetValue(sscIsDefaultProduct );
			BOOL bIsDefault  =FALSE;
			if (var.vt != VT_NULL && var.lVal !=FALSE){
				bIsDefault  = TRUE   ;
			}
			else{
				//
			}

			if ( bIsDefault  && sscQty ==nCol &&  m_bIsGlassesBilled==FALSE) 
			{ 
				*pbContinue = FALSE;
			}
		}
	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2012-04-05 09:19) - PLID 43785
void CVisionWebOrderDlg::LeftClickGlassesOrderServices(LPDISPATCH lpRow, short nCol, long x, long y, long nFlags)
{
try {
		// (s.dhole 2012-04-16 11:22) - PLID 49728 do not allow discount dlg
		if (nCol==  sscDiscount && m_bIsGlassesBilled == FALSE )
		{
			IRowSettingsPtr pRow(lpRow);
			if (pRow)
			{
				for(int nCnt = 0 ; nCnt  < m_arLenseServiceInfo.GetSize(); nCnt ++  )
				{ 
					if(( VarLong(  pRow->GetValue(sscRowID ),-1)  == m_arLenseServiceInfo[nCnt].nRowID)  &&
					(m_arLenseServiceInfo[nCnt].bIsDelete ==FALSE ))
					{
						COleCurrency cyUnitCost = m_arLenseServiceInfo[nCnt].Price  ;
						COleCurrency cyOtherCost = COleCurrency(0,0);
						double dblQuantity = (double)m_arLenseServiceInfo[nCnt].nQty ;
						CChargeDiscountDlg dlg(this, -2 , m_arLenseServiceInfo[nCnt].DiscountList , TRUE, FALSE, TRUE, cyUnitCost, cyOtherCost, dblQuantity, m_arLenseServiceInfo[nCnt].strDescription );
						long nResult = dlg.DoModal();
						if (nResult ==IDOK )
						{
							RefreshServiceList(); 
						}
						break;
					}
				}
			}
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-09 11:58) - PLID 43785 Add discount to Glasses order items
// (s.dhole 2012-04-09 12:03) - PLID 49447 Support Contact lens order
void GlassesAuditAndGenerateSaveStringForDiscounts(long nPatientID, BOOL bNewCharge,BOOL bIsContact,CString strPatientName,long GlassesOrderServiceID ,
																DiscountList  *pDiscountList, CParamSqlBatch &batch,CSqlFragment &sqlSave ) {

	//initialize the save string
	if (!bNewCharge) {
		long nAuditID = -1;

		//we'll have to audit
		// (s.dhole 2012-05-24 09:53) - Remove Deleted column
		_RecordsetPtr rs = CreateParamRecordset("SELECT GlassesOrderServiceDiscountsT.*, "
			" CASE WHEN GlassesOrderServiceDiscountsT.DiscountCategoryID IS NULL THEN '<No Category>' ELSE CASE WHEN GlassesOrderServiceDiscountsT.DiscountCategoryID = -1 THEN '<Custom Discount Description>' ELSE  CASE WHEN GlassesOrderServiceDiscountsT.DiscountCategoryID = -2 THEN '<Coupon>' ELSE DiscountCategoriesT.Description END END END AS DiscountCategoryName, "
			" CASE WHEN GlassesOrderServiceDiscountsT.CouponID IS NULL THEN '' ELSE CouponsT.Description END AS CouponName "
			" FROM GlassesOrderServiceDiscountsT "
			" LEFT JOIN CouponsT ON GlassesOrderServiceDiscountsT.CouponID = CouponsT.ID "
			" LEFT JOIN DiscountCategoriesT ON GlassesOrderServiceDiscountsT.DiscountCategoryID = DiscountCategoriesT.ID "
			" WHERE GlassesOrderServiceID = {INT} ", GlassesOrderServiceID);
		while (!rs->eof) {

			long nDiscountID = AdoFldLong(rs, "ID");			
			CString oldVal, newVal;
			//get the corresponding Discount structure
			stDiscount Disc;
			if (!FindDiscountInArray(pDiscountList, nDiscountID, Disc)) {
				//we didn't find it, they must've deleted it
				if (nAuditID == -1) {
					nAuditID = BeginNewAuditEvent();
				}
				//we'll need to load it from data
				CString strDescription;

				strDescription += "Percent Off: " + AsString(AdoFldLong(rs, "PercentOff", 0)) + ";";
				strDescription += "Discount: " + FormatCurrencyForInterface(AdoFldCurrency(rs, "Discount", COleCurrency(0,0))) + ";";
			
				long nDiscountCatID = AdoFldLong(rs, "DiscountCategoryID", -3);
				if (nDiscountCatID == -1) {
					//custom discount
					strDescription += "Custom Category: " + AdoFldString(rs, "CustomDiscountDesc", "") + ";";
				}
				else if (nDiscountCatID == -2) {
					//coupon
					long nCouponID = AdoFldLong(rs, "CouponID", -1);
					if (nCouponID <= 0) {
						strDescription += "Coupon;";
					}
					else {
						strDescription += "Coupon: " + GetCouponName(nCouponID) + ";";
					}					
				}
				else if (nDiscountCatID == -3) {
					strDescription += "Discount Category: <No Category>;";
				}
				else {
					strDescription += "Discount Category: " + GetDiscountCategoryName(nDiscountCatID) + ";";
				}
				

				CString strAuditDesc = strDescription;
				if (bIsContact){
					AuditEvent(nPatientID, strPatientName, nAuditID,  aeiContactLensOrderDiscountDeleted   , GlassesOrderServiceID, strAuditDesc, "<Deleted>", aepMedium);
				}
				else{
					// (s.dhole 2012-04-23 10:36) - PLID 49888 Glasses order discount Audit
					AuditEvent(nPatientID, strPatientName, nAuditID,  aeiGlassesOrderDiscountDeleted  , GlassesOrderServiceID, strAuditDesc, "<Deleted>", aepMedium);
				}
				if (bIsContact){
					// (s.dhole 2012-05-24 09:53) - Remove Deleted column
					// (s.dhole 2012-05-25 15:21) - PLID 48888 
					sqlSave +=CSqlFragment("DELETE FROM  GlassesOrderServiceDiscountsT WHERE ID = {INT};", AdoFldLong(rs, "ID"));
				}
				else{
					// (s.dhole 2012-05-24 09:53) - Remove Deleted column
					// (s.dhole 2012-05-25 15:21) - PLID 48888 
					batch.Add ("DELETE FROM GlassesOrderServiceDiscountsT WHERE ID = {INT}", AdoFldLong(rs, "ID"));
				}
			}

			rs->MoveNext();
		}//end recordset
 	//now do new charges
		GlassesAuditAndGenerateSaveStringForNewDiscounts(nPatientID,FALSE,bIsContact, strPatientName,GlassesOrderServiceID, pDiscountList , batch ,sqlSave);

	}//end if NewCharge
	else {
		
		GlassesAuditAndGenerateSaveStringForNewDiscounts(nPatientID,TRUE, bIsContact,strPatientName,-1, pDiscountList , batch,sqlSave );
	}
}



// (s.dhole 2012-04-09 11:58) - PLID 43785 Glasses Discount
// (s.dhole 2012-04-09 12:03) - PLID 49447 Support Contact lens order
void GlassesAuditAndGenerateSaveStringForNewDiscounts(long nPatientID,BOOL bNewCharge,BOOL bIsContact, CString strPatientName,long GlassesOrderServiceID, DiscountList *pDiscountList, CParamSqlBatch &batch,CSqlFragment &sqlSave ) {
	
	
	long nAuditID = -1;
	//now we have to deal with all the discounts they created
	for (int i = 0; i < pDiscountList->aryDiscounts.GetSize(); i++) {

		stDiscount Disc = pDiscountList->aryDiscounts.GetAt(i);
		if (Disc.ID.lVal < 0) {

			if (!bNewCharge) {
				//its a new one, so audit
				if (nAuditID == -1) {
					nAuditID = BeginNewAuditEvent();
				}

				CString strAuditDesc = GetAuditDiscountDescription(Disc);
				
				if (bIsContact){
					AuditEvent(nPatientID, strPatientName, nAuditID, aeiContactLensOrderDiscountAdded , GlassesOrderServiceID, "<Created>", strAuditDesc, aepMedium);
				}
				else{
					// (s.dhole 2012-04-23 10:36) - PLID 49888 Glasses order discount
					AuditEvent(nPatientID, strPatientName, nAuditID, aeiGlassesOrderDiscountAdded , GlassesOrderServiceID, "<Created>", strAuditDesc, aepMedium);
				}
			}

			long nPercentOff = GetPercentOffSaveValue(Disc.PercentOff);
			CString strDiscount = GetDiscountSaveValue(Disc.Discount);
			CString strDiscountCategoryID, strCouponID, strCustomDiscountDesc;
			GetDiscountCategorySaveValues(Disc.DiscountCategoryID, Disc.CouponID, Disc.CustomDiscountDescription ,
				strDiscountCategoryID, strCouponID, strCustomDiscountDesc);
			_variant_t varCouponID = g_cvarNull; 
			_variant_t varDiscountCategoryID = g_cvarNull; 
			// (s.dhole 2012-05-25 15:21) - PLID 48888 Trim this value
			strDiscountCategoryID.Trim(); 
			if (strDiscountCategoryID.CompareNoCase("NULL")!=0) {
				varDiscountCategoryID =Disc.DiscountCategoryID;
			}
			// (s.dhole 2012-05-25 15:21) - PLID 48888 Trim this value
			strCouponID.Trim(); 
			if (strCouponID.CompareNoCase("NULL")!=0) {
				varCouponID =Disc.CouponID;
			}
			// (s.dhole 2012-04-26 17:47) - PLID 43785 fix SQL
			if (bIsContact){
				sqlSave +=CSqlFragment("INSERT INTO GlassesOrderServiceDiscountsT (GlassesOrderServiceID, PercentOff, Discount, CouponID, DiscountCategoryID, CustomDiscountDesc) VALUES "
				"(@nGlassesOrderServiceT , {INT}, {VT_CY}, {VT_I4},{ VT_I4}, {STRING});", 
				nPercentOff,Disc.Discount, varCouponID, varDiscountCategoryID, _Q(strCustomDiscountDesc));
			}
			else{
				batch.Add("INSERT INTO GlassesOrderServiceDiscountsT (GlassesOrderServiceID, PercentOff, Discount, CouponID, DiscountCategoryID, CustomDiscountDesc) VALUES "
				"(@nGlassesOrderServiceT , {INT}, {VT_CY}, {VT_I4},{ VT_I4}, {STRING});", 
				nPercentOff,Disc.Discount, varCouponID, varDiscountCategoryID, _Q(strCustomDiscountDesc));
			}

		}
	}

}

// (j.dinatale 2012-04-10 10:46) - PLID 49536 - optician field
void CVisionWebOrderDlg::SelChosenGlassesOrderOptician(LPDISPATCH lpRow)
{
	try{
		if(lpRow){
			NXDATALIST2Lib::IRowSettingsPtr pRow(lpRow);
			long nOpticianID = VarLong(pRow->GetValue(GlassesOrderOpticianList::ID), -1);
			if(nOpticianID == -1){
				m_pdlOpticianList->CurSel = NULL;
			}
		}
	}NxCatchAll(__FUNCTION__);
}



// (s.dhole 2012-04-16 16:54) - PLID 49728 if order is billed then we should not allow user to change few fields from order
void CVisionWebOrderDlg::ApplyBilledSetting()
{
	try {
		if (m_bIsGlassesBilled==FALSE)
			return;
		BOOL bLockCtl = FALSE; 	
		EnableDlgItem(IDC_VISIONWEB_PATIENT , bLockCtl);
		EnableDlgItem(IDC_SELECT_SERVICE_CODES , bLockCtl);
		EnableDlgItem(IDC_SELECT_PRODUCTS, bLockCtl);
		EnableDlgItem(IDC_SPHERE_R, bLockCtl);
		EnableDlgItem(IDC_COPY_PRESCRIPTION , bLockCtl);
		EnableDlgItem(IDC_COPY_LENS_DESIGN, bLockCtl);
		EnableDlgItem(IDC_COPY_LENS, bLockCtl);
		EnableDlgItem(IDC_SPHERE_L, bLockCtl);
		EnableDlgItem(IDC_FRAME, bLockCtl);
		EnableDlgItem(IDC_A_BOX, bLockCtl);
		EnableDlgItem(IDC_B_BOX , bLockCtl);
		EnableDlgItem(IDC_DBL, bLockCtl);
		EnableDlgItem(IDC_ED, bLockCtl);
		EnableDlgItem(IDC_AVAILABLE_SERVICE_CODES, bLockCtl);
		EnableDlgItem(IDC_AVAILABLE_PRODUCTS, bLockCtl);
		// (s.dhole 2012-04-16 12:59) - PLID 49729 
		EnableDlgItem(IDC_VISION_PLANS, bLockCtl);

		EnableDlgItem(IDC_VISIONWEB_LENS_DESIGN_R, bLockCtl);
		EnableDlgItem(IDC_VISIONWEB_LENS_DESIGN_L, bLockCtl);
		EnableDlgItem(IDC_VISIONWEB_LENS_MATERIAL_R, bLockCtl);
		EnableDlgItem(IDC_VISIONWEB_LENS_MATERIAL_L, bLockCtl);
		EnableDlgItem(IDC_TREATMENTS_LABEL_R, bLockCtl);
		EnableDlgItem(IDC_TREATMENTS_LABEL_L, bLockCtl);
		EnableDlgItem(IDC_VISIONWEB_LENS_TREATMENT_R, bLockCtl);
		EnableDlgItem(IDC_VISIONWEB_LENS_TREATMENT_L, bLockCtl);
		EnableDlgItem(IDC_CHK_FRAME_TO_BE_ORDERED, bLockCtl);
		EnableDlgItem(IDC_VISIONWEB_SUPPLIER, bLockCtl);
		EnableDlgItem(IDC_CATALOG_SETUP, bLockCtl);
		//(r.wilson 4/19/2013) pl PLID 56307 - Enable/disable these two as well
		EnableDlgItem(IDC_TEMPLE_LENGTH, bLockCtl);
		EnableDlgItem(IDC_EYE_SIZE, bLockCtl);
		
		m_pServices->GetColumn(sscPrice)->PutEditable(VARIANT_FALSE);
		m_pServices->GetColumn(sscQty)->PutEditable(VARIANT_FALSE);
		m_pServices->GetColumn(sscVisionResp)->PutEditable(VARIANT_FALSE);
		m_pServices->GetColumn(sscDiscount)->FieldType = cftTextSingleLine ;
		
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-16 12:59) - PLID 49729 
void CVisionWebOrderDlg::ApplyVisionPlanSetting()
{
	try {

		if ((m_pServices->GetColumnCount() -1) == sscPatientResp){
			m_pServices->RemoveColumn(sscPatientResp) ; 
		}
		if ((m_pServices->GetColumnCount() -1) == sscVisionResp){
			m_pServices->RemoveColumn(sscVisionResp)  ;
		}
		

		if (m_bIsGlassesvisionPlanExist==TRUE)
		{
			// (s.dhole 2012-06-05 11:07) - PLID 50777
			IColumnSettingsPtr pServicesCol = m_pServices->GetColumn(m_pServices->InsertColumn(sscVisionResp, _T("VisionResp"), _T("Insurance Resp."), 100, csVisible |csEditable | csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			pServicesCol = m_pServices->GetColumn(m_pServices->InsertColumn(sscPatientResp, _T("PatientResp"), _T("Patient Resp."), 100, csVisible | csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			
			GetDlgItem(IDC_GLS_ORD_VISION_RESP_AMT)->ShowWindow(SW_SHOW);
			GetDlgItem(IDC_STATIC_GLASSES_VISION_LABEL)->ShowWindow(SW_SHOW );

		}
		else
		{
			IColumnSettingsPtr pServicesCol = m_pServices->GetColumn(m_pServices->InsertColumn(sscVisionResp, _T("VisionResp"), _T("Vision Resp."), 0,  csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			pServicesCol = m_pServices->GetColumn(m_pServices->InsertColumn(sscPatientResp, _T("PatientResp"), _T("Patient Resp."), 100, csVisible | csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			GetDlgItem(IDC_GLS_ORD_VISION_RESP_AMT)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_STATIC_GLASSES_VISION_LABEL)->ShowWindow(SW_HIDE);
		}
		RefreshServiceList ();
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-20 14:34) - PLID 49992
void CVisionWebOrderDlg::OnSelChosenVisionPlan(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}
		long nInsuredPartyID = VarLong (pRow->GetValue( vpcPersonID) ,-1);

		if(pRow  && nInsuredPartyID >0){
			// (s.dhole 2012-04-20 14:34) - PLID 49729  Set visionPlan  flag
			m_bIsGlassesvisionPlanExist = TRUE;
			m_nInsuredPartyID =nInsuredPartyID ;
		}
		else{
			// (s.dhole 2012-04-20 14:34) - PLID 49729  Reset visionPlan  flag
			m_bIsGlassesvisionPlanExist = FALSE; 
		}
		// (s.dhole 2012-04-16 12:59) - PLID 49729
		CVisionWebOrderDlg::ApplyVisionPlanSetting();
		RefreshServiceList();
		
	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-04-20 14:34) - PLID 49992
void CVisionWebOrderDlg::SelChangingVisionPlan(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		if(*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-05-18 14:37) - PLID 49925
void CVisionWebOrderDlg::CheckFrameProductBillable(long nProductID,long  nLocationID,BOOL  &bIsBillable,BOOL  &bIsTrackableStatus )
{
	try {
		bIsTrackableStatus = FALSE;
		bIsBillable=FALSE;
		// We will consider Billable as primary flag, if it is true then only we cosider  Trackable
		// Quntity tracking =2 
		_RecordsetPtr rsFrameLocation = CreateParamRecordset("Select  * from ProductLocationInfoT WHERE LocationID ={INT} AND ProductID = {INT}" ,
		(m_nLocationID != -1) ?nLocationID:GetCurrentLocationID(), nProductID );
		if (!rsFrameLocation->eof){
			if (AdoFldBool(rsFrameLocation , "Billable",FALSE) ==TRUE){
				bIsBillable = TRUE;
			}
			// We will consider Billable as primary flag, if it is true then only we cosider  Trackable
			// Quntity tracking =2 
			if (bIsBillable == TRUE && AdoFldLong(rsFrameLocation , "TrackableStatus",-1) ==2){
				bIsTrackableStatus = TRUE;
			}
		}
	
	}NxCatchAll(__FUNCTION__);
}


void CVisionWebOrderDlg::OnSelChangingJobType(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		
		ASSERT(m_vwot == vwotSpectacleLens);
		if (*lppNewSel == NULL) {
				SafeSetCOMPointer(lppNewSel, lpOldSel);
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-05-22 09:29) - PLID 49734
void CVisionWebOrderDlg::OnSelChangingFrame(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		
		ASSERT(m_vwot == vwotSpectacleLens);
		if (*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}

		// (b.spivey, November 16, 2012) - PLID 53422 - Set the flag to update next interation. 
		// (j.dinatale 2013-02-11 09:42) - PLID 55093 - removed logic here that helped determine the auto set for the sold off shelf, it was wrong logic

	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2013-05-21 10:58) - PLID 56558 allow copy value if lens is identical
void CVisionWebOrderDlg::OnEnKillfocusThicknessR()
{
	try {
		if(m_bLensesIdentical) {
			IRowSettingsPtr pRow = m_pThicknessType->CurSel;
			if(pRow && (VarString(pRow->GetValue(ttcCode)) != "DRS" && VarString(pRow->GetValue(ttcCode)) != "")) {
			
				CString strThickness;
				GetDlgItemText(IDC_THICKNESS_R , strThickness);
				SetDlgItemText(IDC_THICKNESS_L , strThickness);
			}
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2013-05-21 10:58) - PLID 56558 allow copy value if lens is identical
void CVisionWebOrderDlg::OnEnKillfocusThicknessL()
{
	try {

		if(m_bLensesIdentical) {
	
			CString strThicknessL, strThicknessR;
			GetDlgItemText(IDC_THICKNESS_R, strThicknessL);
			GetDlgItemText(IDC_THICKNESS_L, strThicknessR);
			if(strThicknessL != strThicknessR) {
				m_bLensesIdentical = false;
			}
		}
	}NxCatchAll(__FUNCTION__);
}
