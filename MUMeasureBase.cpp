#include "stdafx.h"
#include "CCHITReportInfoListing.h"
#include "MUMeasureBase.h"

// (j.dinatale 2012-10-24 11:44) - PLID 53495 - Our base measure object, all measure objects must derive from this

CMUMeasureBase::CMUMeasureBase(void)
{
}

CMUMeasureBase::~CMUMeasureBase(void)
{
}

//Every MU measure should pull this common patient demographic data, and thus will need
//	to define a table to hold these fields.  Let's put them in one place to reduce an
//	awful lot of typing.
CString CMUMeasureBase::GetCommonDemographicsTableDefs()
{
	return "PersonID int NOT NULL, UserDefinedID int NOT NULL, Last nvarchar(50), Middle nvarchar(50), Birthdate datetime NULL, "
		"PatientCurrentAge int NULL, Address1 nvarchar(150), Address2 nvarchar(150), City nvarchar(50), "
		"State nvarchar(20), Zip nvarchar(20), HomePhone nvarchar(20), WorkPhone nvarchar(20)";
}

//This should mirror the above GetCommonDemographicsTableDefs -- if you need to create this table, at some point you need to fill it
CString CMUMeasureBase::GetCommonDemographicsFieldNames()
{
	return "PersonID, UserDefinedID, Last, Middle, Birthdate, PatientCurrentAge, Address1, Address2, City, State, Zip, HomePhone, WorkPhone ";
}


//Returns a subquery named MUPatientsOnlyBaseQ that is the base set of patients
//	filtered by the patient report filter.
//This was generated by evaluating the base of the patient-specific filtering in the old CCHITReportInfoListing file, all shared this code
//(s.dhole 7/25/2014 4:55 PM ) - PLID 63044
CSqlFragment CMUMeasureBase::GetPatientEmrIDBaseQuery()
{
	//Include all the useful demographic fields we can think of
	CSqlFragment f(
		"		(SELECT PatientsT.PersonID, PatientsT.UserDefinedID, PersonT.Last, PersonT.First, PersonT.Middle, PersonT.Birthdate,\r\n"
		"		dbo.AgeAt(PersonT.Birthdate, getdate()) AS PatientCurrentAge, PersonT.Address1, PersonT.Address2, PersonT.City,\r\n"
		"		PersonT.State, PersonT.Zip, PersonT.HomePhone, PersonT.WorkPhone, EMRFilterQ.EMRID \r\n"
		"		FROM PersonT "
		"		INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID\r\n"
		);

	//The patient range filtering is "Patients seen at...".  This means, does any EMN exist for any patient with the
	//	given filters?
	if (m_filterPatients.AreAnyActive(true)) {
		f += CSqlFragment(
			"	INNER JOIN (\r\n"
			"		SELECT DISTINCT PatientID,EMRMasterT.ID AS EMRID\r\n"
			"		FROM EMRMasterT\r\n"
			"		LEFT JOIN EMRProvidersT ON EMRMasterT.ID = EMRProvidersT.EMRID\r\n"
			"		LEFT JOIN EMRSecondaryProvidersT ON EMRMasterT.ID = EMRSecondaryProvidersT.EMRID\r\n"
			"		WHERE EMRMasterT.Deleted = 0 "
			//TODO:  [ExclusionsFilter]
			"		{SQL} "
			"	) EMRFilterQ ON PersonT.ID = EMRFilterQ.PatientID  		\r\n ",
			m_filterPatients.GenerateEMRFilter_ForPatientBaseMeasures()
			);
	}


	//Cap off the end of the query
	f +=
		"		WHERE PatientsT.CurrentStatus <> 4 AND PatientsT.PersonID > 0\r\n"
		"		) MUPatientsOnlyBaseQ\r\n";

	return f;
}



//Returns a subquery named MUPatientsOnlyBaseQ that is the base set of patients
//	filtered by the patient report filter.
//This was generated by evaluating the base of the patient-specific filtering in the old CCHITReportInfoListing file, all shared this code
CSqlFragment CMUMeasureBase::GetPatientBaseQuery()
{
	//Include all the useful demographic fields we can think of
	CSqlFragment f(
		"		(SELECT PatientsT.PersonID, PatientsT.UserDefinedID, PersonT.Last, PersonT.First, PersonT.Middle, PersonT.Birthdate,\r\n"
		"		dbo.AgeAt(PersonT.Birthdate, getdate()) AS PatientCurrentAge, PersonT.Address1, PersonT.Address2, PersonT.City,\r\n"
		"		PersonT.State, PersonT.Zip, PersonT.HomePhone, PersonT.WorkPhone\r\n"
		"		FROM PersonT "
		"		INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID\r\n"
	);

	//The patient range filtering is "Patients seen at...".  This means, does any EMN exist for any patient with the
	//	given filters?
	if(m_filterPatients.AreAnyActive(true)) {
		f += CSqlFragment(
			"	INNER JOIN (\r\n"
			"		SELECT DISTINCT PatientID\r\n"
			"		FROM EMRMasterT\r\n"
			"		LEFT JOIN EMRProvidersT ON EMRMasterT.ID = EMRProvidersT.EMRID\r\n"
			"		LEFT JOIN EMRSecondaryProvidersT ON EMRMasterT.ID = EMRSecondaryProvidersT.EMRID\r\n"
			"		WHERE EMRMasterT.Deleted = 0 "
			//TODO:  [ExclusionsFilter]
			"		{SQL} "
			"	) EMRFilterQ ON PersonT.ID = EMRFilterQ.PatientID \r\n ",
			m_filterPatients.GenerateEMRFilter_ForPatientBaseMeasures()
		);
	}


	//Cap off the end of the query
	f += 
		"		WHERE PatientsT.CurrentStatus <> 4 AND PatientsT.PersonID > 0\r\n"
		"		) MUPatientsOnlyBaseQ\r\n";

	return f;
}

// returns all patients in our two ranges that we are interested in
// (r.farnworth 2014-04-21 13:48) - PLID 61060 - Meaningful Use Lab Reports were not properly filtering out Discontinued Labs
// (r.farnworth 2014-05-19 08:10) - PLID 59575 - Added TwoyearsPrior
// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Removed the bool and added UnionType enum
CSqlFragment CMUMeasureBase::GetAllMUPatients(MU::UnionType ToJoin)
{
	CSqlFragment sql = CSqlFragment(
		"SELECT  "
		"DISTINCT MUAllPatientsQ.PersonID  "
		"FROM "
		"( "
		"	SELECT  "
		"	DISTINCT MUPatientsQ.PersonID "
		"	FROM  "
		"	( \r\n"
		"		SELECT  "
		"		EMRMasterT.PatientID AS PersonID "
		"		FROM  "
		"		EMRMasterT "
		"		WHERE EMRMasterT.DELETED = 0 "
		"		{SQL} "
		"		{SQL} \r\n",
		m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures(),
		m_filterPatients.GenerateEMRFilter_ForPatientBaseMeasures()
		);
		
	// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Find what measure we are trying to build a query for and union on the proper subquery
	switch (ToJoin)
	{
		//Just continue on to the bottom. This is for measures that just require emn data to appear in the denominator.
		case MU::UnionType::EMR:
			break;

		//Created Specifically for DEM_00. This needs to hit every Stage 1 union.
		case MU::UnionType::AllStage1:
		{
			sql +=
				(
					UnioneRx()
					+ UnionLabResults()
					+ UnionS1Reminders()
				);
			break;
		}

		//Created Specifically for DEM_00. This needs to hit every Stage 2 union.
		case MU::UnionType::AllStage2:
		{
			sql +=
				(
					UnioneRx()
					+ UnionS2CPOEMeds()
					+ UnionCPOERads()
					+ UnionCPOELabs()
					+ UnionLabResults()
					+ UnionImagingResults()
					+ UnionS2Reminders()
				);
			break;
		}

		case MU::UnionType::ePrescribe:
		{
			sql += UnioneRx();
			break;
		}

		case MU::UnionType::CPOEMedicationsStage2:
		{
			sql += UnionS2CPOEMeds();
			break;
		}

		case MU::UnionType::CPOERadiologies:
		{
			sql += UnionCPOERads();
			break;
		}

		case MU::UnionType::CPOELaboratories:
		{
			sql += UnionCPOELabs();
			break;
		}

		case MU::UnionType::LabResults:
		{
			sql += UnionLabResults();
			break;
		}

		case MU::UnionType::ImagingResults:
		{
			sql += UnionImagingResults();
			break;
		}

		case MU::UnionType::RemindersStage1:
		{
			sql += UnionS1Reminders();
			break;
		}

		// (r.farnworth 2014-05-19 08:10) - PLID 59575 - Added TwoyearsPrior (bool since removed)
		case MU::UnionType::RemindersStage2:
		{
			//(s.dhole 9/26/2014 8:39 AM ) - PLID 63765 it should call UnionS2Reminders not UnionS1Reminders
			sql += UnionS2Reminders();
			break;
		}

	}


		sql += CSqlFragment(
			"	) MUPatientsQ \r\n"
			"	INNER JOIN PatientsT ON MUPatientsQ.PersonID = PatientsT.PersonID "
			"	WHERE  "
			"	PatientsT.CurrentStatus <> 4  "
			"	AND PatientsT.PersonID > 0 "
			") MUAllPatientsQ "
		);

	return sql;
}



//Returns a subquery named MUPatientEMRBaseQ that contains all the filtered patients and their filtered EMNs
//This was generated by evaluating the base of the patient-specific filtering in the old CCHITReportInfoListing file, all shared this code
//(s.dhole 8/1/2014 3:53 PM ) - PLID 63044  this function  based on GetPatientEMRBaseQuery, added EMRID
CSqlFragment CMUMeasureBase::GetPatientEMRIDBaseQuery()
{
	//The base of this query is the patient base
	//TODO:  Any other emr data we need?
	CSqlFragment f(
		"	(SELECT " + GetCommonDemographicsFieldNames() + ", EMRMasterT.Date AS Date, EMRMasterT.ID AS EMRID, "
		"	EMRMasterT.PatientAge as PatientAge \r\n"
		"	FROM\r\n"
		"	{SQL} ",
		//(s.dhole 8/1/2014 3:56 PM ) - PLID 63044
		GetPatientEmrIDBaseQuery()
		);

	//The MU report range filtering is for all data in the reporting range.  This means we want to know all EMNs for these patients in the range
	//TODO:  I think this is wrong... we're joining to every provider / sec provider.  Can we group?
	if (m_filterMURange.AreAnyActive(true)) {
		f += CSqlFragment(
			"	INNER JOIN (\r\n"
			"		SELECT DISTINCT PatientID, EMRMasterT.ID AS EMRID FROM EMRMasterT\r\n"
			"		LEFT JOIN EMRProvidersT ON EMRMasterT.ID = EMRProvidersT.EMRID\r\n"
			"		LEFT JOIN EMRSecondaryProvidersT ON EMRMasterT.ID = EMRSecondaryProvidersT.EMRID\r\n"
			"		WHERE EMRMasterT.Deleted = 0 "
			//TODO:  [ExclusionsFilter] "
			"		{SQL} "
			"	) EMRPatFilterQ ON (MUPatientsOnlyBaseQ.PersonID = EMRPatFilterQ.PatientID  AND MUPatientsOnlyBaseQ.EMRID = EMRPatFilterQ.EMRID  \r\n  ) ",

			m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures()
			);
	}

	f += CSqlFragment(
		"	LEFT JOIN EMRMasterT ON MUPatientsOnlyBaseQ.EMRID = EMRMasterT.ID\r\n"
		"	LEFT JOIN EMRProvidersT ON EMRMasterT.ID = EMRProvidersT.EMRID\r\n"
		"	LEFT JOIN EMRSecondaryProvidersT ON EMRMasterT.ID = EMRSecondaryProvidersT.EMRID\r\n"
		"	WHERE EMRMasterT.Deleted = 0  {SQL} \r\n "
		"	) MUPatientEMRBaseQ\r\n"
		, m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures()
		);
	//TODO:  Exclusions

	return f;
}



//Returns a subquery named MUPatientEMRBaseQ that contains all the filtered patients and their filtered EMNs
//This was generated by evaluating the base of the patient-specific filtering in the old CCHITReportInfoListing file, all shared this code
CSqlFragment CMUMeasureBase::GetPatientEMRBaseQuery()
{
	//The base of this query is the patient base
	//TODO:  Any other emr data we need?
	CSqlFragment f(
		"	(SELECT " + GetCommonDemographicsFieldNames() + ", EMRMasterT.Date AS Date, EMRMasterT.ID AS EMRID, "
		"	EMRMasterT.PatientAge as PatientAge \r\n"
		"	FROM\r\n"
		"	{SQL} ",
		GetPatientBaseQuery()
	);

	//The MU report range filtering is for all data in the reporting range.  This means we want to know all EMNs for these patients in the range
	//TODO:  I think this is wrong... we're joining to every provider / sec provider.  Can we group?
	if(m_filterMURange.AreAnyActive(true)) {
		f += CSqlFragment(
			"	INNER JOIN (\r\n"
			"		SELECT DISTINCT PatientID FROM EMRMasterT\r\n"
			"		LEFT JOIN EMRProvidersT ON EMRMasterT.ID = EMRProvidersT.EMRID\r\n"
			"		LEFT JOIN EMRSecondaryProvidersT ON EMRMasterT.ID = EMRSecondaryProvidersT.EMRID\r\n"
			"		WHERE EMRMasterT.Deleted = 0 "
			//TODO:  [ExclusionsFilter] "
			"		{SQL} "
			"	) EMRPatFilterQ ON MUPatientsOnlyBaseQ.PersonID = EMRPatFilterQ.PatientID\r\n ",
			m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures()
		);
	}

	f += CSqlFragment(
		"	LEFT JOIN EMRMasterT ON MUPatientsOnlyBaseQ.PersonID = EMRMasterT.PatientID\r\n"
		"	LEFT JOIN EMRProvidersT ON EMRMasterT.ID = EMRProvidersT.EMRID\r\n"
		"	LEFT JOIN EMRSecondaryProvidersT ON EMRMasterT.ID = EMRSecondaryProvidersT.EMRID\r\n"
		"	WHERE EMRMasterT.Deleted = 0  {SQL} \r\n "
		"	) MUPatientEMRBaseQ\r\n"
		, m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures()
	);
	//TODO:  Exclusions

	return f;
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 1 and 2 eRx
CSqlFragment CMUMeasureBase::UnioneRx()
{
	return CSqlFragment(
		"	UNION \r\n"
		"		SELECT  "
		"		PatientMedications.PatientID "
		"		FROM "
		"		PatientMedications "
		"		INNER JOIN DrugList ON (PatientMedications.MedicationID = DrugList.ID "
		//(s.dhole 8/1/2014 3:22 PM ) - PLID 63046 Exclude void prescriptions
		"		  AND PatientMedications.QueueStatus <>14) "
		"		WHERE  "
		"		PatientMedications.Deleted = 0  "
		"		{SQL} "
		"		{SQL} "
		"		AND PatientMedications.Discontinued = 0 "
		"		AND RTRIM(LTRIM(DEASchedule)) = '' \r\n",
		m_filterMURange.GenerateFieldFilter("PatientMedications.PrescriptionDate", "PatientMedications.ProviderID", "PatientMedications.LocationID"),
		m_filterPatients.GenerateFieldFilter("PatientMedications.PrescriptionDate", "PatientMedications.ProviderID", "PatientMedications.LocationID")
	);
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 2 CPOEMeds
CSqlFragment CMUMeasureBase::UnionS2CPOEMeds()
{
	return CSqlFragment(
		"	UNION \r\n"
		"	SELECT PatientID AS PersonID FROM PatientMedications "
		"	WHERE DELETED = 0 AND Discontinued = 0 "
		"	{SQL} {SQL} "
		"	AND PatientMedications.PatientID IN(SELECT PersonID FROM PatientsT WHERE CurrentStatus <> 4 and PersonID > 0) "
		"	UNION \r\n"
		"		SELECT Mailsent.PersonID "
		"		FROM MailSent "
		"		INNER JOIN ( "
		"			SELECT PersonT.ID AS PatientID "
		"			FROM "
		"			PersonT "
		"			INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID "
		"			WHERE PersonT.ID > 0 AND PatientsT.CurrentStatus <> 4 "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"		) PatFilterQ ON MailSent.PersonID = PatFilterQ.PatientID "
		"		WHERE "
		"		MailSent.CategoryID IN (SELECT IntParam FROM ConfigRT WHERE Name = {STRING}) "
		"		{SQL} "
		"		{SQL} ",
		m_filterMURange.GenerateFieldFilter("PatientMedications.PrescriptionDate", "PatientMedications.ProviderID", "PatientMedications.LocationID"),
		m_filterPatients.GenerateFieldFilter("PatientMedications.PrescriptionDate", "PatientMedications.ProviderID", "PatientMedications.LocationID"),
		m_filterMURange.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterMURange.GenerateLocationFilter("PersonT.Location"),
		m_filterPatients.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterPatients.GenerateLocationFilter("PersonT.Location"),
		("CCHITReportInfo_MU2.C01A - Medications orders which have been entered through CPOE"),
		m_filterMURange.GenerateDateFilter("MailSent.ServiceDate"),
		m_filterPatients.GenerateDateFilter("MailSent.ServiceDate")
	);
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 2  CPOE Radiology
CSqlFragment CMUMeasureBase::UnionCPOERads()
{
	return CSqlFragment(
		"	UNION \r\n"
		"	SELECT PatientID AS PersonID FROM LabsT "
		"	INNER JOIN LabMultiProviderT ON LabsT.ID = LabMultiProviderT.LabID "
		"	WHERE DELETED = 0 AND Discontinued = 0 AND Type = 4 "
		"	{SQL} {SQL} {SQL} {SQL} {SQL} {SQL} "
		"	AND LabsT.PatientID IN (SELECT PersonID FROM PatientsT WHERE CurrentStatus <> 4 and PersonID > 0) "
		"	UNION \r\n"
		"		SELECT Mailsent.PersonID "
		"		FROM MailSent "
		"		INNER JOIN ( "
		"			SELECT PersonT.ID AS PatientID "
		"			FROM "
		"			PersonT "
		"			INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID "
		"			WHERE PersonT.ID > 0 AND PatientsT.CurrentStatus <> 4 "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"		) PatFilterQ ON MailSent.PersonID = PatFilterQ.PatientID "
		"		WHERE "
		"		MailSent.CategoryID IN (SELECT IntParam FROM ConfigRT WHERE Name = {STRING}) "
		"		{SQL} "
		"		{SQL} ",
		m_filterMURange.GenerateProviderFilter("LabMultiProviderT.ProviderID"),
		m_filterMURange.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterMURange.GenerateLocationFilter("LabsT.LocationID"),
		m_filterPatients.GenerateProviderFilter("LabMultiProviderT.ProviderID"),
		m_filterPatients.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterPatients.GenerateLocationFilter("LabsT.LocationID"),
		m_filterMURange.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterMURange.GenerateLocationFilter("PersonT.Location"),
		m_filterPatients.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterPatients.GenerateLocationFilter("PersonT.Location"),
		("CCHITReportInfo_MU2.C01B - Radiology orders which have been entered through CPOE"),
		m_filterMURange.GenerateDateFilter("MailSent.ServiceDate"),
		m_filterPatients.GenerateDateFilter("MailSent.ServiceDate")
	);
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 2 CPOE Labs
CSqlFragment CMUMeasureBase::UnionCPOELabs()
{
	return CSqlFragment(
		"		UNION \r\n"
		"		SELECT PatientID AS PersonID FROM LabsT "
		"		INNER JOIN LabMultiProviderT ON LabsT.ID = LabMultiProviderT.LabID "
		"		WHERE DELETED = 0 AND Discontinued = 0 AND Type IN (1,2,3) "
		"		{SQL} {SQL} {SQL} {SQL} {SQL} {SQL} "
		"		AND LabsT.PatientID IN (SELECT PersonID FROM PatientsT WHERE CurrentStatus <> 4 and PersonID > 0) "
		"		UNION \r\n"
		"		SELECT Mailsent.PersonID "
		"		FROM MailSent "
		"		INNER JOIN ( "
		"			SELECT PersonT.ID AS PatientID "
		"			FROM "
		"			PersonT "
		"			INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID "
		"			WHERE PersonT.ID > 0 AND PatientsT.CurrentStatus <> 4 "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"		) PatFilterQ ON MailSent.PersonID = PatFilterQ.PatientID "
		"		WHERE "
		"		MailSent.CategoryID IN (SELECT IntParam FROM ConfigRT WHERE Name = {STRING}) "
		"		{SQL} "
		"		{SQL} ",
		m_filterMURange.GenerateProviderFilter("LabMultiProviderT.ProviderID"),
		m_filterMURange.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterMURange.GenerateLocationFilter("LabsT.LocationID"),
		m_filterPatients.GenerateProviderFilter("LabMultiProviderT.ProviderID"),
		m_filterPatients.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterPatients.GenerateLocationFilter("LabsT.LocationID"),
		m_filterMURange.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterMURange.GenerateLocationFilter("PersonT.Location"),
		m_filterPatients.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterPatients.GenerateLocationFilter("PersonT.Location"),
		("CCHITReportInfo_MU2.C01C - Laboratory orders which have been entered through CPOE"),
		m_filterMURange.GenerateDateFilter("MailSent.ServiceDate"),
		m_filterPatients.GenerateDateFilter("MailSent.ServiceDate")
	);
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 1 and 2 Clinical Lab Results
CSqlFragment CMUMeasureBase::UnionLabResults()
{
	return CSqlFragment(
		"   UNION  \r\n "
		"	SELECT PatientID \r\n "
		"   FROM LabsT \r\n "
		"	INNER JOIN ( "
		"		SELECT DISTINCT LabID FROM LabMultiProviderT WHERE (1=1) {SQL} {SQL}"
		"	) LabProvQ ON LabsT.ID = LabProvQ.LabID "
		"   WHERE  \r\n "
		"   LabsT.ID IN (SELECT LabID FROM LabResultsT "
		"	 WHERE LabResultsT.Deleted = 0 "
		"    AND LabsT.Deleted = 0 AND LabsT.Discontinued = 0 \r\n "
		"	 {SQL} {SQL}"
		") "
		"	{SQL} {SQL}\r\n"
		"	UNION \r\n"
		"		SELECT Mailsent.PersonID "
		"		FROM MailSent "
		"		INNER JOIN ( "
		"			SELECT PersonT.ID AS PatientID "
		"			FROM "
		"			PersonT "
		"			INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID "
		"			WHERE PersonT.ID > 0 AND PatientsT.CurrentStatus <> 4 "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"		) PatFilterQ ON MailSent.PersonID = PatFilterQ.PatientID "
		"		WHERE "
		"		MailSent.CategoryID IN (SELECT IntParam FROM ConfigRT WHERE Name = {STRING}) "
		"		{SQL} "
		"		{SQL} ",
		m_filterMURange.GenerateLocationFilter("LabMultiProviderT.ProviderID"),
		m_filterPatients.GenerateLocationFilter("LabMultiProviderT.ProviderID"),
		m_filterMURange.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterPatients.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterMURange.GenerateLocationFilter("LabsT.LocationID"),
		m_filterPatients.GenerateLocationFilter("LabsT.LocationID"),
		m_filterMURange.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterMURange.GenerateLocationFilter("PersonT.Location"),
		m_filterPatients.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterPatients.GenerateLocationFilter("PersonT.Location"),
		("CCHITReportInfo_MU.11 - Clinical Labs having results in structured data."),
		m_filterMURange.GenerateDateFilter("MailSent.ServiceDate"),
		m_filterPatients.GenerateDateFilter("MailSent.ServiceDate")
	);
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 2 Imaging Results
CSqlFragment CMUMeasureBase::UnionImagingResults()
{
	return CSqlFragment(
		"	UNION \r\n"
		"	SELECT PatientID "
		"	FROM LabsT "
		"	INNER JOIN ( "
		"		SELECT DISTINCT LabID FROM LabMultiProviderT WHERE(1 = 1) {SQL} {SQL} "
		"	) LabProvQ ON LabsT.ID = LabProvQ.LabID "
		"	WHERE LabsT.Deleted = 0 "
		"	AND LabsT.Discontinued = 0 "
		"	AND LabsT.TYPE = 4 "
		"   {SQL} "
		"   {SQL} "
		"   {SQL} "
		"   {SQL} "
		"	AND LabsT.PatientID IN "
		"	( "
		"		SELECT PersonID "
		"		FROM PatientsT "
		"		WHERE CurrentStatus <> 4 "
		"		AND PersonID > 0"
		"	) "
		"	UNION \r\n"
		"		SELECT Mailsent.PersonID "
		"		FROM MailSent "
		"		INNER JOIN ( "
		"			SELECT PersonT.ID AS PatientID "
		"			FROM "
		"			PersonT "
		"			INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID "
		"			WHERE PersonT.ID > 0 AND PatientsT.CurrentStatus <> 4 "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"			{SQL} "
		"		) PatFilterQ ON MailSent.PersonID = PatFilterQ.PatientID "
		"		WHERE "
		"		MailSent.CategoryID IN (SELECT IntParam FROM ConfigRT WHERE Name = {STRING}) "
		"		{SQL} "
		"		{SQL} ",
		m_filterMURange.GenerateProviderFilter("LabMultiProviderT.ProviderID"),
		m_filterPatients.GenerateProviderFilter("LabMultiProviderT.ProviderID"),
		m_filterMURange.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterPatients.GenerateDateFilter("LabsT.BiopsyDate"),
		m_filterMURange.GenerateLocationFilter("LabsT.LocationID"),
		m_filterPatients.GenerateLocationFilter("LabsT.LocationID"),
		m_filterMURange.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterPatients.GenerateProviderFilter("PatientsT.MainPhysician"),
		m_filterMURange.GenerateLocationFilter("PersonT.Location"),
		m_filterPatients.GenerateLocationFilter("PersonT.Location"),
		("CCHITReportInfo_MU2.M03 - Number of test whose result is one or more images that were received"),
		m_filterMURange.GenerateDateFilter("MailSent.ServiceDate"),
		m_filterPatients.GenerateDateFilter("MailSent.ServiceDate")
	);
}

// (r.farnworth 2014-06-04 16:37) - PLID 62325 - Stage 1 Reminders
CSqlFragment CMUMeasureBase::UnionS1Reminders()
{
	return CSqlFragment(
		"	UNION \r\n"
		// this gives everyone who is under 5 or over 65 during the date range of the reporting period
		"	SELECT PersonID FROM "
		"	PersonT INNER JOIN PatientsT ON PersonT.ID = PatientsT.PersonID "
		"   INNER JOIN EMRMasterT ON PatientsT.PersonID = EMRMasterT.PatientID "
		"   WHERE EMRMasterT.Deleted = 0 {SQL} {SQL} "
		"   AND ((CASE WHEN PersonT.BirthDate Is Null then NULL ELSE DATEDIFF(YYYY, PersonT.Birthdate, {OLEDATETIME}) - "
		"   CASE WHEN MONTH(PersonT.Birthdate) > MONTH({OLEDATETIME}) OR (MONTH(PersonT.Birthdate) = MONTH({OLEDATETIME})  "
		"   AND DAY(PersonT.Birthdate) > DAY({OLEDATETIME}))  "
		"   THEN 1 ELSE 0 END END) <= 5 OR "
		"   (CASE WHEN PersonT.BirthDate Is Null then NULL ELSE DATEDIFF(YYYY, PersonT.Birthdate, {OLEDATETIME}) - "
		"   CASE WHEN MONTH(PersonT.Birthdate) > MONTH({OLEDATETIME}) OR (MONTH(PersonT.Birthdate) = MONTH({OLEDATETIME})  "
		"   AND DAY(PersonT.Birthdate) > DAY({OLEDATETIME}))  "
		"   THEN 1 ELSE 0 END END) >= 65) ",
		m_filterPatients.GenerateEMRFilter_ForPatientBaseMeasures(FALSE),
		m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures(FALSE),
		m_filterMURange.m_dtFromDate,
		m_filterMURange.m_dtFromDate,
		m_filterMURange.m_dtFromDate,
		m_filterMURange.m_dtFromDate,
		m_filterMURange.m_dtToDate,
		m_filterMURange.m_dtToDate,
		m_filterMURange.m_dtToDate,
		m_filterMURange.m_dtToDate
	);
}


// (r.farnworth 2014-06-04 16:37) - Stage 2 Reminders
// (d.singleton 2014-09-05 11:22) - PLID 63457 - MU2 Core 12 (Reminders) - Bills not filtering on Provider - Detailed
CSqlFragment CMUMeasureBase::UnionS2Reminders()
{
	CString strCodes = GetRemotePropertyText("CCHIT_MU.13_CODES", MU_13_DEFAULT_CODES, 0, "<None>", true);

	return CSqlFragment(
		"	UNION \r\n"
		"	SELECT Q.PatientID AS PersonID"
		"	FROM( "
		"		SELECT EMRMasterT.PatientID, EMRMasterT.DATE, ChargeID, EMRMasterT.ID "
		"		FROM EMRMasterT "
		"		INNER JOIN( "
		"			SELECT EMRInnerT.PatientID, EMRInnerT.DATE, EMRInnerT.ID AS ChargeID "
		"			FROM EMRMasterT EMRInnerT "
		"			LEFT JOIN EMRChargesT ON EMRInnerT.ID = EMRChargesT.EMRID "
		"			INNER JOIN ServiceT ON EMRChargesT.ServiceID = ServiceT.ID "
		"			INNER JOIN CPTCodeT ON ServiceT.ID = CPTCodeT.ID "
		"			WHERE CPTCodeT.Code IN ({CONST_STRING}) "
		"			AND EMRChargesT.Deleted = 0 "
		"			AND EMRInnerT.DELETED = 0 "
		"           {SQL} "
		"			UNION "
		"			SELECT LineItemT.PatientID, LineItemT.DATE, LineItemT.ID AS ChargeID "
		"			FROM LineItemT "
		"			INNER JOIN ChargesT ON LineItemT.ID = ChargesT.ID "
		"			INNER JOIN CPTCodeT ON ChargesT.ServiceID = CPTCodeT.ID "
		"			LEFT JOIN LineItemCorrectionsT OrigLineItems ON LineItemT.ID = OrigLineItems.OriginalLineItemID "
		"			LEFT JOIN LineItemCorrectionsT AS VoidingLineItemsQ ON LineItemT.ID = VoidingLineItemsQ.VoidingLineItemID "
		"			WHERE VoidingLineItemsQ.VoidingLineItemID IS NULL AND OrigLineItems.OriginalLineItemID IS NULL "
		"			AND LineItemT.Type = 10 "
		"			AND LineItemT.Deleted = 0 "
		"			AND CPTCodeT.Code IN ({CONST_STRING}) "
		"           {SQL} "
		"		) ChargeFilterQ ON EMRMasterT.PatientID = ChargeFilterQ.PatientID "
		"			AND ChargeFilterQ.DATE = EmrMasterT.DATE "
		"		WHERE EMRMasterT.Deleted = 0 {SQL} {SQL} "
		"	 ) Q "
		"	INNER JOIN ( "
		"		SELECT EMRMasterT.PatientID, EMRMasterT.DATE, ChargeID, EMRMasterT.ID "
		"		 FROM EMRMasterT "
		"		INNER JOIN( "
		"			SELECT EMRInnerT.PatientID, EMRInnerT.DATE, EMRInnerT.ID AS ChargeID "
		"			FROM EMRMasterT EMRInnerT "
		"			LEFT JOIN EMRChargesT ON EMRInnerT.ID = EMRChargesT.EMRID "
		"			INNER JOIN ServiceT ON EMRChargesT.ServiceID = ServiceT.ID "
		"			INNER JOIN CPTCodeT ON ServiceT.ID = CPTCodeT.ID "
		"			WHERE CPTCodeT.Code IN ({CONST_STRING}) "
		"			AND EMRChargesT.Deleted = 0 "
		"			AND EMRInnerT.DELETED = 0 "
		"           {SQL} "
		"			UNION "
		"			SELECT LineItemT.PatientID, LineItemT.DATE, LineItemT.ID AS ChargeID "
		"			FROM LineItemT "
		"			INNER JOIN ChargesT ON LineItemT.ID = ChargesT.ID "
		"			INNER JOIN CPTCodeT ON ChargesT.ServiceID = CPTCodeT.ID "
		"			LEFT JOIN LineItemCorrectionsT OrigLineItems ON LineItemT.ID = OrigLineItems.OriginalLineItemID "
		"			LEFT JOIN LineItemCorrectionsT AS VoidingLineItemsQ ON LineItemT.ID = VoidingLineItemsQ.VoidingLineItemID "
		"			WHERE VoidingLineItemsQ.VoidingLineItemID IS NULL AND OrigLineItems.OriginalLineItemID IS NULL "
		"			AND LineItemT.Type = 10 "
		"			AND LineItemT.Deleted = 0 "
		"			AND CPTCodeT.Code IN ({CONST_STRING}) "
		"           {SQL} "
		"		) ChargeFilterQ ON EMRMasterT.PatientID = ChargeFilterQ.PatientID "
		"			AND ChargeFilterQ.DATE = EmrMasterT.DATE "
		"		WHERE EMRMasterT.Deleted = 0 {SQL} {SQL} "
		"	) N ON Q.PatientID = N.PatientID "
		"	WHERE Q.DATE >= DATEADD(year, -2, {OLEDATETIME}) "
		"	AND Q.DATE < {OLEDATETIME} "
		"	AND  N.DATE >= DATEADD(year, -2, {OLEDATETIME}) "
		"	AND N.DATE < {OLEDATETIME} "
		"	AND Q.ChargeID <> N.ChargeID "
		"	AND Q.ID <> N.ID "
		, strCodes
		, m_filterPatients.GenerateEMRInnerProviderFilter()
		, strCodes
		, m_filterPatients.GenerateProviderFilter("ChargesT.DoctorsProviders")
		, m_filterPatients.GenerateEMRFilter_ForPatientBaseMeasures(FALSE)
		, m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures(FALSE)
		, strCodes
		, m_filterPatients.GenerateEMRInnerProviderFilter()
		, strCodes
		, m_filterPatients.GenerateProviderFilter("ChargesT.DoctorsProviders")
		, m_filterPatients.GenerateEMRFilter_ForPatientBaseMeasures(FALSE)
		, m_filterMURange.GenerateEMRFilter_ForPatientBaseMeasures(FALSE)
		, m_filterMURange.m_dtFromDate, m_filterMURange.m_dtFromDate
		, m_filterMURange.m_dtFromDate, m_filterMURange.m_dtFromDate
	);
}



//(s.dhole 9/26/2014 8:41 AM ) - PLID 63765 This function will return common Denominator query use in MU 1 and MU2 Clinical summary report as well as Reminder report, patient Education and electronic note
CSqlFragment CMUMeasureBase::GetClinicalSummaryCommonDenominatorSQL(CString strCodes)
{
	return CSqlFragment(" ( "
		//Return all EMN which has visiting Code
		"   SELECT EMRInnerT.PatientID, EMRInnerT.Date,EMRInnerT.ID FROM EMRMasterT EMRInnerT LEFT JOIN EMRChargesT ON EMRInnerT.ID = EMRChargesT.EMRID "
		"   INNER JOIN ServiceT ON EMRChargesT.ServiceID = ServiceT.ID "
		"	INNER JOIN CPTCodeT ON ServiceT.ID = CPTCodeT.ID "
		"   WHERE CPTCodeT.Code IN ({CONST_STRING}) AND EMRChargesT.Deleted = 0 AND EMRInnerT.DELETED = 0 "
		" {SQL} "
		"	UNION "
		//Return all EMN which date is same as bill along with visiting code
		"	SELECT LineItemT.PatientID, LineItemT.Date,EMRMasterQ.ID FROM LineItemT INNER JOIN ChargesT ON LineItemT.ID = ChargesT.ID "
		"	INNER JOIN CPTCodeT ON ChargesT.ServiceID = CPTCodeT.ID "
		"		 LEFT JOIN LineItemCorrectionsT OrigLineItems ON LineItemT.ID = OrigLineItems.OriginalLineItemID "
		"		 LEFT JOIN LineItemCorrectionsT AS VoidingLineItemsQ ON LineItemT.ID = VoidingLineItemsQ.VoidingLineItemID "
		"  CROSS APPLY(SELECT TOP 1 EMRInnerT.ID, EMRInnerT.Deleted ,EMRInnerT.Date FROM EMRMasterT  EMRInnerT "
		"   WHERE EMRInnerT.Deleted = 0 "
		" {SQL} "
		"  AND  LineItemT.Date = EMRInnerT.Date AND EMRInnerT.PatientID = LineItemT.PatientID "
		"  ORDER BY EMRInnerT.ID  ) AS EMRMasterQ  "
		"		 WHERE (VoidingLineItemsQ.VoidingLineItemID IS NULL AND OrigLineItems.OriginalLineItemID IS NULL) "
		"	AND LineItemT.Type = 10 AND LineItemT.Deleted = 0 AND EMRMasterQ.Deleted = 0  AND EMRMasterQ.Date IS NOT NULL AND CPTCodeT.Code IN ({CONST_STRING}) "
		" {SQL} "
		" ) ChargeFilterQ ", strCodes, m_filterPatients.GenerateEMRInnerProviderFilter(), m_filterPatients.GenerateEMRInnerProviderFilter(), strCodes, m_filterPatients.GenerateProviderFilter("ChargesT.DoctorsProviders")
		);
}


//(s.dhole 9/25/2014 1:00 PM ) - PLID 63765 This is common Numerator query use in MU 1 and MU2 Clinical summary report 
CSqlFragment CMUMeasureBase::GetClinicalNumeratorFilterSQL()
{
	return CSqlFragment(" "
		"		SELECT EMRMasterT.ID AS EMRID FROM EMRMasterT "
		"		INNER JOIN EMRDetailsT ON EMRDetailsT.EMRID = EMRMasterT.ID "
		"		INNER JOIN EMRInfoT ON EMRDetailsT.EMRInfoID = EMRInfoT.ID "
		"		WHERE EMRDetailsT.Deleted = 0 "
		"		AND ( "
		"		( "
		// Check single select or mutiselect emn item 
		"			(EMRInfoT.DataType IN ({CONST_INT}, {CONST_INT}) AND EMRDetailsT.ID IN ("
		"				SELECT EMRSelectT.EMRDetailID FROM EMRSelectT "
		"				INNER JOIN EMRDataT ON EMRSelectT.EMRDataID = EMRDataT.ID "
		"				INNER JOIN EMRInfoT ON EMRDataT.EMRInfoID = EMRInfoT.ID	 "
		"				WHERE EMRInfoT.EMRInfoMasterID = @EMRInfoMasterID) "
		"			)"
		"		OR "
		// Check single table emn item 
		"			(EMRInfoT.DataType = {CONST_INT} AND EMRDetailsT.ID IN ("
		"				SELECT EMRDetailTableDataT.EMRDetailID FROM EMRDetailTableDataT "
		"				INNER JOIN EMRDataT EMRDataT_X ON EMRDetailTableDataT.EMRDataID_X = EMRDataT_X.ID "
		"				INNER JOIN EMRInfoT ON EMRDataT_X.EMRInfoID = EMRInfoT.ID "
		"				WHERE EMRInfoT.EMRInfoMasterID = @EMRInfoMasterID) "
		"			)"
		"	) "
		"	OR "
		// Check if emn is link to any ccda document
		"		EMRMasterT.ID IN ( SELECT EMNID FROM MailSent WHERE Selection = 'BITMAP:CCDA' AND CCDATypeField = 2) "
		"	) "
		"GROUP BY EMRMasterT.ID  ",
		eitSingleList, eitMultiList, eitTable);

}
