// GenericLinkPatient.h: interface for the CGenericLinkPatient class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_GENERICLINKPATIENT_H__6299FC8D_BCE1_4AAB_9993_DDD770070153__INCLUDED_)
#define AFX_GENERICLINKPATIENT_H__6299FC8D_BCE1_4AAB_9993_DDD770070153__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include <afxtempl.h>

// (a.walling 2007-11-06 09:23) - PLID 28000 - VS2008 - No 'using namespace' within header files
// using namespace ADODB;

typedef enum
{
	ENone,
	EAddedRecord,
	EUpdatedRecord,
} EGenericLinkPersonAction;

class CGenericLinkPatient  
{
protected:
	CString m_strLocalLinkIDField;	// The field name in Practice where
									// remote ID's are stored (e.g. UnitedID, InformID)

	CStringArray m_astrLocalFields;		// An array of fields generated by
										// SetLocalSQL that are used from
										// pulling data in Practice.

	CStringArray m_astrRemoteFields;	// An array of fields generated by
										// SetRemoteSQL that are used from
										// pulling data in Practice.

	CDWordArray m_adwRemoteFieldSizes;	// An array of the field sizes corresponding
										// to m_astrRemoteFields


	CString m_strRemoteDataPath;	// File path to the remote database

	CString m_strRemotePassword;	// Remote password

	CString m_strLinkName;			// Name of the link (used for CExportDuplicates)

	ADODB::_ConnectionPtr m_pConPractice;
	ADODB::_ConnectionPtr m_pConRemote;

	CWnd* m_pParent;

public:
	CGenericLinkPatient(CWnd* pParent, ADODB::_ConnectionPtr& pConPractice, ADODB::_ConnectionPtr& pConRemote, CString strRemoteDataPath, CString strLinkName, CString strRemotePassword = "");
	virtual ~CGenericLinkPatient();

	// Returns non-zero on failure
	virtual DWORD Import(DWORD dwRemoteID, DWORD& dwPracticeID, DWORD& dwUserDefinedID, BOOL& bStop, EGenericLinkPersonAction& action);

	// Returns non-zero on failure.
	virtual DWORD Export(DWORD dwPracticeID, DWORD& dwRemoteID, BOOL& bStop, EGenericLinkPersonAction& action, BOOL bAssumeOneMatchingNameLinks = FALSE);

	virtual DWORD SynchronizeRemoteWithPractice(DWORD dwPracticeID, ADODB::_RecordsetPtr &prsPractice) { /* TODO: Throw a huge huge error!!! */ return -1; };

	// Returns the new ID in the remote table, or -1 on failure.
	virtual DWORD AddToRemoteDatabase(DWORD dwPracticeID, ADODB::_RecordsetPtr &prsPractice, DWORD& dwRemoteID) { return (DWORD)-1; }
	virtual DWORD AddToLocalDatabase(DWORD dwRemoteID, ADODB::_RecordsetPtr &prsRemote, DWORD& dwPracticeID, DWORD& dwUserDefinedID)  { return (DWORD)-1; }

	// Assigns a UnitedID to an existing patient in Practice
	virtual DWORD LinkExistingToRemote(DWORD dwPracticeID, DWORD dwRemoteID) { return (DWORD)-1; }

	// Updates the remote database with a practice patient
	virtual DWORD UpdateRemote(DWORD dwPracticeID, ADODB::_RecordsetPtr &prsPractice) { return (DWORD)-1; }

	// Updates the local database with a practice patient
	virtual DWORD UpdateLocal(DWORD dwPracticeID, ADODB::_RecordsetPtr &prsRemote) { return (DWORD)-1; }

	void SetLocalSQL(const char* str);
	void SetRemoteSQL(const char* str, ... /* Field lengths */);
};

#endif // !defined(AFX_GENERICLINKPATIENT_H__6299FC8D_BCE1_4AAB_9993_DDD770070153__INCLUDED_)
