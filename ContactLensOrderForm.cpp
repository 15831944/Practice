// ContactLensOrderForm.cpp : implementation file
//

// (j.dinatale 2012-03-02 17:05) - PLID 48527

#include "stdafx.h"
#include "InventoryRc.h"
#include "Practice.h"
#include "ContactLensOrderForm.h"
#include "InvVisionWebDlg.h"
#include "InvVisionWebUtils.h"
#include "GlassesEMNPrescriptionList.h"
#include "boost/date_time/posix_time/posix_time.hpp" //(r.wilson 3/14/2012) PLID 48838 - Used for some date arithmetic
#include "InvView.h"	// (j.dinatale 2012-03-21 16:51) - PLID 49079
#include "Barcode.h" //(r.wilson 3/28/2012) PLID 49193 - Used for barcode scanner functionality
#include "ChargeDiscountDlg.h"
#include "VisionWebOrderDlg.h"
#include "AuditTrail.h"
#include "EMRPreviewPopupDlg.h"
#include "DateTimeUtils.h"				// (j.dinatale 2011-10-14 13:00) - PLID 50345
#include "ReportInfo.h"
#include "GlobalReportUtils.h"
#include "Reports.h"
#include "BillingDlg.h"
#include <OpticalUtils.h>

// Patient list columns
namespace ConLensOrderPtList{
	enum ConLensPtListCols{
		ID = 0,
		UserDefinedID = 1,
		Name = 2,
	};
};

// provider list columns
namespace ConLensOrderProvList{
	enum ConLensProvListCols{
		ID = 0,
		Name = 1,
	};
};

// location list columns
namespace ConLensOrderLocList{
	enum ConLensLocListCols{
		ID = 0,
		Name = 1,
	};
};

// vision plan list columns
// (s.dhole 2012-04-25 17:05) - PLID 49992
// (s.dhole 2012-06-05 10:45) - PLID 50777 Added Responsibility, Category
namespace ConLensOrderVisPlanList{
	enum ConLensLocListCols{
		Name = 0,
		Priority = 1,
		PersonID = 2,
		CategoryCategoryType =3,
		Responsibility =4,
		Category =5,
	};
};

// (s.dhole 2012-03-16 17:29) - PLID  48968
// service code dropdown
enum ConLensServCodeListCols{
		clscID = 0,
		clscCode = 1,
		clscSubCode = 2,
		clscDescription = 3,
		clscCost= 4,
		clscPrice = 5,
		clscBarcode = 6,
	};


// service order status list
namespace ConLensOrderStatusList{
	enum ConLensOrderStatusListCols {
		ID = 0,
		Name = 1,
	};
};

// (s.dhole 2012-03-16 17:29) - PLID  48968
// product dropdown
enum ConLensProductCols{
		clpcID = 0,
		clpcDescription = 1,
		clpcCost = 2, 
		clpcPrice = 3,
		clpcBarcode = 4, 
		clpcInsCode = 5,	// (j.dinatale 2013-02-28 09:53) - PLID 55359
	};

// (j.dinatale 2012-04-09 14:18) - PLID 49219
namespace ConLensOrderOpticianList{
	enum ConLensOrderOpticianCols{
		ID = 0,
		Name = 1,
	};
};


// (s.dhole 2012-03-16 17:29) - PLID   48970

enum SelectedServicesColumns
{
		ssclRowID =0 ,
		ssclID =1 ,
		ssclServiceID =2 ,
		ssclCode =3 ,
		ssclDescription =4 ,
		ssclCost=5 ,
		ssclPrice=6 ,
		ssclQty= 7,
		ssclType=8 ,
		ssclIsOD=9 ,
		ssclIsOS= 10 ,
		ssclIsDefaultProduct= 11 ,
		ssclIsOffTheShelf= 12 ,
		ssclDiscount = 13 ,// (s.dhole 2012-04-05 09:08) - PLID 49447
		ssclTotal = 14 ,// (s.dhole 2012-04-05 09:08) - PLID 49447
		ssclVisionResp = 15 ,// (s.dhole 2012-04-05 09:08) - PLID 49447
		ssclPatientResp = 16 ,
};

// product dropdown in OS and OD
namespace ConLensProductRxDD{
	enum ConLensProductRxCols{
		ID = 0,
		Name = 1,
		Manufacturer = 2,	// (j.dinatale 2013-03-19 12:04) - PLID 55745
		Cost = 3,
		Fee = 4,
		Barcode = 5,
		InsCode = 6,	// (j.dinatale 2013-02-28 09:53) - PLID 55359
	};
};

// supplier dropdown in OS and OD
namespace ConLensSupplierRxDD{
	enum ConLensSupplierRxCols{
		ID = 0,
		Name = 1,
	};
};

// //(r.wilson 3/26/2012) PLID 49193
// Who has focus
enum SectionOfFocus{
		sectionOD = 0,
		sectionOS = 1,
		sectionOther = 2,
	};

using namespace ADODB;
using namespace NXDATALIST2Lib;

// CContactLensOrderForm dialog

IMPLEMENT_DYNAMIC(CContactLensOrderForm, CNxDialog)



CContactLensOrderForm::CContactLensOrderForm(long nOrderID /*= -1*/, CWnd* pParent /*=NULL*/)
	: CNxDialog(CContactLensOrderForm::IDD, pParent)
{
	m_nOrderID = nOrderID;
	m_nLensRxID = -1;
	m_nLeftLensDetailRxID = -1;
	m_nRightLensDetailRxID = -1;
	m_nLeftLensOtherInfoID = -1;
	m_nRightLensOtherInfoID = -1;
	// (s.dhole 2012-03-16 17:29) - PLID   48596
	m_nRowID = 1;
	m_nLocationID =-1;
	// (s.dhole 2012-04-12 09:49) - PLID 4891
	m_nLeftProdID = -1;
	m_nRightProdID = -1;
	// (s.dhole 2012-04-16 11:22) - PLID 49728 
	m_bIsBilled = FALSE;
	// (s.dhole 2012-04-16 12:59) - PLID 49890 
	m_bIsvisionPlanExist= FALSE;
	// (s.dhole 2012-03-19 12:21) - PLID 48596
	m_bSavedProductToBeOrderedLeft= FALSE;
	m_bSavedProductToBeOrderedRight= FALSE;
	// (s.dhole 2012-04-25 12:20) - PLID 49969 
	m_nEMNCLPatientID = -1 ;
	m_nCLLastEMN =-1;
	m_nCLEmnID = -1;
	// (s.dhole 2012-04-25 17:05) - PLID 49992 
	m_nCLInsuredPartyID = -1;
	m_pEMRCLPreviewPopupDlg=NULL;
	m_arLensContactServiceInfo.RemoveAll();

	// (j.dinatale 2012-04-27 15:37) - PLID 49896 - assume we want to auto update our description from the start
	m_bAutoGenerateDescription = true;
	// (s.dhole 2012-05-07 18:26) - PLID 50131
	m_strCLInvoiceNo="";

	// (j.dinatale 2012-05-15 12:31) - PLID 50345
	m_strSavedOpticianName = "<None>";
	m_strSavedProviderName = "<None>";
	m_strSavedPatientName = "<None>";
	m_dtSavedOrderDate = g_cdtNull;
	// (s.dhole 2012-05-18 16:52) - PLID 49729
	m_nSavedPatientID= -1;

	// (b.spivey, November 15, 2012) - PLID 53422 - default to false. 
	// (j.dinatale 2013-02-11 10:37) - PLID 55093 - we now keep track of this differently
	 m_bSoldOffShelfManualSetOD = false;
	 m_bSoldOffShelfManualLastValOD = false;
	 m_bSoldOffShelfManualSetOS = false;
	 m_bSoldOffShelfManualLastValOS = false;

	 // (j.dinatale 2013-03-21 12:30) - PLID 55752 - keep track if we imported an Rx
	 m_bPrevRxImported = false;

	 // (j.dinatale 2013-04-30 11:22) - PLID 56530 - keep track if we are increasing quantity (by default we do)
	 m_bIncreaseItemToBillQty = true;
}

CContactLensOrderForm::~CContactLensOrderForm()
{
}

BOOL CContactLensOrderForm::OnInitDialog()
{ 
	CNxDialog::OnInitDialog(); 

	try{
		//r.wilson 3/14/2012 PLID 48838 - Adding Preferences to cache
		//|   InvContactLensOrder_AutoCalcExpirationDateLength
		//|_  InvContactLensOrder_IsRxExpirationdateRequired
		// (s.dhole 2012-03-26 17:35) - PLID 47610 GlassesOrder_CopyPatientRx
		// (j.dinatale 2012-04-18 16:27) - PLID 49773 - obey the auto check ship to patient preference
		// (b.spivey, November 13, 2012) - PLID 53422 - Autocheck sold off shelf for new orders. 
		g_propManager.CachePropertiesInBulk("CContactLensOrderForm", propNumber,
			"(Username = '<None>' OR Username = '%s') AND ( \r\n"
			"	Name = 'InvContactLensOrder_AutoCalcExpirationDateLength' \r\n"
			"	OR Name = 'InvContactLensOrder_IsRxExpirationdateRequired' \r\n"
			"	OR Name = 'GlassesOrder_CopyPatientRx' \r\n"
			"	OR Name = 'Inventory_AutoCheckShipToPatient' \r\n"
			"	OR Name = 'InvContactLensOrder_SoldOffShelfDefaultOn' \r\n"
			"	OR Name = 'Inventory_OptOrderOneIncreaseItemQty' \r\n"
			") \r\n"
			, _Q(GetCurrentUserName()));

		// (b.spivey, November 14, 2012) - PLID 53422 - Cache the property. 
		// (b.spivey, November 26, 2012) - PLID 53422 - Default to not checked. 
		m_bAutoCheckSoldOffShelfNewOrder = !!(GetRemotePropertyInt("InvContactLensOrder_SoldOffShelfDefaultOn", 0, 0, "<None>", true));

		// (j.dinatale 2013-04-30 11:21) - PLID 56530 - need to keep track if we are increasing the qty or not
		m_bIncreaseItemToBillQty = !!(GetRemotePropertyInt("Inventory_OptOrderOneIncreaseItemQty", 1, 0, "<None>", true));

		// (s.dhole 2012-05-07 18:16) - PLID 50131
		m_nxCLInvoiceNo.SetLimitText(18);
		m_pdlPatientList = BindNxDataList2Ctrl(IDC_CON_LENS_PAT_LIST, true);
		m_pdlProviderList = BindNxDataList2Ctrl(IDC_CON_LENS_PROVIDER, true);
		m_pdlLocationList = BindNxDataList2Ctrl(IDC_CON_LENS_LOCATION, true);

		// (j.dinatale 2012-04-09 14:21) - PLID 49219 - optician list
		m_pdlOpticianList = BindNxDataList2Ctrl(IDC_CON_LEN_OPTICIAN, true);

		
		m_pdlODProdList = BindNxDataList2Ctrl(IDC_CON_LENS_OD_PRODUCT, false);
		m_pdlOSProdList = BindNxDataList2Ctrl(IDC_CON_LENS_OS_PRODUCT, false);
		m_pdlSuppList = BindNxDataList2Ctrl(IDC_CON_LENS_SUPPLIER, true);
		// (s.dhole 2012-03-16 14:32) - PLID 48596
		m_pdlServiceList = BindNxDataList2Ctrl(IDC_CON_LENS_SERVICES, true);
		m_pdlProductList = BindNxDataList2Ctrl(IDC_CON_LENS_PRODUCTS, false);
		m_pdlSelectedServiceList=BindNxDataList2Ctrl(IDC_CON_LENS_SERVICE_CODES, false);

		// (j.dinatale 2012-04-12 10:33) - PLID 49631
		m_pdlVisionPlans = BindNxDataList2Ctrl(IDC_CON_LENS_VISION_PLANS, false);

		m_pRxDate = BindNxTimeCtrl(this, IDC_CON_LENS_EXAM_DATE);
		m_pRxExpirationDate = BindNxTimeCtrl(this, IDC_CON_LENS_EXPIRE_DATE);
		m_pDate = BindNxTimeCtrl(this, IDC_CON_LENS_ORDER_DATE);
		m_pRxIssueDate = BindNxTimeCtrl(this, IDC_CON_LENS_ISSUE_DATE);
		// (s.dhole 2012-04-23 11:11) - PLID 49923  Set default Value
		SetDlgItemText(IDC_CON_LENS_VISION_RESP_AMOUNT,FormatCurrencyForInterface(COleCurrency(0,0))) ;
		SetDlgItemText(IDC_CON_LENS_PATIENT_RESP_AMOUNT,FormatCurrencyForInterface(COleCurrency(0,0))) ;
		SetDlgItemText(IDC_CON_LENS_TOTAL_AMOUNT,FormatCurrencyForInterface(COleCurrency(0,0))  ) ;
		// (s.dhole 2012-03-16 17:29) - PLID  48968 reload Product List
		RefreshProducts();

		// (j.dinatale 2012-03-19 15:54) - PLID 48682
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlSuppList->GetNewRow();
			if(pRow){
				pRow->PutValue(ConLensSupplierRxDD::ID, -1);
				pRow->PutValue(ConLensSupplierRxDD::Name, "<None>");
				m_pdlSuppList->AddRowBefore(pRow, m_pdlSuppList->GetFirstRow());
			}
		}
		// (s.dhole 2012-05-24 10:54) - PLID 50667 Location is required
		m_nLocationID = GetCurrentLocationID();
		if(m_nLocationID != -1){
			//m_pdlLocationList->WaitForRequery(NXDATALIST2Lib::dlPatienceLevelWaitIndefinitely);
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlLocationList->FindByColumn(ConLensOrderLocList::ID, _variant_t(m_nLocationID), NULL, VARIANT_FALSE);
			if(pRow){
				m_pdlLocationList->CurSel = pRow;
			}
		}
	/*	{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlLocationList->GetNewRow();
			if(pRow){
				pRow->PutValue(ConLensOrderLocList::ID, -1);
				pRow->PutValue(ConLensOrderLocList::Name, " <None>");
				m_pdlLocationList->AddRowBefore(pRow, m_pdlLocationList->GetFirstRow());
			}
		}*/

		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlProviderList->GetNewRow();
			if(pRow){
				pRow->PutValue(ConLensOrderProvList::ID, -1);
				pRow->PutValue(ConLensOrderProvList::Name, "<None>");
				m_pdlProviderList->AddRowBefore(pRow, m_pdlProviderList->GetFirstRow());
			}
		}

		// (j.dinatale 2012-04-09 14:21) - PLID 49219 - optician list
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOpticianList->GetNewRow();
			if(pRow){
				pRow->PutValue(ConLensOrderOpticianList::ID, -1);
				pRow->PutValue(ConLensOrderOpticianList::Name, "<None>");
				m_pdlOpticianList->AddRowBefore(pRow, m_pdlOpticianList->GetFirstRow());
			}
		}

		m_btnCancel.AutoSet(NXB_CANCEL);
		m_btnOK.AutoSet(NXB_OK);
		m_btnGoToEMR.AutoSet(NXB_INSPECT);
		// (s.dhole 2012-05-21 17:09) - PLID 50531
		m_btnSaveAndPrintOrd.AutoSet(NXB_PRINT_PREV);

		// (j.dinatale 2012-03-16 08:37) - PLID 48848 - let there be green text!
		m_btnPrevRx.AutoSet(NXB_MODIFY);
		
		// (j.dinatale 2012-03-08 09:12) - PLID 48709 - copy our dataz!
		m_btnCopyToOD.AutoSet(NXB_UP);
		m_btnCopyToOS.AutoSet(NXB_DOWN);

		// (j.dinatale 2012-05-10 12:48) - PLID 50136 - if they have permission to write optical orders, we enable the OK/Save button
		if (!(GetCurrentUserPermissions(bioInvGlassesOrderTab) & (sptWrite))) {
			m_btnOK.EnableWindow(FALSE);
			// (s.dhole 2012-05-21 17:11) - PLID 50531
			m_btnSaveAndPrintOrd.EnableWindow(FALSE);
		}else{
			m_btnOK.EnableWindow(TRUE);
			// (s.dhole 2012-05-21 17:11) - PLID 50531
			m_btnSaveAndPrintOrd.EnableWindow(TRUE);
		}

		// hide for now
		m_btnGoToEMR.ShowWindow(SW_HIDE);
		m_btnGoToEMR.EnableWindow(FALSE);
		m_lblEMRName.ShowWindow(SW_HIDE);

		// (j.dinatale 2012-04-24 13:48) - PLID 49866 - need to restrict the field lengths
		RestrictFieldLengths();

		m_radioServices.SetCheck(TRUE);
		m_radioProducts.SetCheck(FALSE);
		m_pdlProductList->Enabled = false;
		GetDlgItem(IDC_CON_LENS_PRODUCTS)->ShowWindow(SW_HIDE);
		// (s.dhole 2012-03-16 17:29) - PLID  48968 Row type
		IColumnSettingsPtr pCol = m_pdlSelectedServiceList->GetColumn(ssclType );
		pCol->ComboSource = _bstr_t("0;Other;3;Contact Lens;");
		pCol->PutStoredWidth(0);
		pCol->PutColumnStyle(csFixedWidth|csVisible);

		//(r.wilson 3/26/2012) PLID 49193 - Register for barcode scans (for contact lenses).
		GetMainFrame()->RegisterForBarcodeScan(this);
		m_arLensContactServiceInfo.RemoveAll();  

		LoadOrder();
		// (s.dhole 2012-04-16 11:22) - PLID 49893 Now apply billed order rull  
		CContactLensOrderForm::ApplyCLBilledSetting();
		// (s.dhole 2012-04-16 12:59) - PLID 49890 
		CContactLensOrderForm::ApplyCLVisionPlanSetting();

	}NxCatchAll(__FUNCTION__);

	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}

// (j.dinatale 2012-04-24 13:48) - PLID 49866 - need to restrict the field lengths
void CContactLensOrderForm::RestrictFieldLengths()
{
	((CEdit *)GetDlgItem(IDC_CON_LEN_DESCRIPTION))->SetLimitText(255);

	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_ADD))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_BC))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_DIAM))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_CLR))->SetLimitText(25);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_QTY))->SetLimitText(8);
	// (s.dhole 2012-06-19 11:48) - PLID 50929 - increase size of note
	((CEdit *)GetDlgItem(IDC_CON_LENS_OS_NOTES))->SetLimitText(1255);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_SPHERE))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_CYL))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OS_AXIS))->SetLimitText(8);
	// (j.dinatale 2013-03-19 14:41) - PLID 55752 - doctor's instruction field size limit
	((CEdit *)GetDlgItem(IDC_CON_LENS_OS_DOCINSTRUCT))->SetLimitText(1255);

	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_ADD))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_BC))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_DIAM))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_CLR))->SetLimitText(25);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_QTY))->SetLimitText(8);
	// (s.dhole 2012-06-19 11:48) - PLID 50929 - increase size of note
	((CEdit *)GetDlgItem(IDC_CON_LENS_OD_NOTES))->SetLimitText(1255);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_SPHERE))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_CYL))->SetLimitText(8);
	((CEdit *)GetDlgItem(IDC_CON_LEN_OD_AXIS))->SetLimitText(8);
	// (j.dinatale 2013-03-19 14:41) - PLID 55752 - doctor's instruction field size limit
	((CEdit *)GetDlgItem(IDC_CON_LENS_OD_DOCINSTRUCT))->SetLimitText(1255);
}

void CContactLensOrderForm::DoDataExchange(CDataExchange* pDX)
{
	CNxDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDOK, m_btnOK);
	DDX_Control(pDX, IDCANCEL, m_btnCancel);
	DDX_Control(pDX, IDC_CON_LENS_PREVIEW_EMN, m_btnGoToEMR);
	DDX_Control(pDX, IDC_CON_LEN_PRODUCTS_RADIO, m_radioProducts);
	DDX_Control(pDX, IDC_CON_LEN_SERVICES_RADIO, m_radioServices);
	DDX_Control(pDX, IDC_CON_LENS_CREATED_FROM_EMN, m_lblEMRName);
	DDX_Control(pDX, IDC_CON_LEN_COPY_TO_OD, m_btnCopyToOD);
	DDX_Control(pDX, IDC_CON_LEN_COPY_TO_OS, m_btnCopyToOS);
	DDX_Control(pDX, IDC_CON_LEN_BTN_PREV_RX, m_btnPrevRx);
	DDX_Control(pDX, IDC_CON_LENS_ORDER_INVO_NO, m_nxCLInvoiceNo);
	DDX_Control(pDX, IDBTNSAVEANDPRINTORD, m_btnSaveAndPrintOrd);
	
}


BEGIN_MESSAGE_MAP(CContactLensOrderForm, CNxDialog)
	ON_BN_CLICKED(IDC_CON_LEN_SERVICES_RADIO, &CContactLensOrderForm::OnBnClickedConLenServicesRadio)
	ON_BN_CLICKED(IDC_CON_LEN_PRODUCTS_RADIO, &CContactLensOrderForm::OnBnClickedConLenProductsRadio)
	ON_BN_CLICKED(IDOK, &CContactLensOrderForm::OnBnClickedOk)
	ON_BN_CLICKED(IDC_CON_LEN_COPY_TO_OS, &CContactLensOrderForm::OnBnClickedConLenCopyToOs)
	ON_BN_CLICKED(IDC_CON_LEN_COPY_TO_OD, &CContactLensOrderForm::OnBnClickedConLenCopyToOd)
	ON_BN_CLICKED(IDC_CON_LEN_BTN_PREV_RX, &CContactLensOrderForm::OnBnClickedConLenOdPrevRx)
	ON_BN_CLICKED(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, &CContactLensOrderForm::OnBnClickedChkConLensOsToBeOrdered)
	ON_BN_CLICKED(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, &CContactLensOrderForm::OnBnClickedChkConLensOdToBeOrdered)
	ON_EN_KILLFOCUS(IDC_CON_LEN_OD_QTY, &CContactLensOrderForm::OnEnKillfocusConLenOdQty)
	ON_EN_KILLFOCUS(IDC_CON_LEN_OS_QTY, &CContactLensOrderForm::OnEnKillfocusConLenOsQty)
	ON_BN_CLICKED(IDCANCEL, &CContactLensOrderForm::OnBnClickedCancel)
	ON_EN_KILLFOCUS(IDC_CON_LEN_OD_SPHERE, &CContactLensOrderForm::OnEnKillfocusConLenOdSphere)
	ON_EN_KILLFOCUS(IDC_CON_LEN_OS_SPHERE, &CContactLensOrderForm::OnEnKillfocusConLenOsSphere)
	ON_EN_CHANGE(IDC_CON_LEN_OD_SPHERE, &CContactLensOrderForm::OnEnChangeConLenOdSphere)
	ON_EN_CHANGE(IDC_CON_LEN_OS_SPHERE, &CContactLensOrderForm::OnEnChangeConLenOsSphere)
	ON_MESSAGE(WM_BARCODE_SCAN, &CContactLensOrderForm::OnBarcodeScan)
	ON_BN_CLICKED(IDC_CON_LENS_PREVIEW_EMN, &CContactLensOrderForm::OnCLPreviewEmn)
	
	ON_EN_KILLFOCUS(IDC_CON_LEN_DESCRIPTION, &CContactLensOrderForm::OnEnKillfocusConLenDescription)
	ON_BN_CLICKED(IDBTNSAVEANDPRINTORD, &CContactLensOrderForm::OnBtnOredrPrintPreviewRx)
END_MESSAGE_MAP()


// CContactLensOrderForm message handlers

void CContactLensOrderForm::OnBnClickedConLenServicesRadio()
{
	try{
		m_radioProducts.SetCheck(FALSE);
		m_radioServices.SetCheck(TRUE);

		m_pdlProductList->Enabled = false;
		GetDlgItem(IDC_CON_LENS_PRODUCTS)->ShowWindow(SW_HIDE);

		m_pdlServiceList->Enabled = true;
		GetDlgItem(IDC_CON_LENS_SERVICES)->ShowWindow(SW_SHOW);
	}NxCatchAll(__FUNCTION__);
}

void CContactLensOrderForm::OnBnClickedConLenProductsRadio()
{
	try{
		m_radioProducts.SetCheck(TRUE);
		m_radioServices.SetCheck(FALSE);

		m_pdlServiceList->Enabled = false;
		GetDlgItem(IDC_CON_LENS_SERVICES)->ShowWindow(SW_HIDE);

		m_pdlProductList->Enabled = true;
		GetDlgItem(IDC_CON_LENS_PRODUCTS)->ShowWindow(SW_SHOW);
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-07 11:21) - PLID 48682 - I BE LOADIN' MAH DATAZ!
void CContactLensOrderForm::LoadOrder()
{
	// (j.dinatale 2012-04-12 10:22) - PLID 48848 - disable the previous rx button here, will be reenabled later on if needed
	m_btnPrevRx.EnableWindow(FALSE);

	// (b.spivey, May 10, 2012) - PLID 50195 - Track the patient name for later.
	CString strPatientName = "";

	if(m_nOrderID == -1){
		// new order so load our defaults

		// (j.dinatale 2012-03-19 16:12) - PLID 48682 - default to the current location
		m_nLocationID = GetCurrentLocationID();
		if(m_nLocationID != -1){
			//m_pdlLocationList->WaitForRequery(NXDATALIST2Lib::dlPatienceLevelWaitIndefinitely);
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlLocationList->FindByColumn(ConLensOrderLocList::ID, _variant_t(m_nLocationID), NULL, VARIANT_FALSE);
			if(pRow){
				m_pdlLocationList->CurSel = pRow;
			}
		}

		// (j.dinatale 2012-03-19 16:19) - PLID 48682 - default to today's date
		m_pDate->SetDateTime(AsDateNoTime(COleDateTime::GetCurrentTime()));

		// (j.dinatale 2012-04-18 16:27) - PLID 49773 - obey the auto check ship to patient preference
		if(GetRemotePropertyInt("Inventory_AutoCheckShipToPatient", 1, 0, GetCurrentUserName(), true)){
			((CButton*)GetDlgItem(IDC_CON_LEN_SHIP_PATIENT))->SetCheck(TRUE);
		}

		
	}else{
		// existing order, so load it from data
		// (s.dhole 2012-03-19 12:19) - PLID  48596 load ToBeOrdered
		// (j.dinatale 2012-03-27 11:33) - PLID 49201 - load the bill ID of the bill this order is linked with
		// (j.dinatale 2012-04-09 14:21) - PLID 49219 - optician ID needs to be loaded		
		// (r.wilson 4/11/2012) PLID 43741 - Changed GlassesOrderStatus to GlassesOrderStatusID
		// (j.dinatale 2012-04-23 15:40) - PLID 49201 - only load valid and not voided or original bills
		// (s.dhole 2012-04-25 12:20) - PLID 49969  Aded emnid
		// (s.dhole 2012-04-25 17:05) - PLID 49992 Added GlassesOrderT.InsuredPartyID
		// (j.dinatale 2012-05-02 10:38) - PLID 49219 - need to pull forward the optician's name
		// (j.dinatale 2012-05-16 13:49) - PLID 50374 - load a patient's userdefined ID, supplier name, location name
		// (j.dinatale 2013-03-19 15:05) - PLID 55752 - added the field for the doctor's instructions
		CSqlFragment sqlLoad;
		sqlLoad.Create(
			"SELECT GlassesOrderT.ID AS OrderID, GlassesOrderT.Description, GlassesOrderT.LocationID AS LocationID, GlassesOrderT.PersonID AS PatientID, GlassesOrderT.ShipToPatient AS ShipToPatient, "
			"GlassesOrderT.ProviderID AS ProviderID, GlassesOrderT.GlassesOrderStatusID AS OrderStatus, GlassesOrderT.Date AS OrderDate, GlassesOrderT.SupplierID AS SupplierID, "
			"GlassesOrderT.LensRxID AS LensRxID, GlassesOrderT.LeftGlassesOrderOtherInfoID AS LeftOtherInfoID, GlassesOrderT.RightGlassesOrderOtherInfoID AS RightOtherInfoID,  "
			"LensRxT.RxDate AS ExamDate, LensRxT.RxExpirationDate AS ExpirationDate, LensRxT.RxIssueDate AS IssueDate, "
			"OSLensRxDetailsQ.ID AS LeftLensRxDetailID, OSLensRxDetailsQ.Sphere AS OSSphere, OSLensRxDetailsQ.Cyl AS OSCyl, OSLensRxDetailsQ.Axis AS OSAxis,  "
			"OSLensRxDetailsQ.Addition AS OSAdd, OSLensRxDetailsQ.BC AS OSBC, OSLensRxDetailsQ.Diameter AS OSDiam, OSLensRxDetailsQ.Color AS OSColor,  "
			"OSLensRxDetailsQ.Quantity AS OSQty, OSLensRxDetailsQ.Note AS OSNote, OSLensRxDetailsQ.DocIns AS OSDocIns, "
			"ODLensRxDetailsQ.ID AS RightLensRxDetailID, ODLensRxDetailsQ.Sphere AS ODSphere, ODLensRxDetailsQ.Cyl AS ODCyl, ODLensRxDetailsQ.Axis AS ODAxis,  "
			"ODLensRxDetailsQ.Addition AS ODAdd, ODLensRxDetailsQ.BC AS ODBC, ODLensRxDetailsQ.Diameter AS ODDiam, ODLensRxDetailsQ.Color AS ODColor,  "
			"ODLensRxDetailsQ.Quantity AS ODQty, ODLensRxDetailsQ.Note AS ODNote, ODLensRxDetailsQ.DocIns AS ODDocIns, "
			"LeftOtherInfoQ.ProductID AS LeftProductID, "
			"RightOtherInfoQ.ProductID AS RightProductID, "
			"LeftOtherInfoQ.ToBeOrdered AS LeftToBeOrdered, "
			"RightOtherInfoQ.ToBeOrdered AS RightToBeOrdered, "
			"ValidBillsQ.BillID AS BillID, "
			"GlassesOrderT.OpticianID AS OpticianID, (OpticiansT.Last + ', ' + OpticiansT.First + ' ' + OpticiansT.Middle) AS OpticianName, "
			"(PatientNameT.Last + ', ' + PatientNameT.First + ' ' + PatientNameT.Middle) AS PatientName, PatientsT.UserDefinedID AS UserDefinedID, "
			"(ProviderNameT.Last + ', ' + ProviderNameT.First + ' ' + ProviderNameT.Middle) AS ProviderName, "
			"SupplierInfoT.Company AS SupplierName, "
			"LocationsT.Name AS LocationName, "
			"GlassesOrderT.EmnID, GlassesOrderT.InsuredPartyID, GlassesOrderT.InvoiceNo  "
			"FROM  "
			"GlassesOrderT "
			"LEFT JOIN LensRxT ON GlassesOrderT.LensRxID = LensRxT.ID "
			"LEFT JOIN EmrMasterT ON GlassesOrderT.EmnID = EmrMasterT.ID "
			"LEFT JOIN ( "
			"SELECT ID, PrescriptionSphere AS Sphere, CylinderValue AS Cyl, CylinderAxis AS Axis, AdditionValue AS Addition, "
			"	BC, Diameter, Color, Quantity, Note, DocIns FROM LensDetailRxT "
			") OSLensRxDetailsQ ON LensRxT.LeftLensDetailRxID = OSLensRxDetailsQ.ID "
			"LEFT JOIN ( "
			"SELECT ID, PrescriptionSphere AS Sphere, CylinderValue AS Cyl, CylinderAxis AS Axis, AdditionValue AS Addition, "
			"	BC, Diameter, Color, Quantity, Note, DocIns FROM LensDetailRxT "
			") ODLensRxDetailsQ ON LensRxT.RightLensDetailRxID = ODLensRxDetailsQ.ID "
			"LEFT JOIN ( "
			"SELECT ID, ProductID,ToBeOrdered FROM GlassesOrderOtherInfoT "
			") LeftOtherInfoQ ON GlassesOrderT.LeftGlassesOrderOtherInfoID = LeftOtherInfoQ.ID "
			"LEFT JOIN ( "
			"SELECT ID, ProductID ,ToBeOrdered FROM GlassesOrderOtherInfoT "
			") RightOtherInfoQ ON GlassesOrderT.RightGlassesOrderOtherInfoID = RightOtherInfoQ.ID "
			" LEFT JOIN ( "
			"	SELECT DISTINCT BillsT.ID AS BillID "
			"	FROM BillsT "
			"	LEFT JOIN BillCorrectionsT ON BillsT.ID = BillCorrectionsT.OriginalBillID "
			"	INNER JOIN ( "
			"		SELECT DISTINCT BillID "
			"		FROM "
			"		LineItemT "
			"		INNER JOIN ChargesT ON LineItemT.ID = ChargesT.ID "
			" 		WHERE LineItemT.Deleted = 0 "
			"	) ChargesSubQ ON BillsT.ID = ChargesSubQ.BillID "
			"	WHERE BillsT.Deleted = 0 AND BillCorrectionsT.ID IS NULL "
			" ) AS ValidBillsQ ON  "
			" GlassesOrderT.BillID = ValidBillsQ.BillID "
			" LEFT JOIN PersonT OpticiansT ON GlassesOrderT.OpticianID = OpticiansT.ID "
			" LEFT JOIN PersonT PatientNameT ON GlassesOrderT.PersonID = PatientNameT.ID "
			" LEFT JOIN PatientsT ON GlassesOrderT.PersonID = PatientsT.PersonID "
			" LEFT JOIN PersonT ProviderNameT ON GlassesOrderT.ProviderID = ProviderNameT.ID "
			" LEFT JOIN PersonT SupplierInfoT ON GlassesOrderT.SupplierID = SupplierInfoT.ID "
			" LEFT JOIN LocationsT ON GlassesOrderT.LocationID = LocationsT.ID "
			" WHERE GlassesOrderT.ID = {INT} ", m_nOrderID
		);

		ADODB::_RecordsetPtr rsOrderInfo = CreateParamRecordset(sqlLoad);
		if(!rsOrderInfo->eof){
			// (j.dinatale 2013-03-21 12:30) - PLID 55752 - well, at this point we just opened an existing order, so the field should be read only
			m_bPrevRxImported = true;

			// do the loading! NOW!
			m_nLensRxID = AdoFldLong(rsOrderInfo, "LensRxID", -1);
			m_nLeftLensDetailRxID = AdoFldLong(rsOrderInfo, "LeftLensRxDetailID", -1);
			m_nRightLensDetailRxID = AdoFldLong(rsOrderInfo, "RightLensRxDetailID", -1);
			m_nLeftLensOtherInfoID = AdoFldLong(rsOrderInfo, "LeftOtherInfoID", -1);
			m_nRightLensOtherInfoID = AdoFldLong(rsOrderInfo, "RightOtherInfoID", -1);
			m_nCLInsuredPartyID = AdoFldLong(rsOrderInfo, "InsuredPartyID", -1);
			// (s.dhole 2012-06-04 17:51) - PLID 49992
			if (m_nCLInsuredPartyID >0 ){
				m_bIsvisionPlanExist =TRUE;
			}
			else{
				m_bIsvisionPlanExist =FALSE;
			}
			// (s.dhole 2012-05-07 18:26) - PLID 50131
			m_strCLInvoiceNo= AdoFldString(rsOrderInfo, "InvoiceNo", "");
			SetDlgItemText(IDC_CON_LENS_ORDER_INVO_NO, m_strCLInvoiceNo);

			// TODO: Throw these in a struct so that way its a little bit more organized and would make auditing easier.
			m_nLocationID = AdoFldLong(rsOrderInfo, "LocationID", -1);
			long nPersonID = AdoFldLong(rsOrderInfo, "PatientID", -1);
			// (s.dhole 2012-05-18 16:51) - PLID 49729 Save ordered patint id
			m_nSavedPatientID =nPersonID ;
			long nOrderStatus = AdoFldLong(rsOrderInfo, "OrderStatus", -1);
			long nProviderID = AdoFldLong(rsOrderInfo, "ProviderID", -1);
			long nSupplierID = AdoFldLong(rsOrderInfo, "SupplierID", -1);
			BOOL bShipToPatient = AdoFldBool(rsOrderInfo, "ShipToPatient", FALSE);
			CString strDescription = AdoFldString(rsOrderInfo, "Description", "");
			COleDateTime dtOrderDate = AdoFldDateTime(rsOrderInfo, "OrderDate", g_cdtNull);
			COleDateTime dtExamDate = AdoFldDateTime(rsOrderInfo, "ExamDate", g_cdtNull);
			COleDateTime dtExpirationDate = AdoFldDateTime(rsOrderInfo, "ExpirationDate", g_cdtNull);
			COleDateTime dtIssueDate = AdoFldDateTime(rsOrderInfo, "IssueDate", g_cdtNull);
			_variant_t vtOSSphere = rsOrderInfo->Collect["OSSphere"];
			_variant_t vtOSCyl = rsOrderInfo->Collect["OSCyl"];
			_variant_t vtOSAxis = rsOrderInfo->Collect["OSAxis"];
			_variant_t vtOSAdd = rsOrderInfo->Collect["OSAdd"];
			_variant_t vtOSBC = rsOrderInfo->Collect["OSBC"];
			_variant_t vtOSDiam = rsOrderInfo->Collect["OSDiam"];
			CString strOSColor = AdoFldString(rsOrderInfo, "OSColor", "");
			_variant_t vtOSQty = rsOrderInfo->Collect["OSQty"];
			CString strOSNote = AdoFldString(rsOrderInfo, "OSNote", "");
			// (s.dhole 2012-04-12 09:49) - PLID 48971 load OS Product
			m_nLeftProdID = AdoFldLong(rsOrderInfo, "LeftProductID", -1);
			_variant_t vtODSphere = rsOrderInfo->Collect["ODSphere"];
			_variant_t vtODCyl = rsOrderInfo->Collect["ODCyl"];
			_variant_t vtODAxis = rsOrderInfo->Collect["ODAxis"];
			_variant_t vtODAdd = rsOrderInfo->Collect["ODAdd"];
			_variant_t vtODBC = rsOrderInfo->Collect["ODBC"];
			_variant_t vtODDiam = rsOrderInfo->Collect["ODDiam"];
			CString strODColor = AdoFldString(rsOrderInfo, "ODColor", "");
			_variant_t vtODQty = rsOrderInfo->Collect["ODQty"];
			CString strODNote = AdoFldString(rsOrderInfo, "ODNote", "");
			// (s.dhole 2012-04-12 09:49) - PLID 48971  Load OD product
			m_nRightProdID  = AdoFldLong(rsOrderInfo, "RightProductID", -1);
			// (j.dinatale 2012-03-27 11:34) - PLID 49201 - need the bill ID!
			long nBillID = AdoFldLong(rsOrderInfo, "BillID", -1);
			// (j.dinatale 2012-04-09 14:21) - PLID 49219 - optician ID needs to be loaded
			// (j.dinatale 2012-05-02 10:38) - PLID 49219 - need to pull forward the optician's name
			long nOpticianID = AdoFldLong(rsOrderInfo, "OpticianID", -1);
			CString strOpticianName = AdoFldString(rsOrderInfo, "OpticianName", "");
			// (s.dhole 2012-04-25 12:20) - PLID 49969 
			m_nCLEmnID =  AdoFldLong(rsOrderInfo, "EmnID", -1);
			m_nEMNCLPatientID = nPersonID; 
			m_nCLLastEMN =m_nCLEmnID;

			// (j.dinatale 2012-05-16 13:53) - PLID 50374 - need a patients user defined ID
			// (j.dinatale 2012-05-15 09:09) - PLID 50345 - pull forward patient name and provider name as well
			long nUserDefinedID = AdoFldLong(rsOrderInfo, "UserDefinedID", -1);
			strPatientName = AdoFldString(rsOrderInfo, "PatientName", "");
			CString strProviderName = AdoFldString(rsOrderInfo, "ProviderName", "");

			// (j.dinatale 2012-05-16 16:52) - PLID 50374 - load supplier name and location name just in case of inactivity
			CString strSupplierName = AdoFldString(rsOrderInfo, "SupplierName", "");
			CString strLocationName = AdoFldString(rsOrderInfo, "LocationName", "");

			// (j.dinatale 2012-05-15 09:45) - PLID 50345 - save fields for auditing
			if(strOpticianName.IsEmpty()){
				m_strSavedOpticianName = "<None>";
			}else{
				m_strSavedOpticianName = strOpticianName;
			}

			if(strPatientName.IsEmpty()){
				m_strSavedPatientName = "<None>";
			}else{
				m_strSavedPatientName = strPatientName;
			}

			if(strProviderName.IsEmpty()){
				m_strSavedProviderName = "<None>";
			}else{
				m_strSavedProviderName = strProviderName;
			}

			m_dtSavedOrderDate = dtOrderDate;
			
			ReflectCLEmn();
			SetDlgItemText(IDC_CON_LEN_DESCRIPTION, strDescription);
			if(dtOrderDate.GetStatus() == COleDateTime::valid){
				m_pDate->SetDateTime(dtOrderDate);
			}
			if(dtExamDate.GetStatus() == COleDateTime::valid){
				m_pRxDate->SetDateTime(dtExamDate);
			}
			if(dtExpirationDate.GetStatus() == COleDateTime::valid){
				m_pRxExpirationDate->SetDateTime(dtExpirationDate);
			}
			if(dtIssueDate.GetStatus() == COleDateTime::valid){
				m_pRxIssueDate->SetDateTime(dtIssueDate);
			}

			// (j.dinatale 2012-03-16 14:32) - PLID 48935 - now format these fields when loading the form
			SetDlgItemText(IDC_CON_LEN_OS_SPHERE, AsPrescriptionNumber(AsString(vtOSSphere), pnfSignedFloat));
			SetDlgItemText(IDC_CON_LEN_OS_CYL, AsPrescriptionNumber(AsString(vtOSCyl), pnfSignedFloat));
			{
				CString strAxis;
				strAxis = AsPrescriptionNumber(AsString(vtOSAxis), pnfInt);
				if(vtOSAxis.vt != VT_NULL && vtOSAxis.vt != VT_EMPTY){
					SetDlgItemText(IDC_CON_LEN_OS_AXIS, strAxis);
				}
			}
		
			SetDlgItemText(IDC_CON_LEN_OS_ADD, AsPrescriptionNumber(AsString(vtOSAdd), pnfSignedFloat));
			SetDlgItemText(IDC_CON_LEN_OS_BC, AsPrescriptionNumber(AsString(vtOSBC), pnfUnsignedFloat));
			SetDlgItemText(IDC_CON_LEN_OS_DIAM, AsPrescriptionNumber(AsString(vtOSDiam), pnfUnsignedFloat));
			SetDlgItemText(IDC_CON_LEN_OS_CLR, strOSColor);
			SetDlgItemText(IDC_CON_LEN_OS_QTY, AsPrescriptionNumber(AsString(vtOSQty), pnfInt));
			SetDlgItemText(IDC_CON_LENS_OS_NOTES, strOSNote);
			SetDlgItemText(IDC_CON_LEN_OD_SPHERE, AsPrescriptionNumber(AsString(vtODSphere), pnfSignedFloat));
			SetDlgItemText(IDC_CON_LEN_OD_CYL, AsPrescriptionNumber(AsString(vtODCyl), pnfSignedFloat));
			{
				CString strAxis;
				strAxis = AsPrescriptionNumber(AsString(vtODAxis), pnfInt);
				if(vtODAxis.vt != VT_NULL && vtODAxis.vt != VT_EMPTY){
					SetDlgItemText(IDC_CON_LEN_OD_AXIS, strAxis);
				}
			}
			SetDlgItemText(IDC_CON_LEN_OD_ADD, AsPrescriptionNumber(AsString(vtODAdd), pnfSignedFloat));
			SetDlgItemText(IDC_CON_LEN_OD_BC, AsPrescriptionNumber(AsString(vtODBC), pnfUnsignedFloat));
			SetDlgItemText(IDC_CON_LEN_OD_DIAM, AsPrescriptionNumber(AsString(vtODDiam), pnfUnsignedFloat));
			SetDlgItemText(IDC_CON_LEN_OD_CLR, strODColor);
			SetDlgItemText(IDC_CON_LEN_OD_QTY, AsPrescriptionNumber(AsString(vtODQty), pnfInt));
			SetDlgItemText(IDC_CON_LENS_OD_NOTES, strODNote);
			SetDlgItemCheck(IDC_CON_LEN_SHIP_PATIENT, bShipToPatient);
			// (s.dhole 2012-03-19 12:21) - PLID 48596
			SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED,  AdoFldBool(rsOrderInfo, "RightToBeOrdered" ,FALSE) )  ;
			SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED,  AdoFldBool(rsOrderInfo, "LeftToBeOrdered" ,FALSE) )  ;
			m_bSavedProductToBeOrderedLeft = AdoFldBool(rsOrderInfo, "LeftToBeOrdered" ,FALSE) ;
			m_bSavedProductToBeOrderedRight =AdoFldBool(rsOrderInfo, "RightToBeOrdered" ,FALSE) ;

			// (j.dinatale 2013-02-11 10:41) - PLID 55093 - if we have an existing order, we assume we manually set our flags
			m_bSoldOffShelfManualLastValOD = !!m_bSavedProductToBeOrderedRight;
			m_bSoldOffShelfManualLastValOS = !!m_bSavedProductToBeOrderedLeft;
			m_bSoldOffShelfManualSetOD = true;
			m_bSoldOffShelfManualSetOS = true;

			// (j.dinatale 2013-03-19 15:05) - PLID 55752 - load the doctor's instructions fields
			SetDlgItemText(IDC_CON_LENS_OD_DOCINSTRUCT, AdoFldString(rsOrderInfo, "ODDocIns", ""));
			SetDlgItemText(IDC_CON_LENS_OS_DOCINSTRUCT, AdoFldString(rsOrderInfo, "OSDocIns", ""));

			// (j.dinatale 2012-03-27 11:37) - PLID 49201 - show the billID if we have one!
			if(nBillID != -1){
				CString strBillLabelText;
				strBillLabelText.Format("Bill No. %li", nBillID);
				SetDlgItemText(IDC_CON_LEN_BILL_LABEL, strBillLabelText);
				// (s.dhole 2012-04-16 11:22) - PLID 49893  set  IsBilled Flag flag
				m_bIsBilled = TRUE;
			}
			else
			{
				// (s.dhole 2012-04-16 11:22) - PLID 49893  set  IsBilled Flag flag
				m_bIsBilled = FALSE;
			}
			
			// (j.dinatale 2012-05-16 20:31) - PLID 50445 - 2 signifies that the order was submitted, we should disable the OK button at this point
			if(nOrderStatus == 2) {
				m_btnOK.EnableWindow(FALSE);
			}

			// (j.dinatale 2012-04-09 14:21) - PLID 49219 - optician ID needs to be loaded
			if(nOpticianID != -1){
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOpticianList->FindByColumn(ConLensOrderOpticianList::ID, _variant_t(nOpticianID), NULL, VARIANT_FALSE);
				if(pRow){
					m_pdlOpticianList->CurSel = pRow;
				}else{
					// (j.dinatale 2012-05-02 10:38) - PLID 49219 - add the row if it doesnt already exist
					NXDATALIST2Lib::IRowSettingsPtr pNewOptRow = m_pdlOpticianList->GetNewRow();
					pNewOptRow->PutValue(ConLensOrderOpticianList::ID, nOpticianID);
					pNewOptRow->PutValue(ConLensOrderOpticianList::Name, _bstr_t(strOpticianName));

					m_pdlOpticianList->AddRowSorted(pNewOptRow, NULL);
					m_pdlOpticianList->CurSel = pNewOptRow;
				}
			}

			if(m_nLocationID != -1){
				//m_pdlLocationList->WaitForRequery(NXDATALIST2Lib::dlPatienceLevelWaitIndefinitely);
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlLocationList->FindByColumn(ConLensOrderLocList::ID, _variant_t(m_nLocationID), NULL, VARIANT_FALSE);
				if(pRow){
					m_pdlLocationList->CurSel = pRow;
				}else{
					// (j.dinatale 2012-05-16 13:28) - PLID 50374 - add the location to the list, it must be inactive
					NXDATALIST2Lib::IRowSettingsPtr pNewLocRow = m_pdlLocationList->GetNewRow();
					pNewLocRow->PutValue(ConLensOrderLocList::ID, m_nLocationID);
					pNewLocRow->PutValue(ConLensOrderLocList::Name, _bstr_t(strLocationName));

					m_pdlLocationList->AddRowSorted(pNewLocRow, NULL);
					m_pdlLocationList->CurSel = pNewLocRow;
				}
			}

			if(nProviderID != -1){
				//m_pdlProviderList->WaitForRequery(NXDATALIST2Lib::dlPatienceLevelWaitIndefinitely);
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlProviderList->FindByColumn(ConLensOrderProvList::ID, _variant_t(nProviderID), NULL, VARIANT_FALSE);
				if(pRow){
					m_pdlProviderList->CurSel = pRow;
				}else{
					// (j.dinatale 2012-05-16 13:28) - PLID 50374 - add the provider to the list, they must be inactive
					NXDATALIST2Lib::IRowSettingsPtr pNewProvRow = m_pdlProviderList->GetNewRow();
					pNewProvRow->PutValue(ConLensOrderProvList::ID, nProviderID);
					pNewProvRow->PutValue(ConLensOrderProvList::Name, _bstr_t(strProviderName));

					m_pdlProviderList->AddRowSorted(pNewProvRow, NULL);
					m_pdlProviderList->CurSel = pNewProvRow;
				}
			}

			if(nSupplierID != -1){
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlSuppList->FindByColumn(ConLensSupplierRxDD::ID, _variant_t(nSupplierID), NULL, VARIANT_FALSE);
				if(pRow){
					m_pdlSuppList->CurSel = pRow;
				}else{
					// (j.dinatale 2012-05-16 13:28) - PLID 50374 - add the supplier to the list, they must be inactive
					NXDATALIST2Lib::IRowSettingsPtr pNewSuppRow = m_pdlSuppList->GetNewRow();
					pNewSuppRow->PutValue(ConLensSupplierRxDD::ID, nSupplierID);
					pNewSuppRow->PutValue(ConLensSupplierRxDD::Name, _bstr_t(strSupplierName));

					m_pdlSuppList->AddRowSorted(pNewSuppRow, NULL);
					m_pdlSuppList->CurSel = pNewSuppRow;
				}
			}

			if(nPersonID != -1){
				//m_pdlPatientList->WaitForRequery(NXDATALIST2Lib::dlPatienceLevelWaitIndefinitely);
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlPatientList->FindByColumn(ConLensOrderPtList::ID, _variant_t(nPersonID), NULL, VARIANT_FALSE);
				if(pRow){
					m_pdlPatientList->CurSel = pRow;
					// (b.spivey, May 10, 2012) - PLID 50195 - Grab the patient name
					// (j.dinatale 2012-05-15 11:46) - PLID 50345 - this is now assigned based on the result of the load order query
					//strPatientName = pRow->GetValue(ConLensOrderPtList::Name); 
				}else{
					// (j.dinatale 2012-05-16 13:28) - PLID 50374 - add the patient to the list, they must be inactive
					NXDATALIST2Lib::IRowSettingsPtr pNewPatRow = m_pdlPatientList->GetNewRow();
					pNewPatRow->PutValue(ConLensOrderPtList::ID, nPersonID);
					pNewPatRow->PutValue(ConLensOrderPtList::Name, _bstr_t(strPatientName));
					if(nUserDefinedID != -1){
						pNewPatRow->PutValue(ConLensOrderPtList::UserDefinedID, nUserDefinedID);
					}

					m_pdlPatientList->AddRowSorted(pNewPatRow, NULL);
					m_pdlPatientList->CurSel = pNewPatRow;
				}

				// (s.dhole 2012-04-12 14:20) - PLID 48968 Show deleted product in dropdown if ist is used in existing order
				CString strWhere = FormatString( "(ProductT.IsContactLens = 1 AND ServiceT.Active = 1) OR (ProductT.ID = %li) ",m_nRightProdID);
				m_pdlODProdList->WhereClause= bstr_t(strWhere )   ;
				// (s.dhole 2012-04-12 14:20) - PLID 48968 Show deleted product in dropdown if ist is used in existing order
				strWhere = FormatString( "(ProductT.IsContactLens = 1 AND ServiceT.Active = 1) OR (ProductT.ID = %li) ",m_nLeftProdID );
				m_pdlOSProdList->WhereClause= bstr_t(strWhere )   ;
				
				// (j.dinatale 2012-04-12 10:37) - PLID 49631 - load the vision plans
				// (s.dhole 2012-05-18 15:27) - PLID 49992  Show all vision plan
				// (s.dhole 2012-06-05 10:37) - PLID 50777 Alow only primary
				// (r.goldschmidt 2014-04-03 16:46) - PLID 56699 - just show all plans
				strWhere = FormatString(" (InsuredPartyT.PatientID = %li)", nPersonID);
				m_pdlVisionPlans->WhereClause = _bstr_t(strWhere);
				m_pdlVisionPlans->Requery();

				// (j.dinatale 2012-04-12 10:22) - PLID 48848 - enable previous rx button since we have a patient
				m_btnPrevRx.EnableWindow(TRUE);
			}
		}else{
			/* OMGZ! THERE WAS NO DATAZ FOR THIS ORDERZ! I BE FIRIN MAH ASSERTZ!*/
			ASSERT(FALSE);
		}
		
	}
	
	// (b.spivey, May 10, 2012) - PLID 50195 - Update the window caption. 
	UpdateWindowCaption(strPatientName); 

	// (s.dhole 2012-04-12 16:22) - PLID 48968  Requery both Product Dropdown
	m_pdlODProdList->Requery();
	m_pdlOSProdList->Requery();

	// (s.dhole 2012-04-12 16:22) - PLID 48968 Load <None>
	{
		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlODProdList->GetNewRow();
		if(pRow){
			pRow->PutValue(ConLensProductRxDD::ID, -1);
			pRow->PutValue(ConLensProductRxDD::Name, " <None>");
			m_pdlODProdList->AddRowBefore(pRow, m_pdlODProdList->GetFirstRow());
		}
	}

	{
		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOSProdList->GetNewRow();
		if(pRow){
			pRow->PutValue(ConLensProductRxDD::ID, -1);
			pRow->PutValue(ConLensProductRxDD::Name, " <None>");
			m_pdlOSProdList->AddRowBefore(pRow, m_pdlOSProdList->GetFirstRow());
		}
	}
	// (s.dhole 2012-03-16 17:29) - PLID   48970
	LoadServiceList();
	// (j.dinatale 2012-03-29 14:58) - PLID 49169 - need to handle if the Rx fields should be disabled
	HandleODReadOnlyStatus();
	HandleOSReadOnlyStatus();

	// (j.dinatale 2012-04-27 16:03) - PLID 49896 - configure Description auto updating
	ConfigureDescriptionAutoUpdate();
}

// (j.dinatale 2012-03-06 09:40) - PLID 48623
bool CContactLensOrderForm::ValidateData()
{
	// TODO: Finish setting up validation
	if(!m_pdlPatientList->CurSel){
		this->MessageBox("A patient must be selected in order to save this order.", "Alert!", MB_OK | MB_ICONEXCLAMATION);
		return false;
	}

	if(m_pDate->GetStatus() != 1){
		this->MessageBox("Please enter a valid order date.", "Alert!", MB_OK | MB_ICONEXCLAMATION);
		return false;
	}

	COleDateTime dtExpirationDateTmp;
	dtExpirationDateTmp = m_pRxExpirationDate->GetDateTime();		

	//r.wilson 3/12/2012 PLID 48838 - Check to see in the expiration date is required or not
	if (GetRemotePropertyInt("InvContactLensOrder_IsRxExpirationdateRequired", 0, 0, "<None>", true) == TRUE && (m_pRxExpirationDate->GetStatus() == 3 || dtExpirationDateTmp.GetStatus() != COleDateTime::valid || m_pRxExpirationDate->GetDateTime() == NULL))
	{
		// (r.wilson 3/14/2012 ) - PLID 48838
		this->MessageBox("You must enter a Rx Expiration date\r\n","Alert!",MB_OK);		
		return false;
	}
	// (s.dhole 2012-04-23 17:01) - PLID  49923  check any zero Quantity or Negative Amount
	BOOL bIsNegativeTotal = FALSE;
	BOOL bIsQuantityZero = FALSE;
	for(int nCount= 0 ; nCount <m_arLensContactServiceInfo.GetSize() ;  nCount++  ){
		if (m_arLensContactServiceInfo[nCount].bIsDelete ==FALSE)	
		{
		if (m_arLensContactServiceInfo[nCount].LineTotal< COleCurrency(0,0)  || 
			m_arLensContactServiceInfo[nCount].VisionResp < COleCurrency(0,0) ||
			m_arLensContactServiceInfo[nCount].PatientResp < COleCurrency(0,0) ){
				bIsNegativeTotal=TRUE;
			}
			if ( m_arLensContactServiceInfo[nCount].nQty<=0 ){
				 bIsQuantityZero=TRUE;
			}
		}
	}
	if (bIsNegativeTotal==TRUE){
		AfxMessageBox("You cannot have a negative charge. Please make sure none of your charges are less than zero");
		return false;
	}
	else if (bIsQuantityZero==TRUE){
		AfxMessageBox("You must have a quantity greater than zero");
		return false;
	}
	else
	{
	// nothing
	}

	return true;
}

// (j.dinatale 2012-03-06 09:40) - PLID 48623
bool CContactLensOrderForm::SaveOrder()
{
	try{
		if(!ValidateData()){
			return false;
		}
		CString strPatientName;
		long nPatientID = -1;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlPatientList->CurSel;
			if(pRow){
				nPatientID = VarLong(pRow->GetValue(ConLensOrderPtList::ID));
				strPatientName = VarString(pRow->GetValue(ConLensOrderPtList::Name));
			}else{
				// should never happen since we have a validate function
				ASSERT(FALSE);
				return false;
			}
		}
		// (s.dhole 2012-04-23 16:12) - PLID 49888
		long nAuditTransactionID = BeginNewAuditEvent();

		// (j.dinatale 2012-05-15 10:07) - PLID 50345 - audit our patient name, provider name, optician name, and order date if this order is not a new order
		if(m_nOrderID != -1){
			if(m_strSavedPatientName != strPatientName){
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderPatient, m_nOrderID,  m_strSavedPatientName, strPatientName, aepMedium);
				m_strSavedPatientName = strPatientName;
			}

			CString strOpticianName = "<None>";
			{
				NXDATALIST2Lib::IRowSettingsPtr pOptRow = m_pdlOpticianList->CurSel;
				if(pOptRow){
					strOpticianName = VarString(pOptRow->GetValue(ConLensOrderOpticianList::Name), "<None>");
				}
			}

			if(m_strSavedOpticianName != strOpticianName){
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderOptician, m_nOrderID,  m_strSavedOpticianName, strOpticianName, aepMedium);
				m_strSavedOpticianName = strOpticianName;
			}

			CString strProvName = "<None>";
			{
				NXDATALIST2Lib::IRowSettingsPtr pProvRow = m_pdlProviderList->CurSel;
				if(pProvRow){
					strProvName = VarString(pProvRow->GetValue(ConLensOrderProvList::Name), "<None>");
				}
			}

			if(m_strSavedProviderName != strProvName){
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderProvider, m_nOrderID,  m_strSavedProviderName, strProvName, aepMedium);
				m_strSavedProviderName = strProvName;
			}

			COleDateTime dtOrderDate = g_cdtNull;
			if(m_pDate->GetStatus() == 1){
				dtOrderDate = m_pDate->GetDateTime();
			}

			if(CompareDatesNoTime(m_dtSavedOrderDate, dtOrderDate) != 0){
				AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderOrderDate, m_nOrderID,  
					!m_dtSavedOrderDate.GetStatus() ? FormatDateTimeForInterface(m_dtSavedOrderDate, dtoDateTime) : "<None>", 
					!dtOrderDate.GetStatus() ? FormatDateTimeForInterface(dtOrderDate, dtoDateTime) : "<None>", aepMedium);
				m_dtSavedOrderDate = dtOrderDate;
			}
		}

		CSqlFragment sqlSave;
		sqlSave.Create(
			"DECLARE @nGlassOrderID INT; "
			"DECLARE @nLensRxID INT; "
			"DECLARE @nLeftLensDetailRxID INT; "
			"DECLARE @nRightLensDetailRxID INT; "
			"DECLARE @nLeftLensOtherInfoID INT; "
			"DECLARE @nRightLensOtherInfoID INT; "
			"DECLARE @nPatientID INT; "
			"DECLARE @nGlassesOrderServiceT INT;"
			"SET @nPatientID = {INT}; "
			"SET NOCOUNT ON; ",
			nPatientID
		);

		_variant_t vtRxIssueDate = g_cvarNull;
		_variant_t vtRxDate = g_cvarNull;
		_variant_t vtRxExpireDate = g_cvarNull;

		if(m_pRxDate->GetStatus() == 1){
			vtRxDate = _variant_t(m_pRxDate->GetDateTime(), VT_DATE);
		}

		if(m_pRxExpirationDate->GetStatus() == 1){
			vtRxExpireDate = _variant_t(m_pRxExpirationDate->GetDateTime(), VT_DATE);
		}

		if(m_pRxIssueDate->GetStatus() == 1){
			vtRxIssueDate = _variant_t(m_pRxIssueDate->GetDateTime(), VT_DATE);
		}
		// (s.tullis 2015-11-04 10:54) - PLID 67263 - Added RxType
		// insert/update LensRxT
		if(m_nLensRxID == -1){
			sqlSave += CSqlFragment(
				"INSERT INTO LensRxT (PersonID, RxDate, RxExpirationDate, RxIssueDate, CreateDate, RxType) "
				"VALUES (@nPatientID, {VT_DATE}, {VT_DATE}, {VT_DATE}, GETDATE(), {CONST_INT}); "
				"SET @nLensRxID = CONVERT(int, SCOPE_IDENTITY()); ",
				 vtRxDate, vtRxExpireDate, vtRxIssueDate, (long)RxTypeContacts
			);
		}else{
			sqlSave += CSqlFragment(
				"SET @nLensRxID = {INT}; "
				"UPDATE LensRxT SET "
				"	PersonID = @nPatientID, "
				"	RxDate = {VT_DATE}, "
				"	RxExpirationDate = {VT_DATE}, "
				"	RxIssueDate = {VT_DATE} "
				"WHERE LensRxT.ID = @nLensRxID; ",
				m_nLensRxID, vtRxDate, vtRxExpireDate, vtRxIssueDate
			);
		}

		// insert/update LensDetailRxT
		// (j.dinatale 2012-03-29 15:54) - PLID 48623 - the sphere field is our indicator on whether or not to delete our field
		CString strTemp;
		GetDlgItemText(IDC_CON_LEN_OS_SPHERE, strTemp);
		bool bDeleteOSDetails = false;

		if(!strTemp.IsEmpty()){
			_variant_t vtOSSphere = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_SPHERE, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSSphere = atof(strTemp);
			}

			_variant_t vtOSCylinder = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_CYL, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSCylinder = atof(strTemp);
			}

			_variant_t vtOSAxis = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_AXIS, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSAxis = _variant_t((long)atoi(strTemp));
			}

			_variant_t vtOSAddition = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_ADD, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSAddition = atof(strTemp);
			}

			_variant_t vtOSBC = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_BC, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSBC = atof(strTemp);
			}

			_variant_t vtOSDiam = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_DIAM, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSDiam = atof(strTemp);
			}

			CString strOSColor;
			GetDlgItemText(IDC_CON_LEN_OS_CLR, strOSColor);

			_variant_t vtOSQty = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OS_QTY, strTemp);
			if(!strTemp.IsEmpty()){
				vtOSQty = _variant_t((long)atoi(strTemp));
			}

			CString strOSNote;
			GetDlgItemText(IDC_CON_LENS_OS_NOTES, strOSNote);

			// (j.dinatale 2013-03-19 15:05) - PLID 55752 - added the field for the doctor's instructions
			CString strOSDocIns;
			GetDlgItemText(IDC_CON_LENS_OS_DOCINSTRUCT, strOSDocIns);

			if(m_nLeftLensDetailRxID == -1){
				sqlSave += CSqlFragment(
					"INSERT INTO LensDetailRxT (PrescriptionSphere, CylinderValue, CylinderAxis, AdditionValue, BC, Diameter, Color, Quantity, Note, DocIns)"
					"VALUES "
					"({VT_R8}, {VT_R8}, {VT_I4}, {VT_R8}, {VT_R8}, {VT_R8}, {STRING}, {VT_I4}, {STRING}, {STRING}); "
					"SET @nLeftLensDetailRxID = CONVERT(int, SCOPE_IDENTITY()); ",
					vtOSSphere, vtOSCylinder, vtOSAxis, vtOSAddition, vtOSBC, vtOSDiam, strOSColor, vtOSQty, strOSNote, strOSDocIns
					);
			}else{
				sqlSave += CSqlFragment(
					"SET @nLeftLensDetailRxID = {INT}; "
					"UPDATE LensDetailRxT SET "
					"	PrescriptionSphere = {VT_R8}, "
					"	CylinderValue = {VT_R8}, "
					"	CylinderAxis = {VT_I4}, "
					"	AdditionValue = {VT_R8}, "
					"	BC = {VT_R8}, "
					"	Diameter = {VT_R8}, "
					"	Color = {STRING}, "
					"	Quantity = {VT_I4}, "
					"	Note = {STRING}, "
					"	DocIns = {STRING} "
					"WHERE ID = @nLeftLensDetailRxID; ",
					m_nLeftLensDetailRxID, vtOSSphere, vtOSCylinder, vtOSAxis, vtOSAddition, vtOSBC, vtOSDiam, strOSColor, vtOSQty, strOSNote, strOSDocIns
					);
			}
		}else{
			// (j.dinatale 2012-03-29 15:54) - PLID 48623 - at this point, we know we may have to delete our detail entry
			bDeleteOSDetails = true;
			sqlSave += "SET @nLeftLensDetailRxID = NULL; ";
		}

		// (j.dinatale 2012-03-29 15:54) - PLID 48623 - the sphere field is our indicator on whether or not to delete our field
		GetDlgItemText(IDC_CON_LEN_OD_SPHERE, strTemp);
		bool bDeleteODDetails = false;

		if(!strTemp.IsEmpty()){
			_variant_t vtODSphere = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_SPHERE, strTemp);
			if(!strTemp.IsEmpty()){
				vtODSphere = atof(strTemp);
			}

			_variant_t vtODCylinder = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_CYL, strTemp);
			if(!strTemp.IsEmpty()){
				vtODCylinder = atof(strTemp);
			}

			_variant_t vtODAxis = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_AXIS, strTemp);
			if(!strTemp.IsEmpty()){
				vtODAxis = _variant_t((long)atoi(strTemp));
			}

			_variant_t vtODAddition = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_ADD, strTemp);
			if(!strTemp.IsEmpty()){
				vtODAddition = atof(strTemp);
			}

			_variant_t vtODBC = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_BC, strTemp);
			if(!strTemp.IsEmpty()){
				vtODBC = atof(strTemp);
			}

			_variant_t vtODDiam = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_DIAM, strTemp);
			if(!strTemp.IsEmpty()){
				vtODDiam = atof(strTemp);
			}

			CString strODColor;
			GetDlgItemText(IDC_CON_LEN_OD_CLR, strODColor);

			_variant_t vtODQty = g_cvarNull;
			GetDlgItemText(IDC_CON_LEN_OD_QTY, strTemp);
			if(!strTemp.IsEmpty()){
				vtODQty = _variant_t((long)atoi(strTemp));
			}

			CString strODNote;
			GetDlgItemText(IDC_CON_LENS_OD_NOTES, strODNote);

			// (j.dinatale 2013-03-19 15:05) - PLID 55752 - added the field for the doctor's instructions
			CString strODDocIns;
			GetDlgItemText(IDC_CON_LENS_OD_DOCINSTRUCT, strODDocIns);

			if(m_nRightLensDetailRxID == -1){
				sqlSave += CSqlFragment(
					"INSERT INTO LensDetailRxT (PrescriptionSphere, CylinderValue, CylinderAxis, AdditionValue, BC, Diameter, Color, Quantity, Note, DocIns)"
					"VALUES "
					"({VT_R8}, {VT_R8}, {VT_I4}, {VT_R8}, {VT_R8}, {VT_R8}, {STRING}, {VT_I4}, {STRING}, {STRING}); "
					"SET @nRightLensDetailRxID = CONVERT(int, SCOPE_IDENTITY()); ",
					vtODSphere, vtODCylinder, vtODAxis, vtODAddition, vtODBC, vtODDiam, strODColor, vtODQty, strODNote, strODDocIns
					);
			}else{
				sqlSave += CSqlFragment(
					"SET @nRightLensDetailRxID = {INT}; "
					"UPDATE LensDetailRxT SET "
					"	PrescriptionSphere = {VT_R8}, "
					"	CylinderValue = {VT_R8}, "
					"	CylinderAxis = {VT_I4}, "
					"	AdditionValue = {VT_R8}, "
					"	BC = {VT_R8}, "
					"	Diameter = {VT_R8}, "
					"	Color = {STRING}, "
					"	Quantity = {VT_I4}, "
					"	Note = {STRING}, "
					"	DocIns = {STRING} "
					"WHERE ID = @nRightLensDetailRxID; ",
					m_nRightLensDetailRxID, vtODSphere, vtODCylinder, vtODAxis, vtODAddition, vtODBC, vtODDiam, strODColor, vtODQty, strODNote, strODDocIns
					);
			}
		}else{
			// (j.dinatale 2012-03-29 15:54) - PLID 48623 - at this point, we know we may have to delete our detail entry
			bDeleteODDetails = true;
			sqlSave += "SET @nRightLensDetailRxID = NULL; ";
		}

		sqlSave +=
			"UPDATE LensRxT SET LeftLensDetailRxID = @nLeftLensDetailRxID, RightLensDetailRxID = @nRightLensDetailRxID WHERE ID = @nLensRxID; ";

		// insert/update GlassesOrderOtherInfoT
		// (j.dinatale 2012-03-29 16:36) - PLID 48623 - only add to the GlassesOrderOtherInfoT table if we are not deleting details
		if(!bDeleteOSDetails){
			_variant_t vtOSProductID = g_cvarNull;
			{
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOSProdList->CurSel;
				// (s.dhole 2012-04-12 16:22) - PLID 48968 select none
				if(pRow &&  VarLong( pRow->GetValue(ConLensProductRxDD::ID) ,-1) != -1){
					vtOSProductID = pRow->GetValue(ConLensProductRxDD::ID);
				}
			}
			// (s.dhole 2012-03-19 12:21) - PLID 48596
			CString strFromshelf="(OS):";
			CString strSavedFromshelf ="(OS):";
			_variant_t vtLeftToBeOrdered  = g_cvarNull;
			if (IsDlgButtonChecked(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)){
				vtLeftToBeOrdered  = g_cvarTrue;
				strFromshelf+=" Yes";
			}
			else{
				vtLeftToBeOrdered = g_cvarFalse;
				strFromshelf+=" No";
			}

			if (m_bSavedProductToBeOrderedLeft ==TRUE){
				strSavedFromshelf+=" Yes";
			}else{
				strSavedFromshelf+=" No";
			}
			
	
			// (s.dhole 2012-03-19 12:21) - PLID 48596
			if(m_nLeftLensOtherInfoID == -1){
				sqlSave += CSqlFragment(
					"INSERT INTO GlassesOrderOtherInfoT (ProductID,ToBeOrdered) "
					"VALUES "
					"({VT_I4},{VT_BOOL}); "
					"SET @nLeftLensOtherInfoID = CONVERT(int, SCOPE_IDENTITY()); ",
					vtOSProductID,vtLeftToBeOrdered);
					// (s.dhole 2012-05-17 16:38) - PLID 49899 Audit OffTheShelf
				if (m_bSavedProductToBeOrderedLeft != VarBool(vtLeftToBeOrdered,FALSE) ) {
					AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderLintItemOffTheShelf, m_nOrderID,
					strSavedFromshelf, strFromshelf, aepMedium);
				}
			}else{
				
				sqlSave += CSqlFragment(
					"SET @nLeftLensOtherInfoID = {INT}; "
					"UPDATE GlassesOrderOtherInfoT SET "
					"ProductID = {VT_I4} ,"
					" ToBeOrdered = {VT_BOOL} "
					"WHERE ID = @nLeftLensOtherInfoID; ",
					m_nLeftLensOtherInfoID, vtOSProductID,vtLeftToBeOrdered
					);
				// (s.dhole 2012-05-17 16:38) - PLID 49899 Audit OffTheShelf
				if (m_bSavedProductToBeOrderedLeft != VarBool(vtLeftToBeOrdered,FALSE) ) {
					AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderLintItemOffTheShelf, m_nOrderID,
					strSavedFromshelf, strFromshelf, aepMedium);
				}
			}
		}

		// (j.dinatale 2012-03-29 16:36) - PLID 48623 - only add to the GlassesOrderOtherInfoT table if we are not deleting details
		if(!bDeleteODDetails){
			_variant_t vtODProductID = g_cvarNull;
			{
				NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlODProdList->CurSel;
				// (s.dhole 2012-04-12 16:22) - PLID 48968 Save if product is exist
				if(pRow &&  VarLong( pRow->GetValue(ConLensProductRxDD::ID) ,-1) != -1 ){
					vtODProductID = pRow->GetValue(ConLensProductRxDD::ID);
				}
			}
			// (s.dhole 2012-03-19 12:21) - PLID 48596
			CString strFromshelf="(OD):";
			CString strSavedFromshelf ="(OD):";
			_variant_t vtRightToBeOrdered = g_cvarNull;
			if (IsDlgButtonChecked(  IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)){
				vtRightToBeOrdered = g_cvarTrue;
				strFromshelf+=" Yes";
			}
			else{
				vtRightToBeOrdered = g_cvarFalse;
				strFromshelf+=" No";
			}
			if (m_bSavedProductToBeOrderedRight ==TRUE){
				strSavedFromshelf+=" Yes";
			}else{
				strSavedFromshelf+=" No";
			}
			// (s.dhole 2012-03-19 12:21) - PLID 48596
			if(m_nRightLensOtherInfoID == -1){
				sqlSave += CSqlFragment(
					"INSERT INTO GlassesOrderOtherInfoT (ProductID,ToBeOrdered) "
					"VALUES "
					"({VT_I4},{VT_BOOL} ); "
					"SET @nRightLensOtherInfoID = CONVERT(int, SCOPE_IDENTITY()); ",
					vtODProductID,vtRightToBeOrdered
					);
			}else{
				sqlSave += CSqlFragment(
					"SET @nRightLensOtherInfoID = {INT}; "
					"UPDATE GlassesOrderOtherInfoT SET "
					"ProductID = {VT_I4}, "
					" ToBeOrdered = {VT_BOOL} "
					"WHERE ID = @nRightLensOtherInfoID; ",
					m_nRightLensOtherInfoID, vtODProductID ,vtRightToBeOrdered
					);
				// Audit changes
				// (s.dhole 2012-05-17 16:38) - PLID 49899 Audit OffTheShelf
				if (m_bSavedProductToBeOrderedRight!= VarBool( vtRightToBeOrdered ,FALSE)) {
					AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderLintItemOffTheShelf, m_nOrderID,
					strSavedFromshelf, strFromshelf, aepMedium);
				}
			}
		}

		// insert/update GlassesOrderT
		CString strDescription;
		GetDlgItemText(IDC_CON_LEN_DESCRIPTION, strDescription);

		_variant_t vtLocationID = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlLocationList->CurSel;
			if(pRow){
				vtLocationID = pRow->GetValue(ConLensOrderLocList::ID);
			}
		}

		/*_variant_t vtOrderStatus = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOrderStatusList->CurSel;
			if(pRow){
				vtOrderStatus = pRow->GetValue(ConLensOrderStatusList::ID);
			}
		}*/

		_variant_t vtProviderID = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlProviderList->CurSel;
			if(pRow){
				vtProviderID = pRow->GetValue(ConLensOrderProvList::ID);
			}
		}

		_variant_t vtOrderDate = g_cvarNull;
		if(m_pDate->GetStatus() == 1){
			vtOrderDate = _variant_t(m_pDate->GetDateTime(), VT_DATE);
		}

		_variant_t vtSupplierID = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlSuppList->CurSel;
			if(pRow){
				vtSupplierID = pRow->GetValue(ConLensSupplierRxDD::ID);
			}
		}

		// (j.dinatale 2012-04-09 14:32) - PLID 49219 - save the optician field
		_variant_t vtOpticianID = g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOpticianList->CurSel;
			if(pRow){
				vtOpticianID = pRow->GetValue(ConLensOrderOpticianList::ID);
			}
		}

		BOOL bShipToPatient = FALSE;
		GetDlgItemCheck(IDC_CON_LEN_SHIP_PATIENT, bShipToPatient);
		// (s.dhole 2012-04-25 12:20) - PLID 49969  Save emn
		_variant_t vtCLEmnID= g_cvarNull;
		if (m_nCLEmnID>0)
		{
			vtCLEmnID =m_nCLEmnID;
		}
		
		// (s.dhole 2012-04-25 17:05) - PLID 49992 
		_variant_t vtInsuredPartyID= g_cvarNull;
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlVisionPlans->CurSel;
			if(pRow){
				if (VarLong(pRow->GetValue(ConLensOrderVisPlanList::PersonID ),-1) !=-1){
					vtInsuredPartyID= pRow->GetValue(ConLensOrderVisPlanList::PersonID );
				}
			}
		}

	
		// (s.dhole 2012-05-08 09:20) - PLID 50131
		CString strCLInvoiceNo="";
		GetDlgItemText(IDC_CON_LENS_ORDER_INVO_NO, strCLInvoiceNo);
		if(m_nOrderID == -1){
			// (j.dinatale 2012-04-09 14:32) - PLID 49219 - save the optician field
			// (r.wilson 4/11/2012) PLID 43741 - Changed GlassesOrderStatus to GlassesOrderStatusID
			// (s.dhole 2012-04-25 12:20) - PLID 49969  Save emnid
			// (s.dhole 2012-05-08 09:20) - PLID 50131 Save InvoiceNo
			sqlSave += CSqlFragment(
				"INSERT INTO GlassesOrderT "
				"	(GlassesJobType, GlassesJobNote, LensRxID, LeftGlassesOrderOtherInfoID, RightGlassesOrderOtherInfoID, IsDelete, UpdateDate, OrderCreateDate, "
				"	GlassesOrderType, PersonID, SupplierID, "
				"	LocationID, ProviderID, Description, GlassesOrderStatusID, Date, UserID, ShipToPatient, OpticianID,EmnID,InsuredPartyID,InvoiceNo) "
				"	VALUES "
				"	('', '', @nLensRxID, @nLeftLensOtherInfoID, @nRightLensOtherInfoID, 0, GETDATE(), GETDATE(), {INT}, @nPatientID, {VT_I4}, {VT_I4}, {VT_I4}, "
				"	{STRING}, {INT}, {VT_DATE}, {INT}, {BOOL}, {VT_I4},{VT_I4},{VT_I4},{STRING}); "
				"SET @nGlassOrderID = CONVERT(int, SCOPE_IDENTITY()); ",
				(long)vwotContactLensPatient, vtSupplierID, vtLocationID, vtProviderID, strDescription, /*(long)CInvVisionWebDlg::vwOSPending*/ GetOrderStatusAsInt("Pending"), vtOrderDate, GetCurrentUserID(), bShipToPatient, vtOpticianID,vtCLEmnID,vtInsuredPartyID,strCLInvoiceNo 
			);
		}else{
			// (j.dinatale 2012-04-09 14:32) - PLID 49219 - save the optician field
			// (s.dhole 2012-04-25 12:20) - PLID 49969  Save emnid
			// (s.dhole 2012-05-08 09:20) - PLID 50131 Save InvoiceNo
			sqlSave += CSqlFragment(
				"SET @nGlassOrderID = {INT}; "
				"UPDATE GlassesOrderT SET "
				"	UpdateDate = GETDATE(), "
				"	PersonID = @nPatientID, "
				"	SupplierID = {VT_I4}, "
				"	LocationID = {VT_I4}, "
				"	ProviderID = {VT_I4}, "
				"	Description = {STRING}, "
				"	Date = {VT_DATE}, "
				"	ShipToPatient = {BOOL}, "
				"	OpticianID = {VT_I4}, "
				"	EMNid = {VT_I4}, "
				"   InsuredPartyID = {VT_I4}, "
				"	LeftGlassesOrderOtherInfoID = @nLeftLensOtherInfoID, "
				"	RightGlassesOrderOtherInfoID = @nRightLensOtherInfoID, "
				"InvoiceNo = {STRING} "
				"WHERE ID = @nGlassOrderID; ",
				m_nOrderID, vtSupplierID, vtLocationID, vtProviderID, strDescription, vtOrderDate, bShipToPatient, vtOpticianID,vtCLEmnID ,vtInsuredPartyID,strCLInvoiceNo
			);
		}
		// (s.dhole 2012-03-16 17:29) - PLID 48970 Save charges list Data 
		if(m_nOrderID == -1){
			for(int iCount=0 ;  iCount< m_arLensContactServiceInfo.GetSize(); iCount++  )
			{
				_variant_t  varbISOD = g_cvarNull;
				if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOD!= FALSE ){
					varbISOD = g_cvarTrue;
				}
				else{
					varbISOD = g_cvarFalse;
				}
				_variant_t  varbISOS = g_cvarNull;
				if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOS != FALSE ){
					varbISOS = g_cvarTrue;
				}
				else{
					varbISOS = g_cvarFalse;}
				
				_variant_t  varbDefaultProduct = g_cvarNull;
				if ((BOOL)m_arLensContactServiceInfo[iCount].bIsDefault  != FALSE ){
					varbDefaultProduct = g_cvarTrue;
				}
				else{
					varbDefaultProduct = g_cvarFalse;
				}
				_variant_t  varbIsOffTheShelf = g_cvarNull;
				if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOffTheShelf  != FALSE ){
					varbIsOffTheShelf = g_cvarTrue;
				}
				else{
					varbIsOffTheShelf = g_cvarFalse;
				}

				sqlSave += CSqlFragment("INSERT INTO GlassesOrderServiceT (GlassesOrderID, ServiceID, Price, Quantity, Type, "
				" OpticalLineItemCost, bODEye,bOSEye,IsDefaultProduct,IsOffTheShelf,PatientRespAmt ,VisionRespAmt) "
				"VALUES (@nGlassOrderID, {INT}, {VT_CY}, {VT_R8}, {INT},{VT_CY},{VT_BOOL},{VT_BOOL},{VT_BOOL},{VT_BOOL},{VT_CY},{VT_CY}  )", 
				m_arLensContactServiceInfo[iCount].nServiceID,     _variant_t(m_arLensContactServiceInfo[iCount].Price),_variant_t(  m_arLensContactServiceInfo[iCount].nQty  ),
				m_arLensContactServiceInfo[iCount].nType, _variant_t(  m_arLensContactServiceInfo[iCount].Cost),
				varbISOD ,varbISOS, varbDefaultProduct ,varbIsOffTheShelf,
				 _variant_t( m_arLensContactServiceInfo[iCount].PatientResp) , _variant_t(  m_arLensContactServiceInfo[iCount].VisionResp));
				sqlSave += CSqlFragment(" SELECT @nGlassesOrderServiceT = CONVERT(int, SCOPE_IDENTITY()); ");
				CParamSqlBatch batch;
				GlassesAuditAndGenerateSaveStringForDiscounts(nPatientID, TRUE,TRUE,strPatientName,-1,
																m_arLensContactServiceInfo[iCount].DiscountList  , batch,sqlSave) ;
			}
		}
		else{
			for(int iCount=0 ;  iCount< m_arLensContactServiceInfo.GetSize(); iCount++  ){
					_variant_t  varbISOD = g_cvarNull;
					if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOD!= FALSE ){
						varbISOD = g_cvarTrue;
					}
					else{
						varbISOD = g_cvarFalse;
					}
					_variant_t  varbISOS = g_cvarNull;
					if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOS != FALSE ){
						varbISOS = g_cvarTrue;
					}
					else{
						varbISOS = g_cvarFalse;
					}

					_variant_t  varbDefaultProduct = g_cvarNull;
					if ((BOOL)m_arLensContactServiceInfo[iCount].bIsDefault  != FALSE ){
						varbDefaultProduct = g_cvarTrue;
					}
					else{
						varbDefaultProduct = g_cvarFalse;
					}
					_variant_t  varbIsOffTheShelf = g_cvarNull;
					if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOffTheShelf  != FALSE ){
						varbIsOffTheShelf = g_cvarTrue;
					}
					else{
						varbIsOffTheShelf = g_cvarFalse;
					}
					CString strDescription = m_arLensContactServiceInfo[iCount].strCode ;
					if(!strDescription.IsEmpty()) {
						strDescription += " - ";
					}
					strDescription += m_arLensContactServiceInfo[iCount].strDescription ;
					// Add new row in database
					if (m_arLensContactServiceInfo[iCount].nID==-1 
						&& m_arLensContactServiceInfo[iCount].bIsDelete ==FALSE){
						AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderServiceAdded, m_nOrderID,
						"", strDescription, aepMedium);

						sqlSave += CSqlFragment("INSERT INTO GlassesOrderServiceT (GlassesOrderID, ServiceID, Price, Quantity, Type, "
						" OpticalLineItemCost, bODEye,bOSEye,IsDefaultProduct,IsOffTheShelf ,PatientRespAmt ,VisionRespAmt) "
						"VALUES (@nGlassOrderID, {INT}, {VT_CY}, {VT_R8}, {INT},{VT_CY},{VT_BOOL},{VT_BOOL},{VT_BOOL},{VT_BOOL},{VT_CY},{VT_CY}  );", 
						m_arLensContactServiceInfo[iCount].nServiceID,     _variant_t(m_arLensContactServiceInfo[iCount].Price),_variant_t(  m_arLensContactServiceInfo[iCount].nQty  ),
						m_arLensContactServiceInfo[iCount].nType, _variant_t(  m_arLensContactServiceInfo[iCount].Cost),
						varbISOD ,varbISOS, varbDefaultProduct ,varbIsOffTheShelf
						, _variant_t(  m_arLensContactServiceInfo[iCount].PatientResp ), _variant_t(  m_arLensContactServiceInfo[iCount].VisionResp));

						sqlSave += CSqlFragment(" SET @nGlassesOrderServiceT = CONVERT(int, SCOPE_IDENTITY());");
						CParamSqlBatch batch;
						//Save Discount
						GlassesAuditAndGenerateSaveStringForDiscounts(nPatientID,FALSE,TRUE,strPatientName, m_arLensContactServiceInfo[iCount].nID ,
						m_arLensContactServiceInfo[iCount].DiscountList  , batch,sqlSave); 	
					}
					else if (m_arLensContactServiceInfo[iCount].nID!=-1 && 
						m_arLensContactServiceInfo[iCount].bIsDelete ==FALSE){

						// (s.dhole 2012-04-23 12:53) - PLID 49899 Price
						COleCurrency cySaved = m_arLensContactServiceInfo[iCount].SavedPrice ;
						COleCurrency cyNew = m_arLensContactServiceInfo[iCount].Price ;
						if(cySaved != cyNew) {
							AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderServicePrice, m_nOrderID,
								strDescription + " - " + FormatCurrencyForInterface(cySaved), FormatCurrencyForInterface(cyNew), aepMedium);
							// (s.dhole 2012-04-23 12:52) - PLID 48970 Update Price 
							sqlSave += CSqlFragment("UPDATE GlassesOrderServiceT SET Price = {VT_CY} WHERE ID = {INT};"
								, variant_t (m_arLensContactServiceInfo[iCount].Price), m_arLensContactServiceInfo[iCount].nID );
						}

						// (s.dhole 2012-04-23 12:53) - PLID 49899 Cost
						cySaved = m_arLensContactServiceInfo[iCount].SavedCost;
						cyNew = m_arLensContactServiceInfo[iCount].Cost ;
						if(cySaved != cyNew) {
							AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderCost, m_nOrderID,
								strDescription + " - " + FormatCurrencyForInterface(cySaved), FormatCurrencyForInterface(cyNew), aepMedium);
							// (s.dhole 2012-04-23 12:52) - PLID 48970 Update Cost 
							sqlSave += CSqlFragment("UPDATE GlassesOrderServiceT SET OpticalLineItemCost = {VT_CY} WHERE ID = {INT};"
								, variant_t (m_arLensContactServiceInfo[iCount].Cost), m_arLensContactServiceInfo[iCount].nID );
						}

						// (s.dhole 2012-04-23 12:53) - PLID 49992 Patient Resp
						cySaved = m_arLensContactServiceInfo[iCount].SavedPatientResp  ;
						cyNew = m_arLensContactServiceInfo[iCount].PatientResp  ;
						if(cySaved != cyNew) {
							AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderPatientResp, m_nOrderID,
								strDescription + " - " + FormatCurrencyForInterface(cySaved), FormatCurrencyForInterface(cyNew), aepMedium);
							// (s.dhole 2012-04-23 12:52) - PLID 48970 Update Patient Resp
							sqlSave += CSqlFragment("UPDATE GlassesOrderServiceT SET PatientRespAmt = {VT_CY} WHERE ID = {INT};"
								, variant_t (m_arLensContactServiceInfo[iCount].PatientResp), m_arLensContactServiceInfo[iCount].nID );
						}
						
						// (s.dhole 2012-04-23 12:53) - PLID 49992 Vision Resp
						cySaved = m_arLensContactServiceInfo[iCount].SavedVisionResp  ;
						cyNew = m_arLensContactServiceInfo[iCount].VisionResp  ;
						if(cySaved != cyNew) {
							AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderVisionResp, m_nOrderID,
								strDescription + " - " + FormatCurrencyForInterface(cySaved), FormatCurrencyForInterface(cyNew), aepMedium);
							// (s.dhole 2012-04-23 12:52) - PLID 48970 Update Vision Resp
							sqlSave += CSqlFragment("UPDATE GlassesOrderServiceT SET VisionRespAmt = {VT_CY} WHERE ID = {INT};"
								, variant_t (m_arLensContactServiceInfo[iCount].VisionResp), m_arLensContactServiceInfo[iCount].nID );
						}

						// (s.dhole 2012-04-23 12:53) - PLID 49899 Quantity
						double  nSaved  = m_arLensContactServiceInfo[iCount].nSavedQty  ;
						double nNew = m_arLensContactServiceInfo[iCount].nQty  ;
						if(nSaved != nNew) {
							AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderServiceQuantity , m_nOrderID,
								strDescription + " - " + AsString (nSaved), AsString(nNew), aepMedium);
							// (s.dhole 2012-04-23 12:52) - PLID 48970 Update Quantity
							sqlSave += CSqlFragment("UPDATE GlassesOrderServiceT SET Quantity = {VT_R8} WHERE ID = {INT};"
								,_variant_t ( m_arLensContactServiceInfo[iCount].nQty), m_arLensContactServiceInfo[iCount].nID );
						}


						// (s.dhole 2012-04-23 12:53) - PLID 49899 off the shelf
						BOOL bSaved  = m_arLensContactServiceInfo[iCount].bIsOffTheShelfSaved;
						BOOL bNew = m_arLensContactServiceInfo[iCount].bIsOffTheShelf  ;
						if(bSaved!= bNew ) {
							// (s.dhole 2012-05-24 09:29) - PLID 50479  Change IsOffTheShelf as varint    
							_variant_t  varbIsOffTheShelf = g_cvarNull;
							if ((BOOL)m_arLensContactServiceInfo[iCount].bIsOffTheShelf  != FALSE ){
								varbIsOffTheShelf = g_cvarTrue;
							}
							else{
								varbIsOffTheShelf = g_cvarFalse;
							}
						// (s.dhole 2012-04-23 12:52) - PLID 48970 Update off the shelf
							// we are auditing in some where else
							// (s.dhole 2012-05-24 09:29) - PLID 50479 Update IsOffTheShelf as varint
							sqlSave += CSqlFragment("UPDATE GlassesOrderServiceT SET  bODEye={VT_BOOL},bOSEye={VT_BOOL} ,IsOffTheShelf = {VT_BOOL} WHERE ID = {INT}"
								,varbISOD ,varbISOS, varbIsOffTheShelf, m_arLensContactServiceInfo[iCount].nID );
						}

						sqlSave += CSqlFragment(" SET @nGlassesOrderServiceT = {INT};",  m_arLensContactServiceInfo[iCount].nID);
						CParamSqlBatch batch;
						GlassesAuditAndGenerateSaveStringForDiscounts(nPatientID,FALSE,TRUE,strPatientName, m_arLensContactServiceInfo[iCount].nID ,
						m_arLensContactServiceInfo[iCount].DiscountList  , batch,sqlSave) 	;
					}
					else if (m_arLensContactServiceInfo[iCount].nID!=-1 && m_arLensContactServiceInfo[iCount].bIsDelete ==TRUE)
					{
						CString strDescription = m_arLensContactServiceInfo[iCount].strCode;
						if(!strDescription.IsEmpty()) {
							strDescription += " - ";
						}
						strDescription += m_arLensContactServiceInfo[iCount].strDescription;
						AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderServiceRemoved, m_nOrderID,
						strDescription, "<Deleted>", aepMedium);
						// we should delete Discount data now
						// (s.dhole 2012-04-23 16:11) - PLID 48970 Delete Records
						sqlSave += CSqlFragment("DELETE FROM GlassesOrderServiceDiscountsT"
						" WHERE GlassesOrderServiceID  = {INT};", m_arLensContactServiceInfo[iCount].nID    );
						sqlSave += CSqlFragment("UPDATE ChargesT SET GlassesOrderServiceID = NULL WHERE GlassesOrderServiceID = {INT};", m_arLensContactServiceInfo[iCount].nID   );
						sqlSave += CSqlFragment("DELETE FROM   GlassesOrderServiceT "
						" WHERE ID = {INT};", m_arLensContactServiceInfo[iCount].nID    );
					}
				}
		}

		// (j.dinatale 2012-03-29 16:34) - PLID 48623 - handle the delete for lens rx details and glasses order other info
		if(bDeleteODDetails){
			if(m_nRightLensDetailRxID != -1){
				sqlSave += CSqlFragment(
					"DELETE FROM LensDetailRxT WHERE ID = {INT}; ",
					m_nRightLensDetailRxID
					);
			}

			if(m_nRightLensOtherInfoID != -1){
				sqlSave += CSqlFragment(
				"DELETE FROM GlassesOrderOtherInfoT WHERE ID = {INT}; ",
				m_nRightLensOtherInfoID
				);
			}
		}

		if(bDeleteOSDetails){
			if(m_nLeftLensDetailRxID != -1){
				sqlSave += CSqlFragment(
					"DELETE FROM LensDetailRxT WHERE ID = {INT}; ",
					m_nLeftLensDetailRxID
					);
			}

			if(m_nLeftLensOtherInfoID != -1){
				sqlSave += CSqlFragment(
				"DELETE FROM GlassesOrderOtherInfoT WHERE ID = {INT}; ",
				m_nLeftLensOtherInfoID
				);
			}
		}


		sqlSave += 
			"SET NOCOUNT OFF; "
			"SELECT "
			"	@nGlassOrderID AS GlassOrderID, "
			"	@nLensRxID AS LensRxID, "
			"	@nLeftLensDetailRxID AS LeftLensDetailRxID, "
			"	@nRightLensDetailRxID AS RightLensDetailRxID, "
			"	@nLeftLensOtherInfoID AS LeftLensOtherInfoID, "
			"	@nRightLensOtherInfoID AS RightLensOtherInfoID; ";

		// create recordset here to get our new IDs just in case
		ADODB::_RecordsetPtr rs = CreateParamRecordset(
			"BEGIN TRAN; \r\n"
			"{SQL} \r\n"
			"COMMIT TRAN", sqlSave);

		// (j.dinatale 2012-05-15 15:17) - PLID 50345 - need to keep track if this order is new before collecting our new ID
		bool bNewOrder = (m_nOrderID == -1);
		
		if(!rs->eof){
			m_nOrderID = AdoFldLong(rs, "GlassOrderID");
			m_nLensRxID = AdoFldLong(rs, "LensRxID");
			m_nLeftLensDetailRxID = AdoFldLong(rs, "LeftLensDetailRxID", -1);
			m_nRightLensDetailRxID = AdoFldLong(rs, "RightLensDetailRxID", -1);
			m_nLeftLensOtherInfoID = AdoFldLong(rs, "LeftLensOtherInfoID", -1);
			m_nRightLensOtherInfoID = AdoFldLong(rs, "RightLensOtherInfoID", -1);
		}else{
			// we should have something to select here
			ASSERT(FALSE);
		}

		// (j.dinatale 2012-05-15 15:17) - PLID 50345 - if the contact lens order was new, we must audit the dawn of its creation
		if(bNewOrder){
			AuditEvent(nPatientID, strPatientName, nAuditTransactionID, aeiContactLensOrderCreated, m_nOrderID, "", "Contact Lens Order '" + strDescription + "' Created", aepMedium);
		}

		// (s.dhole 2012-04-23 16:12) - PLID 49888
		CommitAuditTransaction(nAuditTransactionID);
		return true;
	}NxCatchAll(__FUNCTION__);

	// we end up here, we had some form of exception, dont close
	return false;
}

void CContactLensOrderForm::OnBnClickedOk()
{
	try{
		if(!SaveOrder()){
			return;
		}

		// (j.dinatale 2012-03-21 16:28) - PLID 49079 - do closing routine!
		CloseCleanup(IDOK);
	}NxCatchAll(__FUNCTION__);

	CNxDialog::OnOK();
}

// (j.dinatale 2012-03-07 17:14) - PLID 48709 - Copy data!
void CContactLensOrderForm::CopyField(long nFromID, long nToID)
{
	CString strTemp;
	GetDlgItemText(nFromID, strTemp);
	SetDlgItemText(nToID, strTemp);
}

// (j.dinatale 2012-03-07 17:14) - PLID 48709 - Copy data!
void CContactLensOrderForm::OnBnClickedConLenCopyToOs()
{
	try{
		CopyField(IDC_CON_LEN_OD_SPHERE, IDC_CON_LEN_OS_SPHERE);
		CopyField(IDC_CON_LEN_OD_CYL, IDC_CON_LEN_OS_CYL);
		CopyField(IDC_CON_LEN_OD_AXIS, IDC_CON_LEN_OS_AXIS);
		CopyField(IDC_CON_LEN_OD_ADD, IDC_CON_LEN_OS_ADD);
		CopyField(IDC_CON_LEN_OD_BC, IDC_CON_LEN_OS_BC);
		CopyField(IDC_CON_LEN_OD_DIAM, IDC_CON_LEN_OS_DIAM);
		CopyField(IDC_CON_LEN_OD_CLR, IDC_CON_LEN_OS_CLR);
		CopyField(IDC_CON_LEN_OD_QTY, IDC_CON_LEN_OS_QTY);
		CopyField(IDC_CON_LENS_OD_NOTES, IDC_CON_LENS_OS_NOTES);

		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlODProdList->GetCurSel();
		if(pRow){
			long nProdID = VarLong(pRow->GetValue(ConLensProductRxDD::ID), -1);
			if(nProdID == -1){
				// (s.dhole 2012-04-12 16:22) - PLID 48968 select none
				m_pdlOSProdList->CurSel = m_pdlOSProdList->FindByColumn(ConLensProductRxDD::ID,(long) -1, NULL, VARIANT_FALSE);
			}else{
				NXDATALIST2Lib::IRowSettingsPtr pRow2 = m_pdlOSProdList->FindByColumn(ConLensProductRxDD::ID, _variant_t(nProdID), NULL, VARIANT_FALSE);
				SelChosenConLensOsProduct(pRow2);
				m_pdlOSProdList->CurSel = pRow2;
			}
		}else{
			// (s.dhole 2012-04-12 16:22) - PLID 48968 select none
			m_pdlOSProdList->CurSel =  m_pdlOSProdList->FindByColumn(ConLensProductRxDD::ID,(long) -1, NULL, VARIANT_FALSE);
		}

		// (s.dhole 2012-03-19 11:59) - PLID 48596
		if (IsDlgButtonChecked(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)){
			SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED,TRUE) ; 
		}
		else{
			SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED,FALSE) ; 
		}

		OnBnClickedChkConLensOsToBeOrdered();

		// (s.dhole 2012-03-19 12:32) - PLID 48971
		// (j.dinatale 2012-03-29 14:45) - PLID 49169 - on kill focus for the sphere will work just fine here.
		//OnEnKillfocusConLenOsQty();
		OnEnKillfocusConLenOsSphere();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-07 17:14) - PLID 48709 - Copy data!
void CContactLensOrderForm::OnBnClickedConLenCopyToOd()
{
	try{
		CopyField(IDC_CON_LEN_OS_SPHERE, IDC_CON_LEN_OD_SPHERE);
		CopyField(IDC_CON_LEN_OS_CYL, IDC_CON_LEN_OD_CYL);
		CopyField(IDC_CON_LEN_OS_AXIS, IDC_CON_LEN_OD_AXIS);
		CopyField(IDC_CON_LEN_OS_ADD, IDC_CON_LEN_OD_ADD);
		CopyField(IDC_CON_LEN_OS_BC, IDC_CON_LEN_OD_BC);
		CopyField(IDC_CON_LEN_OS_DIAM, IDC_CON_LEN_OD_DIAM);
		CopyField(IDC_CON_LEN_OS_CLR, IDC_CON_LEN_OD_CLR);
		CopyField(IDC_CON_LEN_OS_QTY, IDC_CON_LEN_OD_QTY);
		CopyField(IDC_CON_LENS_OS_NOTES, IDC_CON_LENS_OD_NOTES);


		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOSProdList->GetCurSel();
		if(pRow){
			long nProdID = VarLong(pRow->GetValue(ConLensProductRxDD::ID), -1);
			if(nProdID == -1){
				// (s.dhole 2012-04-12 16:22) - PLID 48968 Select none
				m_pdlODProdList->CurSel =  m_pdlODProdList->FindByColumn(ConLensProductRxDD::ID,(long) -1, NULL, VARIANT_FALSE);
			}else{
				NXDATALIST2Lib::IRowSettingsPtr pRow2 = m_pdlODProdList->FindByColumn(ConLensProductRxDD::ID, _variant_t(nProdID), NULL, VARIANT_FALSE);
				SelChosenConLensOdProduct(pRow2);
				m_pdlODProdList->CurSel = pRow2;
			}
		}else{
			// (s.dhole 2012-04-12 16:22) - PLID 48968 select none
			m_pdlODProdList->CurSel = m_pdlODProdList->FindByColumn(ConLensProductRxDD::ID,(long) -1, NULL, VARIANT_FALSE);
		}

		// (s.dhole 2012-03-19 11:59) - PLID 48596
		if (IsDlgButtonChecked(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)){
			SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED,TRUE)  ;
		}
		else{
			SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED,FALSE)  ;
		}

		OnBnClickedChkConLensOdToBeOrdered();

		// (s.dhole 2012-03-19 12:32) - PLID 48971
		// (j.dinatale 2012-03-29 14:45) - PLID 49169 - on kill focus for the sphere will work just fine here.
		//OnEnKillfocusConLenOdQty();
		OnEnKillfocusConLenOdSphere();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-13 09:55) - PLID 48848 - make the prev rx window available in a contact lens order
void CContactLensOrderForm::OnBnClickedConLenOdPrevRx()
{
	try{
		long nPatientID = -1;
		CString strPatientName = "";
		{
			NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlPatientList->CurSel;
			if(pRow){
				nPatientID = VarLong(pRow->GetValue(ConLensOrderPtList::ID));
				strPatientName = VarString(pRow->GetValue(ConLensOrderPtList::Name));
			}else{
				return;
			}
		}

		CGlassesEMNPrescriptionList dlg;
		dlg.m_strPatientName = strPatientName;
		// (s.dhole 2012-04-20 13:29) - PLID 49893 Open Vision prescription as read only   
		dlg.m_bIsReadOnly = m_bIsBilled;
		
		dlg.m_PrescriptionWindowDisplayType= dlg.pwAllowRxSelection;
		dlg.m_nPatientID = nPatientID;
		//TES 4/16/2012 - PLID 49368 - Tell the dialog we're asking for a contact lens presccription
		dlg.m_bCalledForContactLens = true;
		//TES 4/23/2012 - PLID 49368 - Don't use the data if the user cancelled!
		if(IDCANCEL == dlg.DoModal()) {
			return;
		}
	
		//TES 4/16/2012 - PLID 49368 - Load the information from the dialog (if they selected something) onto the screen.
		if(dlg.m_oContactLensRx.bRecordExists) {
			m_bPrevRxImported = true;	// (j.dinatale 2013-03-21 12:46) - PLID 55752 - we just imported an Rx it seems, so set this flag

			// (s.dhole 2012-04-25 12:20) - PLID 49969  if rx selected from Emn than load emn information
			if (dlg.m_oContactLensRx.nEmnId >0){
				m_nCLEmnID = dlg.m_oContactLensRx.nEmnId ;
				m_nEMNCLPatientID= nPatientID; 
				m_nCLLastEMN =m_nCLEmnID;
			}
			else{
				m_nCLEmnID  = -1;
			}
			ReflectCLEmn();


			//TES 4/17/2012 - PLID 49746 - If we have a pointer to information from the EMN, use that (it has some extra fields in it).
			if(dlg.m_oContactLensRx.clriOD.pEmnInfo) {
				ContactLensOrderLensDetails *pClorld = dlg.m_oContactLensRx.clriOD.pEmnInfo;
				SetDlgItemText(IDC_CON_LEN_OD_SPHERE, AsPrescriptionNumber(pClorld->strSphere, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_CYL, AsPrescriptionNumber(pClorld->strCylinder, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_AXIS, AsPrescriptionNumber(pClorld->strAxis, pnfInt));
				SetDlgItemText(IDC_CON_LEN_OD_ADD, AsPrescriptionNumber(pClorld->strAddition, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_BC, AsPrescriptionNumber(pClorld->strBC, pnfUnsignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_DIAM, AsPrescriptionNumber(pClorld->strDiameter, pnfUnsignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_CLR, pClorld->strColor);
				// (s.dhole 2012-05-18 18:15) - PLID 48968 should not import Qnt
				//SetDlgItemText(IDC_CON_LEN_OD_QTY, AsPrescriptionNumber(pClorld->strQuantity, pnfInt));

				// (j.dinatale 2013-03-20 14:20) - PLID 55766 - copy the manufacturer/brand over from an emn into the doc's instructions.
				CString strDocIns;
				if(!pClorld->strManufacturer.IsEmpty()){
					strDocIns.Format("Manufacturer: %s", pClorld->strManufacturer);
				}
				SetDlgItemText(IDC_CON_LENS_OD_DOCINSTRUCT, strDocIns);

				//TES 4/18/2012 - PLID 49746 - We've gathered all the information we need from this object, so free up its memory.
				delete pClorld;
			}
			else {
				SetDlgItemText(IDC_CON_LEN_OD_SPHERE, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOD.strSphere, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_CYL, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOD.strCylinder, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_AXIS, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOD.strAxis, pnfInt));
				SetDlgItemText(IDC_CON_LEN_OD_ADD, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOD.strAddition, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_BC, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOD.strBC, pnfUnsignedFloat));
				SetDlgItemText(IDC_CON_LEN_OD_DIAM, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOD.strDiameter, pnfUnsignedFloat));
				
				// (j.dinatale 2013-03-20 14:20) - PLID 55766 - we want the doc's ins to be blank in this case, so lets enforce that and read only since
				//		instructions are from a previous order
				SetDlgItemText(IDC_CON_LENS_OD_DOCINSTRUCT, dlg.m_oContactLensRx.clriOD.strDocIns);

				//TES 12/2/2015 - PLID 67671 - Fill the Notes field
				SetDlgItemText(IDC_CON_LENS_OD_NOTES, dlg.m_oContactLensRx.clriOD.strNote);
			}
			if(dlg.m_oContactLensRx.clriOS.pEmnInfo) {
				ContactLensOrderLensDetails *pClorld = dlg.m_oContactLensRx.clriOS.pEmnInfo;
				SetDlgItemText(IDC_CON_LEN_OS_SPHERE, AsPrescriptionNumber(pClorld->strSphere, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_CYL, AsPrescriptionNumber(pClorld->strCylinder, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_AXIS, AsPrescriptionNumber(pClorld->strAxis, pnfInt));
				SetDlgItemText(IDC_CON_LEN_OS_ADD, AsPrescriptionNumber(pClorld->strAddition, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_BC, AsPrescriptionNumber(pClorld->strBC, pnfUnsignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_DIAM, AsPrescriptionNumber(pClorld->strDiameter, pnfUnsignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_CLR, pClorld->strColor);
				// (s.dhole 2012-05-18 18:15) - PLID 48968 should not import Qnt
				//SetDlgItemText(IDC_CON_LEN_OS_QTY, AsPrescriptionNumber(pClorld->strQuantity, pnfInt));

				// (j.dinatale 2013-03-20 14:20) - PLID 55766 - copy the manufacturer/brand over from an emn into the doc's instructions.
				CString strDocIns;
				if(!pClorld->strManufacturer.IsEmpty()){
					strDocIns.Format("Manufacturer: %s", pClorld->strManufacturer);
				}
				SetDlgItemText(IDC_CON_LENS_OS_DOCINSTRUCT, strDocIns);


				//TES 4/18/2012 - PLID 49746 - We've gathered all the information we need from this object, so free up its memory.
				delete pClorld;
			}
			else {
				SetDlgItemText(IDC_CON_LEN_OS_SPHERE, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOS.strSphere, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_CYL, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOS.strCylinder, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_AXIS, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOS.strAxis, pnfInt));
				SetDlgItemText(IDC_CON_LEN_OS_ADD, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOS.strAddition, pnfSignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_BC, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOS.strBC, pnfUnsignedFloat));
				SetDlgItemText(IDC_CON_LEN_OS_DIAM, AsPrescriptionNumber(dlg.m_oContactLensRx.clriOS.strDiameter, pnfUnsignedFloat));

				// (j.dinatale 2013-03-20 14:20) - PLID 55766 - we want the doc's ins to be blank in this case, so lets enforce that and read only since
				//		instructions are from a previous order
				SetDlgItemText(IDC_CON_LENS_OS_DOCINSTRUCT, dlg.m_oContactLensRx.clriOS.strDocIns);

				//TES 12/2/2015 - PLID 67671 - Fill the Notes field
				SetDlgItemText(IDC_CON_LENS_OS_NOTES, dlg.m_oContactLensRx.clriOS.strNote);
			}
		}
	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-03-16 13:45) - PLID 48968 Add selected item to array
void CContactLensOrderForm::AddItemsToList(BOOL bIsOD, BOOL bIsOS,
										  NXDATALIST2Lib::IRowSettingsPtr pdlSelectedServiceList,
										  GlassesOrderServiceType nType, double nQty, BOOL bIsProduct, 
										  BOOL bIsDefault, BOOL bIsOffTheShelf)
{
	if (pdlSelectedServiceList)
	{
		LenseServiceInfo ServiceInfo;
		ServiceInfo.nRowID = -1;
		ServiceInfo.nID = -1;

		// (j.dinatale 2013-02-28 10:08) - PLID 55359 - need to add ins code to the code column if its some form of product
		// (z.manning 2013-05-29 09:25) - PLID 56891 - Many places in this function were not using the correct column when
		// this function is called after selecting an item from the contact lens dropdown so I fixed that.
		short nIDCol = clscID;
		short nPriceCol = clscPrice;
		short nCostCol = clscCost;
		short nNameCol = clscDescription;
		if (!bIsProduct) {
			ServiceInfo.strCode = VarString(pdlSelectedServiceList->GetValue(clscCode), "");
			nIDCol = clscID;
			nPriceCol = clscPrice;
			nCostCol = clscCost;
			nNameCol = clscDescription;
		}
		else
		{
			if(nType == gostContactLens){
				ServiceInfo.strCode = VarString(pdlSelectedServiceList->GetValue(ConLensProductRxDD::InsCode), "");
				nIDCol = ConLensProductRxDD::ID;
				nPriceCol = ConLensProductRxDD::Fee;
				nCostCol = ConLensProductRxDD::Cost;
				nNameCol = ConLensProductRxDD::Name;
			}
			else {
				if(nType == gostOther){
					ServiceInfo.strCode = VarString(pdlSelectedServiceList->GetValue(clpcInsCode), "");
					nIDCol = clpcID;
					nPriceCol = clpcPrice;
					nCostCol = clpcCost;
					nNameCol = clpcDescription;
				}
				else{
					// nothing
				}
			}
		}

		ServiceInfo.nServiceID = pdlSelectedServiceList->GetValue(nIDCol);
		ServiceInfo.strDescription = pdlSelectedServiceList->GetValue(nNameCol);
		ServiceInfo.nQty = (double)nQty;
		ServiceInfo.nType = nType; 
		ServiceInfo.Cost = pdlSelectedServiceList->GetValue(nCostCol);
		ServiceInfo.bIsOD = bIsOD;
		ServiceInfo.bIsOS = bIsOS;
		ServiceInfo.bIsDefault = bIsDefault;
		ServiceInfo.bIsOffTheShelf = bIsOffTheShelf;
		ServiceInfo.bIsDelete = FALSE;
		// (s.dhole 2012-04-05 09:13) - PLID 49447  Discount changes
		COleCurrency cyPrice = VarCurrency(pdlSelectedServiceList->GetValue(nPriceCol), COleCurrency(0,0));
		ServiceInfo.Price = cyPrice;
		ServiceInfo.TotalAmount = cyPrice;
		ServiceInfo.LineTotal = cyPrice * ServiceInfo.nQty;
		ServiceInfo.Discount = COleCurrency(0,0); 
		ServiceInfo.VisionResp = COleCurrency(0,0);
		ServiceInfo.PatientResp = cyPrice;
		// (s.dhole 2012-04-23 14:02) - PLID 48970 
		ServiceInfo.SavedCost = COleCurrency(0,0);
		ServiceInfo.SavedPrice = COleCurrency(0,0);
		ServiceInfo.nSavedQty = (double)0; 
		ServiceInfo.nSavedServiceID = -1;  
		ServiceInfo.bIsOffTheShelfSaved = FALSE;
		ServiceInfo.PatientResp = COleCurrency(0,0);
		ServiceInfo.VisionResp = COleCurrency(0,0);
		ServiceInfo.DiscountList = new DiscountList;
		m_arLensContactServiceInfo.Add(ServiceInfo);  
	}
}


// (s.dhole 2012-03-16 13:45) - PLID 48968 Refresh Selected item list
void CContactLensOrderForm::RefreshCLServiceList()
{
	try{
		RemoveDeletedRowFromServiceList();
		IRowSettingsPtr pRow;
		// (s.dhole 2012-04-23 17:00) - PLID 49923
		COleCurrency cyTotal(0,0),cyVisionTotal (0,0),cyPatientTotal (0,0); 
		for(int nCount= 0 ; nCount <m_arLensContactServiceInfo.GetSize() ;  nCount++  )
		{
			BOOL bIsNewRow=FALSE;
			pRow = m_pdlSelectedServiceList->FindByColumn(ssclRowID , (long)m_arLensContactServiceInfo[nCount].nRowID  , NULL, g_cvarFalse);
			if (pRow ){
				if (m_arLensContactServiceInfo[nCount].bIsDelete == TRUE){
					m_pdlSelectedServiceList->RemoveRow(pRow);
				}
			}
			else	{
				bIsNewRow=TRUE;
				pRow = m_pdlSelectedServiceList->GetNewRow();
			}
			if (m_arLensContactServiceInfo[nCount].bIsDelete == FALSE){
				long nRow = VarLong( m_arLensContactServiceInfo[nCount].nRowID, -1);
				if (VarLong( m_arLensContactServiceInfo[nCount].nRowID, -1)==-1  ){
					m_nRowID +=1;
					m_arLensContactServiceInfo[nCount].nRowID =(long)m_nRowID ;
				}
				pRow->PutValue(ssclRowID  , m_arLensContactServiceInfo[nCount].nRowID  );
				pRow->PutValue(ssclID , (long)m_arLensContactServiceInfo[nCount].nID  );
				pRow->PutValue(ssclServiceID , (long)m_arLensContactServiceInfo[nCount].nServiceID    );
				pRow->PutValue(ssclCode , _bstr_t(m_arLensContactServiceInfo[nCount].strCode ));
				_variant_t vt =  pRow->GetValue(ssclCode );
				pRow->PutValue(ssclDescription ,_bstr_t( m_arLensContactServiceInfo[nCount].strDescription  )  );
				pRow->PutValue(ssclPrice, _variant_t(m_arLensContactServiceInfo[nCount].Price  ) );
				pRow->PutValue(ssclQty, (double)m_arLensContactServiceInfo[nCount].nQty   );
				pRow->PutValue(ssclType,_variant_t( m_arLensContactServiceInfo[nCount].nType )   );
				pRow->PutValue(ssclCost,_variant_t( m_arLensContactServiceInfo[nCount].Cost));
				pRow->PutValue(ssclIsOD,(BOOL)m_arLensContactServiceInfo[nCount].bIsOD  );
				pRow->PutValue(ssclIsOS,(BOOL)m_arLensContactServiceInfo[nCount].bIsOS );
				pRow->PutValue(ssclIsDefaultProduct ,(BOOL)m_arLensContactServiceInfo[nCount].bIsDefault );
				pRow->PutValue(ssclIsOffTheShelf,(BOOL)m_arLensContactServiceInfo[nCount].bIsOffTheShelf  );
				// (s.dhole 2012-04-05 09:08) - PLID 49447 Calculate discount 
   				COleCurrency cyTotalDollarDiscount(0,0), cyTotalLineDiscount(0,0);
				m_arLensContactServiceInfo[nCount].TotalAmount = m_arLensContactServiceInfo[nCount].nQty * m_arLensContactServiceInfo[nCount].Price ;
				COleCurrency cyCurrentTotal = m_arLensContactServiceInfo[nCount].TotalAmount;  
				long nPercentOff = 0;
				//check the discount count list is not null
				if (m_arLensContactServiceInfo[nCount].DiscountList) {
					for (int i = 0; i < m_arLensContactServiceInfo[nCount].DiscountList->aryDiscounts.GetCount(); i++) {
						stDiscount disc = m_arLensContactServiceInfo[nCount].DiscountList->aryDiscounts[i];
						if (disc.Discount.vt == VT_CY) {
							cyTotalDollarDiscount += disc.Discount.cyVal;
						}
						else{
						// Nothing
						}
						if (disc.PercentOff.vt == VT_I4) {
							nPercentOff += disc.PercentOff.lVal;
						}
						else{
						// Nothing
						}
					}
				}
				else
				{
				// Nothing
				}
				//calculate the total line discount	
				COleCurrency cyTemp = COleCurrency(0,0);
				//first the practice total
				cyTemp = cyCurrentTotal;
				cyCurrentTotal= (cyCurrentTotal * (100000 - nPercentOff * 1000));
				cyCurrentTotal/= 100000;
				cyTotalLineDiscount = cyTemp - cyCurrentTotal;
				cyTotalLineDiscount += cyTotalDollarDiscount;
				cyCurrentTotal-= cyTotalDollarDiscount;
				m_arLensContactServiceInfo[nCount].Discount =cyTotalLineDiscount; 
				m_arLensContactServiceInfo[nCount].LineTotal =cyCurrentTotal;

				COleCurrency cyPrice  = m_arLensContactServiceInfo[nCount].LineTotal ;
				// (s.dhole 2012-04-16 12:59) - PLID 49890
				if (m_bIsvisionPlanExist==TRUE){
					m_arLensContactServiceInfo[nCount].PatientResp =  (cyPrice - m_arLensContactServiceInfo[nCount].VisionResp) ;
				}
				else{
					// (s.dhole 2012-04-23 11:08) - PLID 49890 if vision pan is not exist thane visionRes should be zero
					m_arLensContactServiceInfo[nCount].VisionResp =  COleCurrency(0,0);
					m_arLensContactServiceInfo[nCount].PatientResp =  cyPrice ;
				}

				pRow->PutValue(ssclTotal,_variant_t(m_arLensContactServiceInfo[nCount].LineTotal));
				pRow->PutValue(ssclDiscount  ,_variant_t(m_arLensContactServiceInfo[nCount].Discount));
				pRow->PutValue(ssclVisionResp ,_variant_t(m_arLensContactServiceInfo[nCount].VisionResp));
				pRow->PutValue(ssclPatientResp  ,_variant_t(m_arLensContactServiceInfo[nCount].PatientResp));
				// (s.dhole 2012-04-23 17:00) - PLID 49923 Add total now 
				cyVisionTotal +=m_arLensContactServiceInfo[nCount].VisionResp ;
				cyPatientTotal +=m_arLensContactServiceInfo[nCount].PatientResp ;
				cyTotal += m_arLensContactServiceInfo[nCount].LineTotal;
				// (s.dhole 2012-04-16 11:22) - PLID 49728 if flag is not set then load regular else try to format special column  
				if (m_bIsBilled != TRUE){
					if (m_arLensContactServiceInfo[nCount].bIsDefault){
						pRow->ForeColor=RGB(0,0,255);
					}
					else{
						pRow->ForeColor = RGB(0,0,0);
					}
				}
				else{
					if (m_arLensContactServiceInfo[nCount].bIsDefault){
							pRow->ForeColor=RGB(135,206,250);  
							pRow->CellForeColor[ssclCost] = RGB(0,0,255);
						}
						else{
							pRow->ForeColor=RGB(205,205,193);  
							pRow->CellForeColor[ssclCost]= RGB(0,0,0);
						}
				}
				if (bIsNewRow){
					m_pdlSelectedServiceList->AddRowSorted(pRow, NULL);
				}
			}
		}
		// (s.dhole 2012-04-05 09:08) - PLID 49923  show Calculated total
		SetDlgItemText(IDC_CON_LENS_VISION_RESP_AMOUNT,FormatCurrencyForInterface(cyVisionTotal)  ) ;
		SetDlgItemText(IDC_CON_LENS_PATIENT_RESP_AMOUNT,FormatCurrencyForInterface(cyPatientTotal)  ) ;
		SetDlgItemText(IDC_CON_LENS_TOTAL_AMOUNT,FormatCurrencyForInterface(cyTotal )  ) ;

	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-03-16 13:45) - PLID 48968 remove all deleted ite if those does not hav glasses order id
void CContactLensOrderForm::RemoveDeletedRowFromServiceList ()
{
	for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
		if (m_arLensContactServiceInfo[nCnt].bIsDelete==TRUE 
			&& m_arLensContactServiceInfo[nCnt].nID ==-1){
			IRowSettingsPtr pServiceRow = m_pdlSelectedServiceList->FindByColumn(ssclRowID,  (long)m_arLensContactServiceInfo[nCnt].nRowID , NULL, g_cvarFalse);
			if (pServiceRow ){
				m_pdlSelectedServiceList->RemoveRow(pServiceRow ) ;
			}
			m_arLensContactServiceInfo.RemoveAt (nCnt);
			RemoveDeletedRowFromServiceList ();
			break;
		}
		else if (m_arLensContactServiceInfo[nCnt].bIsDelete==TRUE && m_arLensContactServiceInfo[nCnt].nID !=-1) {
			IRowSettingsPtr pServiceRow = m_pdlSelectedServiceList->FindByColumn(ssclRowID,  (long)m_arLensContactServiceInfo[nCnt].nRowID , NULL, g_cvarFalse);
			if (pServiceRow ){
				m_pdlSelectedServiceList->RemoveRow(pServiceRow ) ;
			}
			break;
		}
	}
}

// (s.dhole 2012-03-16 17:29) - PLID   48596
void CContactLensOrderForm::OnBnClickedChkConLensOsToBeOrdered()
{
	try 
	{
		// (j.dinatale 2013-02-11 10:41) - PLID 55093 - changed how we keep track of sold off shelf
		m_bSoldOffShelfManualLastValOS = !!IsDlgButtonChecked(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED);
		m_bSoldOffShelfManualSetOS = true;

		SelChosenConLensOsProduct(m_pdlOSProdList->CurSel  );

	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-16 17:29) - PLID   48596
void CContactLensOrderForm::OnBnClickedChkConLensOdToBeOrdered()
{
	try 
	{
		// (j.dinatale 2013-02-11 10:41) - PLID 55093 - changed how we keep track of sold off shelf
		m_bSoldOffShelfManualLastValOD = !!IsDlgButtonChecked(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED);
		m_bSoldOffShelfManualSetOD = true;

		SelChosenConLensOdProduct(m_pdlODProdList->CurSel  );
	
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2013-05-02 15:35) - PLID 56530 - rewrote this entire function
void CContactLensOrderForm::UpdateContactLensProductQnt( )
{
	try {
		CString strOD,strOS;
		GetDlgItemText(IDC_CON_LEN_OD_QTY,strOD);
		GetDlgItemText(IDC_CON_LEN_OS_QTY,strOS) ;

		long nOSQty = atol(strOS);
		long nODQty = atol(strOD);

		BOOL bODIsBillable = FALSE;
		BOOL bOSIsBillable = FALSE;
		BOOL bODIsTrackable = FALSE;
		BOOL bOSIsTrackable = FALSE;

		// if we have anything left over after it is all said and done, we need to add it to our list
		NXDATALIST2Lib::IRowSettingsPtr pODRow = m_pdlODProdList->CurSel;
		long nODProductID = -1;
		if(pODRow){
			nODProductID = VarLong(pODRow->GetValue(ConLensProductRxDD::ID), -1);
		}

		NXDATALIST2Lib::IRowSettingsPtr pOSRow = m_pdlOSProdList->CurSel;
		long nOSProductID = -1;
		if(pOSRow){
			nOSProductID = VarLong(pOSRow->GetValue(ConLensProductRxDD::ID), -1);
		}

		CheckProductBillable(nODProductID, m_nLocationID, bODIsBillable, bODIsTrackable);
		CheckProductBillable(nOSProductID, m_nLocationID, bOSIsBillable, bOSIsTrackable);

		ConfigureODTrackable(bODIsTrackable);
		ConfigureOSTrackable(bOSIsTrackable);

		// loop through our items
		for(int nCnt = 0; nCnt < m_arLensContactServiceInfo.GetSize(); nCnt++){
			if(!m_arLensContactServiceInfo[nCnt].bIsDefault){
				// not a default/spawned item, continue
				continue;
			}

			// if this is for the left lens, and our product ID matches...
			if(bODIsBillable && m_arLensContactServiceInfo[nCnt].bIsOD && m_arLensContactServiceInfo[nCnt].nServiceID == nODProductID && nODQty > 0){
				m_arLensContactServiceInfo[nCnt].bIsDelete = FALSE;
				if(m_bIncreaseItemToBillQty){
					m_arLensContactServiceInfo[nCnt].nQty = (double)nODQty;
					nODQty = 0;
				} else {
					m_arLensContactServiceInfo[nCnt].nQty = 1.0f;
					nODQty--;
				}
			} else {
				if (bOSIsBillable && m_arLensContactServiceInfo[nCnt].bIsOS && m_arLensContactServiceInfo[nCnt].nServiceID == nOSProductID && nOSQty > 0){
					m_arLensContactServiceInfo[nCnt].bIsDelete = FALSE;
					if(m_bIncreaseItemToBillQty){
						m_arLensContactServiceInfo[nCnt].nQty = (double)nOSQty;
						nOSQty = 0;
					} else {
						m_arLensContactServiceInfo[nCnt].nQty = 1.0f;
						nOSQty--;
					}
				} else {
					m_arLensContactServiceInfo[nCnt].bIsDelete = TRUE;
				}
			}
		}

		if (nODQty > 0 && nODProductID > 0 && bODIsBillable){
			BOOL bOffTheShelf = FALSE;
			if(IsDlgButtonChecked(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)){
				bOffTheShelf = TRUE;
			}

			if(m_bIncreaseItemToBillQty){
				// at this point, it didnt exist and we want to have a line item for the entire quantity
				AddItemsToList(TRUE, FALSE, pODRow, gostContactLens, (double)nODQty, TRUE, TRUE, bOffTheShelf);
				nODQty = 0;
			}else{
				// otherwise, we want single line items for each row
				for(nODQty; nODQty > 0; nODQty--){
					AddItemsToList(TRUE, FALSE, pODRow, gostContactLens, 1.0f, TRUE, TRUE, bOffTheShelf);
				}
			}
		}

		// ensure that either we had 0 quantity left over or didnt have a valid product to increase the quantity of
		ASSERT(!nODQty || nODProductID <= 0 || !bODIsBillable);

		if (nOSQty > 0 && nOSProductID > 0 && bOSIsBillable){
			BOOL bOffTheShelf = FALSE;
			if(IsDlgButtonChecked(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)){
				bOffTheShelf = TRUE;
			}

			if(m_bIncreaseItemToBillQty){
				// at this point, it didnt exist and we want to have a line item for the entire quantity
				AddItemsToList(FALSE, TRUE, pOSRow, gostContactLens, (double)nOSQty, TRUE, TRUE, bOffTheShelf);
				nOSQty = 0;
			}else{
				// otherwise, we want single line items for each row
				for(nOSQty; nOSQty > 0; nOSQty--){
					AddItemsToList(FALSE, TRUE, pOSRow, gostContactLens, 1.0f, TRUE, TRUE, bOffTheShelf);
				}
			}
		}

		// ensure that either we had 0 quantity left over or didnt have a valid product to increase the quantity of
		ASSERT(!nOSQty || nOSProductID <= 0 || !bOSIsBillable);
	}NxCatchAll(__FUNCTION__);
}



BEGIN_EVENTSINK_MAP(CContactLensOrderForm, CNxDialog)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_SERVICE_CODES, 6, CContactLensOrderForm::RButtonDownConLensServiceCodes, VTS_DISPATCH VTS_I2 VTS_I4 VTS_I4 VTS_I4)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_SERVICE_CODES, 8, CContactLensOrderForm::EditingStartingConLensServiceCodes, VTS_DISPATCH VTS_I2 VTS_PVARIANT VTS_PBOOL)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_SERVICES, 16, CContactLensOrderForm::SelChosenConLensServices, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_PRODUCTS, 16, CContactLensOrderForm::SelChosenConLensProducts, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_SERVICE_CODES, 10, CContactLensOrderForm::EditingFinishedConLensServiceCodes, VTS_DISPATCH VTS_I2 VTS_VARIANT VTS_VARIANT VTS_BOOL)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_OD_PRODUCT, 16, CContactLensOrderForm::SelChosenConLensOdProduct, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_OS_PRODUCT, 16, CContactLensOrderForm::SelChosenConLensOsProduct, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_LOCATION, 16, CContactLensOrderForm::SelChosenConLensLocation, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_PROVIDER, 16, CContactLensOrderForm::OnSelChosenProviderList, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_SUPPLIER, 16, CContactLensOrderForm::OnSelChosenSupplierList, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_EXAM_DATE, 1, CContactLensOrderForm::KillFocusConLensExamDate, VTS_NONE)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_PAT_LIST, 16, CContactLensOrderForm::OnSelChosenConLenPatient, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_SERVICE_CODES, 19, CContactLensOrderForm::LeftClickConLensServices, VTS_DISPATCH VTS_I2 VTS_I4 VTS_I4 VTS_I4)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_OD_PRODUCT, 18, CContactLensOrderForm::OnRequeryFinishedConLensOdProduct, VTS_I2)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_OS_PRODUCT, 18, CContactLensOrderForm::OnRequeryFinishedConLensOsProduct, VTS_I2)
	
	ON_EVENT(CContactLensOrderForm, IDC_CON_LEN_OPTICIAN, 16, CContactLensOrderForm::SelChosenConLenOptician, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_VISION_PLANS, 18, CContactLensOrderForm::OnRequeryFinishedCLVisionPlans, VTS_I2)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_VISION_PLANS , 16, CContactLensOrderForm::OnSelChosenCLVisionPlan, VTS_DISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_VISION_PLANS , 1, CContactLensOrderForm::SelChangingCLVisionPlan, VTS_DISPATCH VTS_PDISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_OD_PRODUCT, 1, CContactLensOrderForm::SelChangingConLensOdProduct, VTS_DISPATCH VTS_PDISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_OS_PRODUCT, 1, CContactLensOrderForm::SelChangingConLensOsProduct, VTS_DISPATCH VTS_PDISPATCH)
	ON_EVENT(CContactLensOrderForm, IDC_CON_LENS_LOCATION, 1, CContactLensOrderForm::SelChangingConLensLocation, VTS_DISPATCH VTS_PDISPATCH)
END_EVENTSINK_MAP()

// (s.dhole 2012-03-16 17:29) - PLID  48968 load poup menu to delete selected item from list
void CContactLensOrderForm::RButtonDownConLensServiceCodes(LPDISPATCH lpRow, short nCol, long x, long y, long nFlags)
{
	try {
		enum GlassesOrderServicesMenuOptions {
		gosmoDelete = 1,
		};
		// (s.dhole 2012-04-16 11:22) - PLID 49893 Billed order does not allow user to delete any line charges
		if (m_bIsBilled!=FALSE) 
			return;

		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}
		// select row
		m_pdlSelectedServiceList->CurSel = pRow;
		// (s.dhole 2012-03-19 12:32) - PLID 48971 if this is default product(OS or OD Product) the do not allow to delete 
		if (pRow){	
			BOOL bIsDefault= (BOOL)pRow->GetValue(ssclIsDefaultProduct );
			if (bIsDefault){
				return;
			}
		}

		CMenu mnuPopup;
		mnuPopup.CreatePopupMenu();
		mnuPopup.AppendMenu(MF_ENABLED, gosmoDelete, "Delete");
		CPoint ptScreen, ptClient;
		GetCursorPos(&ptScreen);
		ptClient = ptScreen;
		ScreenToClient(&ptClient);
		//Remove code from list
		switch(mnuPopup.TrackPopupMenu(TPM_LEFTALIGN|TPM_RIGHTBUTTON|TPM_LEFTBUTTON|TPM_RETURNCMD, ptScreen.x, ptScreen.y, this)) {
			case gosmoDelete:
				for(int i=0 ;  i< m_arLensContactServiceInfo.GetCount(); i++)
				{
				if (m_arLensContactServiceInfo[i].nRowID ==  VarLong(  pRow->GetValue(ssclRowID),-1)) 
					{
					// mark item as delete
					m_arLensContactServiceInfo[i].bIsDelete  = TRUE;
					break ;
					}
				}
				RefreshCLServiceList(); 
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-19 12:32) - PLID 48971 do not allow to edit Qtn if row is link to OS and od product
void CContactLensOrderForm::EditingStartingConLensServiceCodes(LPDISPATCH lpRow, short nCol, VARIANT* pvarValue, BOOL* pbContinue)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if (pRow)
		{
			BOOL bIsDefault= (BOOL)pRow->GetValue(ssclIsDefaultProduct );
			// default item such as product quntity can be chage from Quntity text box not from grid
			// (s.dhole 2012-04-16 11:22) - PLID 49893 Allow to change only non link billed item Qnt
			if ( bIsDefault  && ssclQty ==nCol && m_bIsBilled==FALSE) { 
				*pbContinue = FALSE;
			}
		}
	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-03-16 17:29) - PLID   48968
void CContactLensOrderForm::SelChosenConLensServices(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}

		long nServiceID =VarLong( pRow->GetValue(clscID),-1) ;
		BOOL bExist = FALSE;

		// (j.dinatale 2013-05-02 15:35) - PLID 56530 - only loop through our list if we are interested in increasing the quantity of something
		if(m_bIncreaseItemToBillQty){
			if (nServiceID > -1){
				// Check if Service code exist and not link to any items
				for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
					if (m_arLensContactServiceInfo[nCnt].nServiceID  ==nServiceID  
						&& m_arLensContactServiceInfo[nCnt].bIsDefault==FALSE ){
							// if it is from deleted item then just roll back changes
							if (m_arLensContactServiceInfo[nCnt].bIsDelete ==FALSE) {
								// if product exist in current list than append Qnt
								m_arLensContactServiceInfo[nCnt].nQty +=1;
							}
							else {
								//Show last value
							}
							m_arLensContactServiceInfo[nCnt].bIsDelete  =FALSE;
							bExist = TRUE;
							break;
					}
				}
			}
		}

		if (bExist == FALSE && nServiceID > -1) {
			AddItemsToList(FALSE,FALSE,pRow,gostOther ) ;
		}

		RefreshCLServiceList(); 
		m_pdlServiceList->CurSel = NULL;
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-16 17:29) - PLID  48968
void CContactLensOrderForm::SelChosenConLensProducts(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}

		long nServiceID =VarLong(pRow->GetValue(clpcID),-1) ;
		BOOL bExist = FALSE;
		// (j.dinatale 2013-05-02 15:35) - PLID 56530 - only loop through our list if we are interested in increasing the quantity of something
		if(m_bIncreaseItemToBillQty){
			if (nServiceID > -1){
				// Check if Service code exist and not link to any items
				for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
					if (m_arLensContactServiceInfo[nCnt].nServiceID  ==nServiceID  
						&& m_arLensContactServiceInfo[nCnt].bIsDefault==FALSE ){
							// if it is from deleted item then just roll back changes
							if (m_arLensContactServiceInfo[nCnt].bIsDelete ==FALSE){
								// if line item is exist in current list than append Qnt
								m_arLensContactServiceInfo[nCnt].nQty +=1;
							}
							else {
								//Show last value
							}

							m_arLensContactServiceInfo[nCnt].bIsDelete  =FALSE;
							bExist = TRUE;
							break;
					}
				}
			}
		}

		if (bExist == FALSE && nServiceID > -1) {
			AddItemsToList(FALSE,FALSE,pRow, gostOther,1,TRUE) ;
		}

		RefreshCLServiceList(); 	
		m_pdlProductList->CurSel = NULL;
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-16 17:29) - PLID  48968
void CContactLensOrderForm::EditingFinishedConLensServiceCodes(LPDISPATCH lpRow, short nCol, const VARIANT& varOldValue, const VARIANT& varNewValue, BOOL bCommit)
{
	try {

		if(nCol == ssclType || nCol == ssclQty || nCol == ssclPrice || ssclQty || ssclVisionResp ) {
			IRowSettingsPtr pRow(lpRow);
			long nRowID = VarLong(  pRow->GetValue(ssclRowID),-1); 
			if (nRowID !=-1)
			{
				for(int i=0 ;  i< m_arLensContactServiceInfo.GetSize(); i++  )
				{
					if (m_arLensContactServiceInfo[i].nRowID == nRowID)
					{
						if (nCol == ssclType){
							m_arLensContactServiceInfo[i].nType  =  0;
						}
						else if (nCol == ssclQty ){
							m_arLensContactServiceInfo[i].nQty  =  VarDouble(  varNewValue,1);
							RefreshCLServiceList();
						}
						else if (nCol == ssclPrice){
							m_arLensContactServiceInfo[i].Price  =  VarCurrency (  varNewValue);
							RefreshCLServiceList(); 
						}
						else if (nCol == ssclCost ){
							m_arLensContactServiceInfo[i].Cost  =  VarCurrency (  varNewValue);
						}
						//// (s.dhole 2012-03-28 12:22) - PLID 49447
						//else if (nCol == ssclDiscount  ){
						//		m_arLensContactServiceInfo[i].Discount  =  VarCurrency (  varNewValue);
						//		RefreshCLServiceList();
						//}
						// (s.dhole 2012-03-28 12:22) - PLID 49923
						else if (nCol == ssclVisionResp  ){
							m_arLensContactServiceInfo[i].VisionResp =  VarCurrency (  varNewValue);
							RefreshCLServiceList();
						}
						else
						{
							// nothing
						}
					}
				}
			}
		}
	}NxCatchAll(__FUNCTION__);
}



// (s.dhole 2012-03-19 12:32) - PLID 48971
void CContactLensOrderForm::SelChosenConLensOdProduct(LPDISPATCH lpRow)
{
	try {
			IRowSettingsPtr pRow(lpRow);
			if (!pRow){
				EnableDlgItem(IDC_CON_LEN_OD_QTY, FALSE);
				return;
			}

			long nProductID = VarLong(  pRow->GetValue(ConLensProductRxDD::ID),-1);  	
			CString str;
			if (nProductID >0){
				EnableDlgItem(IDC_CON_LEN_OD_QTY, TRUE);
				GetDlgItemText(IDC_CON_LEN_OD_QTY,str) ;
				if (str.IsEmpty() || str.CollateNoCase("0")==0){
					str = "1";
					SetDlgItemText(IDC_CON_LEN_OD_QTY,str) ;
				}
			//	EnableDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, TRUE);
			}
			else{
				EnableDlgItem(IDC_CON_LEN_OD_QTY, FALSE);
				SetDlgItemText(IDC_CON_LEN_OD_QTY,"") ;
			//	EnableDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, FALSE);
				SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED,  FALSE)  ;
			}
			BOOL bOffTheShelf=FALSE;
			
			long nLocationID= -1;
			IRowSettingsPtr pRowLocation =  m_pdlLocationList->CurSel;
			if ( pRowLocation ){
				nLocationID=VarLong (pRowLocation->GetValue(ConLensOrderLocList::ID),-1);
			}
			// (s.dhole 2012-05-17 16:33) - PLID 50479
			BOOL bIsTrackableStatus = FALSE;
			BOOL bIsBillable=FALSE;
			CheckProductBillable(nProductID,nLocationID, bIsBillable,bIsTrackableStatus);
			ConfigureODTrackable(bIsTrackableStatus);	// (j.dinatale 2013-05-03 09:14) - PLID 56530 - utility function to set trackable
			
			if (m_nRightProdID !=nProductID || nLocationID != m_nLocationID){
				// (b.spivey, February 26, 2013) - PLID 55331 - moved this code to mimic the OS selcode. 
				// if this product from the shelf
				if  (IsDlgButtonChecked(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)){
					bOffTheShelf = TRUE;
				}

				// (j.dinatale 2013-05-02 15:35) - PLID 56530 - consolidated logic
				HandleProductQuantity(false, nProductID, atol(str), bOffTheShelf, bIsBillable, pRow);
				RefreshCLServiceList(); 
				
			}
			else{
				// (s.dhole 2012-05-24 09:24) - PLID  50479 should update array
				for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
					if (m_arLensContactServiceInfo[nCnt].nServiceID ==nProductID   
							&& m_arLensContactServiceInfo[nCnt].bIsDefault==TRUE
							&& m_arLensContactServiceInfo[nCnt].bIsOD ==  TRUE  ){
							if  (IsDlgButtonChecked(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)){
								m_arLensContactServiceInfo[nCnt].bIsOffTheShelf = TRUE;
							}
							else{
								m_arLensContactServiceInfo[nCnt].bIsOffTheShelf = FALSE;
							}
							break;
					}
				}
			}
			m_nRightProdID =  nProductID;
	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2012-03-19 12:32) - PLID 48971
void CContactLensOrderForm::SelChosenConLensOsProduct(LPDISPATCH lpRow)
{
	try {	
			IRowSettingsPtr pRow(lpRow);
			
			if (!pRow){
				EnableDlgItem(IDC_CON_LEN_OS_QTY, FALSE);
				return;
			}
		
			BOOL bOffTheShelf=FALSE;
			long nProductID = VarLong(  pRow->GetValue(ConLensProductRxDD::ID),-1);  	
			CString str;
			if (nProductID >0){
				EnableDlgItem(IDC_CON_LEN_OS_QTY, TRUE);
				GetDlgItemText(IDC_CON_LEN_OS_QTY,str) ;
				if (str.IsEmpty() || str.CollateNoCase("0")==0){
					str = "1";
					SetDlgItemText(IDC_CON_LEN_OS_QTY,str) ;
				}
			//	EnableDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, TRUE);
			}
			else{
				EnableDlgItem(IDC_CON_LEN_OS_QTY, FALSE);
				SetDlgItemText(IDC_CON_LEN_OS_QTY,"") ;
			//	EnableDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, FALSE);
				SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED,  FALSE)  ;
			}
			long nLocationID= -1;
			IRowSettingsPtr pRowLocation =  m_pdlLocationList->CurSel;
			if ( pRowLocation ){
				nLocationID=VarLong (pRowLocation->GetValue(ConLensOrderLocList::ID),-1);
			}
			// (s.dhole 2012-05-17 16:33) - PLID 50479
			BOOL bIsTrackableStatus = FALSE;
			BOOL bIsBillable=FALSE;

			CheckProductBillable(nProductID,nLocationID, bIsBillable,bIsTrackableStatus);
			ConfigureOSTrackable(bIsTrackableStatus);	// (j.dinatale 2013-05-03 09:14) - PLID 56530 - utility function to set trackable

			if (m_nLeftProdID !=nProductID || nLocationID != m_nLocationID){
				
				if (IsDlgButtonChecked(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)){
					bOffTheShelf =TRUE;
				}

				// (j.dinatale 2013-05-02 15:35) - PLID 56530 - consolidated logic
				HandleProductQuantity(true, nProductID, atol(str), bOffTheShelf, bIsBillable, pRow);
				RefreshCLServiceList(); 
			}
			else
			{
				// (s.dhole 2012-05-24 09:24) - PLID  50479 should update array
				for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
					if (m_arLensContactServiceInfo[nCnt].nServiceID ==nProductID   
						&& m_arLensContactServiceInfo[nCnt].bIsDefault==TRUE
						&& m_arLensContactServiceInfo[nCnt].bIsOS ==  TRUE  ){
							if  (IsDlgButtonChecked(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)){
								m_arLensContactServiceInfo[nCnt].bIsOffTheShelf = TRUE;
							}
							else{
								m_arLensContactServiceInfo[nCnt].bIsOffTheShelf = FALSE;
							}
							break;
					}
				}
			}
			m_nLeftProdID =  nProductID;
				
	}NxCatchAll(__FUNCTION__);
} 
// (s.dhole 2012-03-16 17:29) - PLID   48970 Load all service/product list items
void CContactLensOrderForm::LoadServiceList()
{
	try{
		m_arLensContactServiceInfo.RemoveAll();
		m_pdlSelectedServiceList->Clear(); 

		// (j.dinatale 2013-02-28 09:30) - PLID 55359 - need to keep track of if service items are products and what the ins code is
		_RecordsetPtr rsSelectedServicCode = CreateParamRecordset(" SELECT GlassesOrderServiceT.ID, GlassesOrderServiceT.GlassesOrderID, GlassesOrderServiceT.ServiceID, GlassesOrderServiceT.Price,  "
		" GlassesOrderServiceT.Quantity, GlassesOrderServiceT.Type, GlassesOrderServiceT.OpticalLineItemCost,"
		" GlassesOrderServiceT.bODEye , GlassesOrderServiceT.bOSEye ,GlassesOrderServiceT.IsDefaultProduct,GlassesOrderServiceT.IsOffTheShelf,CPTCodeT.Code, ServiceT.Name,"
		" GlassesOrderServiceT.PatientRespAmt ,GlassesOrderServiceT.VisionRespAmt, ProductT.InsCode, "  
		" CASE WHEN ProductT.ID IS NOT NULL THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS IsProduct "
		" FROM  GlassesOrderServiceT INNER JOIN "
		" ServiceT ON GlassesOrderServiceT.ServiceID = ServiceT.ID LEFT OUTER JOIN "
		" CPTCodeT ON ServiceT.ID = CPTCodeT.ID LEFT OUTER JOIN "
		" ProductT ON ServiceT.ID = ProductT.ID "
		" WHERE GlassesOrderServiceT.GlassesOrderID = {INT} " 
		, m_nOrderID );
			while(!rsSelectedServicCode ->eof) {
				LenseServiceInfo ServiceInfo;
				ServiceInfo.nRowID = -1;
				ServiceInfo.nID = AdoFldLong(rsSelectedServicCode,"ID"); 
				ServiceInfo.nServiceID  = AdoFldLong(rsSelectedServicCode,"ServiceID"); 
				ServiceInfo.nType = AdoFldLong  (rsSelectedServicCode,"Type" );
				// (j.dinatale 2013-02-28 09:27) - PLID 55359 - need to keep track of the insurance code for products
				if(AdoFldBool(rsSelectedServicCode, "IsProduct", FALSE)){
					ServiceInfo.strCode = AdoFldString  (rsSelectedServicCode,"InsCode" ,"");
				}else{
					ServiceInfo.strCode = AdoFldString  (rsSelectedServicCode,"Code" ,"");
				}
				ServiceInfo.strDescription  = AdoFldString  (rsSelectedServicCode,"Name" ,"");
				ServiceInfo.Cost = AdoFldCurrency(rsSelectedServicCode,"OpticalLineItemCost", COleCurrency(0,0) ); 
				ServiceInfo.Price = AdoFldCurrency(rsSelectedServicCode,"Price", COleCurrency(0,0) ); 
				ServiceInfo.nQty = AdoFldDouble (rsSelectedServicCode,"Quantity", 1 ); 
				ServiceInfo.bIsOD  = AdoFldBool(rsSelectedServicCode,"bODEye",FALSE);
				ServiceInfo.bIsOS= AdoFldBool(rsSelectedServicCode,"bOSEye",FALSE);
				ServiceInfo.bIsDefault   = AdoFldBool(rsSelectedServicCode,"IsDefaultProduct",FALSE);
				ServiceInfo.bIsOffTheShelf = AdoFldBool(rsSelectedServicCode,"IsOffTheShelf",FALSE);
				ServiceInfo.PatientResp = AdoFldCurrency(rsSelectedServicCode,"PatientRespAmt", COleCurrency(0,0) ); 
				ServiceInfo.VisionResp= AdoFldCurrency(rsSelectedServicCode,"VisionRespAmt", COleCurrency(0,0) ); 
				// (s.dhole 2012-04-23 12:52) - PLID 49899 Load Saved information used in audit
				ServiceInfo.SavedCost  = ServiceInfo.Cost ; 
				ServiceInfo.SavedPrice  = ServiceInfo.Price  ; 
				ServiceInfo.nSavedQty = ServiceInfo.nQty ; 
				ServiceInfo.nSavedServiceID  = ServiceInfo.nServiceID ;
				ServiceInfo.bIsOffTheShelfSaved  =ServiceInfo.bIsOffTheShelf ;
				ServiceInfo.SavedPatientResp= ServiceInfo.PatientResp ;
				ServiceInfo.SavedVisionResp= ServiceInfo.VisionResp ;
				CString strDescription = ServiceInfo.strCode  ;
				
				if(!strDescription.IsEmpty()) {
					strDescription += " - ";
				}
				strDescription += ServiceInfo.strDescription  ;
				if( ServiceInfo.bIsOD  == TRUE){
					strDescription += " (OS)";
				}
				else if( ServiceInfo.bIsOS   == TRUE){
					strDescription += " (OD)";
				}
				ServiceInfo.strSavedDescription = strDescription;
				ServiceInfo.bIsDelete = FALSE; 
				ServiceInfo.DiscountList = LoadServiceDiscount(ServiceInfo.nID );
				m_arLensContactServiceInfo.Add(ServiceInfo) ;
				rsSelectedServicCode ->MoveNext();  
			}
			RefreshCLServiceList();
	}NxCatchAll(__FUNCTION__);

}

// (s.dhole 2012-03-19 12:32) - PLID 48971
void CContactLensOrderForm::OnEnKillfocusConLenOdQty()
{
	try{
		UpdateContactLensProductQnt();
		RefreshCLServiceList();

	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-03-19 12:32) - PLID 48971
void CContactLensOrderForm::OnEnKillfocusConLenOsQty()
{
	try{
		UpdateContactLensProductQnt();
		RefreshCLServiceList();
		
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-16 17:29) - PLID  48968 Load product dropdown
void CContactLensOrderForm::RefreshProducts()
{
	try{
	if (m_nLocationID != -1)
		m_pdlProductList->WhereClause = _bstr_t(FormatString("ProductLocationInfoT.LocationID = %li AND ProductLocationInfoT.Billable = 1 AND ServiceT.Active = 1 AND ProductT.GlassesContactLensDataID IS NULL AND ProductT.FramesDataID IS NULL ", m_nLocationID));
	else
		m_pdlProductList->WhereClause = _bstr_t(FormatString("ProductLocationInfoT.LocationID = %li AND ProductLocationInfoT.Billable = 1 AND ServiceT.Active = 1 AND ProductT.GlassesContactLensDataID IS NULL AND ProductT.FramesDataID IS NULL ", GetCurrentLocationID()) );
	m_pdlProductList->Requery();
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-03-19 11:25) - PLID  48968
void CContactLensOrderForm::SelChosenConLensLocation(LPDISPATCH lpRow)
{
	try{
		// (j.dinatale 2012-03-19 15:47) - PLID 48682
		if(lpRow){
			NXDATALIST2Lib::IRowSettingsPtr pRow(lpRow);
			long nLocID = VarLong(pRow->GetValue(ConLensOrderLocList::ID), -1);
			if(nLocID == -1){
				m_pdlLocationList->CurSel = NULL;
				ThrowNxException("Invalid Location Selection! No Location selected!"); 
			}
			if (m_nLocationID != nLocID){
				if (m_bIsBilled==FALSE){
					SelChosenConLensOdProduct(m_pdlODProdList->CurSel);
					SelChosenConLensOsProduct(m_pdlOSProdList->CurSel);
				}
				m_nLocationID = nLocID;
			}
		}

		RefreshProducts();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-16 11:45) - PLID 48935 - format fields!
void CContactLensOrderForm::FormatPrescriptionNumber(UINT nID, PrescriptionNumberFormat pnf)
{
	CString str;
	GetDlgItemText(nID, str);
	SetDlgItemText(nID, AsPrescriptionNumber(str, pnf));
}

// (j.dinatale 2012-03-16 11:45) - PLID 48935 - format fields!
BOOL CContactLensOrderForm::OnCommand(WPARAM wParam, LPARAM lParam) 
{
	try{
		int nID = LOWORD(wParam);
		//Determine how we want to format the field (default to pnfGeneralText, meaning "leave unchanged"
		PrescriptionNumberFormat pnf = pnfGeneralText;
		switch (HIWORD(wParam)){
			case EN_KILLFOCUS:
				{
					switch(nID){
						case IDC_CON_LEN_OD_ADD:
						case IDC_CON_LEN_OD_CYL:
						case IDC_CON_LEN_OD_SPHERE:
						case IDC_CON_LEN_OS_ADD:
						case IDC_CON_LEN_OS_CYL:
						case IDC_CON_LEN_OS_SPHERE:
							pnf = pnfSignedFloat;
							break;
						case IDC_CON_LEN_OD_QTY:
						case IDC_CON_LEN_OS_QTY:
							pnf = pnfInt;
							break;
						case IDC_CON_LEN_OS_AXIS:
						case IDC_CON_LEN_OD_AXIS:
							{
								CString strAxis;
								GetDlgItemText(nID, strAxis);
								bool bShouldBeZero = (strAxis.Trim().Compare("0") == 0);
								strAxis = AsPrescriptionNumber(strAxis, pnfInt);
								strAxis = strAxis.Trim();
								if(bShouldBeZero || strAxis.Compare("0") != 0){
									SetDlgItemText(nID, strAxis);
								}else{
									SetDlgItemText(nID, "");
								}
							}
							break;
						case IDC_CON_LEN_OD_BC:
						case IDC_CON_LEN_OD_DIAM:
						case IDC_CON_LEN_OS_BC:
						case IDC_CON_LEN_OS_DIAM:
							pnf = pnfUnsignedFloat;
							break;
					}

					FormatPrescriptionNumber(nID, pnf);
				}
				break;
		}
	}NxCatchAll(__FUNCTION__);
	return CNxDialog::OnCommand(wParam, lParam);
}


// (j.dinatale 2012-03-16 17:42) - PLID 48682
void CContactLensOrderForm::OnSelChosenProviderList(LPDISPATCH lpRow)
{
	if(lpRow){
		NXDATALIST2Lib::IRowSettingsPtr pRow(lpRow);
		long nProvID = VarLong(pRow->GetValue(ConLensOrderProvList::ID), -1);
		if(nProvID == -1){
			m_pdlProviderList->CurSel = NULL;
		}
	}
}

// (j.dinatale 2012-03-16 17:42) - PLID 48682
void CContactLensOrderForm::OnSelChosenSupplierList(LPDISPATCH lpRow)
{
	if(lpRow){
		NXDATALIST2Lib::IRowSettingsPtr pRow(lpRow);
		long nSuppID = VarLong(pRow->GetValue(ConLensSupplierRxDD::ID), -1);
		if(nSuppID == -1){
			m_pdlSuppList->CurSel = NULL;
		}
	}
}

// (j.dinatale 2012-03-21 13:16) - PLID 49079 - be able to get the order ID
long CContactLensOrderForm::GetOrderID()
{
	return m_nOrderID;
}

// (j.dinatale 2012-03-21 16:25) - PLID 49079 - need to post back to mainframe and the invvisionwebdlg
void CContactLensOrderForm::CloseCleanup(UINT nReturn)
{
	CWnd *pParentWnd =GetParent();
	if (pParentWnd){
		CInvView* pView = (CInvView *)GetMainFrame()->GetOpenView(INVENTORY_MODULE_NAME);
		if (NULL != pView) {
			if (IsWindow(pView->m_GlassesOrderSheet.GetSafeHwnd())) {
				pView->m_GlassesOrderSheet.PostMessage(NXM_CONTACT_ORDER_DLG_CLOSED, nReturn, (LPARAM)m_nOrderID);
			}		
		}
	}

	//(r.wilson 3/26/2012) PLID 49193 - Barcode scanner clean up
	GetMainFrame()->UnregisterForBarcodeScan(this);
	GetMainFrame()->PostMessage(NXM_CONTACT_ORDER_DLG_CLOSED, nReturn, (LPARAM)this);
	// (s.dhole 2012-04-25 12:20) - PLID 49969 Cleaning
	if (m_pEMRCLPreviewPopupDlg) {
		m_pEMRCLPreviewPopupDlg->DestroyWindow();
		delete m_pEMRCLPreviewPopupDlg;
		m_pEMRCLPreviewPopupDlg = NULL;
	}
		// (s.dhole 2012-04-30 09:08) - PLID 49447 now realease discount object
	for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
			LenseServiceInfo ServiceInfo =m_arLensContactServiceInfo[nCnt] ;
			DiscountList *pDiscountList = ServiceInfo.DiscountList;
			if(pDiscountList ) {
				delete pDiscountList ;
				pDiscountList =NULL;
			}			
	}

}

// (j.dinatale 2012-03-21 16:35) - PLID 49079 - run close cleanup
void CContactLensOrderForm::OnBnClickedCancel()
{
	try{
		CloseCleanup(IDCANCEL);
	}NxCatchAll(__FUNCTION__);

	CNxDialog::OnCancel();
}

//r.wilson 3/14/2012 PLID 48838 - This fires when the Exam Date textbox loses focus. It is responsible for automatically populating the Expiration date if the preference is set
void CContactLensOrderForm::KillFocusConLensExamDate()
{
	// TODO: Add your message handler code here
	try
	{
		
		//(r.wilson 3/14/2012) PLID 48838  (See line below)
		using namespace boost::gregorian; //This namespace is for the boost lib

		COleDateTime dtExamDateTmp;
		dtExamDateTmp = m_pRxDate->GetDateTime();	
		

		if(dtExamDateTmp.GetStatus() != COleDateTime::valid || m_pRxDate->GetDateTime() == NULL)
		{
			//(r.wilson 3/14/2012) PLID 48838 - Invalid Datetime so abandon the auto calculate
			return;
		}
		
		long nMonthsToAdd = -1;
			
		//(r.wilson 3/14/2012) PLID 48838 - the index is the number of months to go forward from the Exam Date
		nMonthsToAdd = GetRemotePropertyInt("InvContactLensOrder_AutoCalcExpirationDateLength", /* default to 0 months*/0,0,"<None>",true);
		
		COleDateTime dtTmpDate = m_pRxDate->GetDateTime();
		
		//(r.wilson 3/14/2012) PLID 48838 -> from the boost lib ....
		/* Create a boost date based from our coledatetime. We do this because the coledatetime will not allow us to add months
		   while at the same time changing the day based on events like leap years.... The boost lib does this. 
		*/
		date d(dtTmpDate.GetYear(),dtTmpDate.GetMonth(), dtTmpDate.GetDay());
			
		//Increase the current date by 'nMonthsToAdd' Months
		d += months(nMonthsToAdd);

		//Create a ColeDateTime from the pieces of the boost lib's date
		COleDateTime dtExpirationDateTmp(d.year(),d.month(), d.day() , dtTmpDate.GetHour() ,dtTmpDate.GetMinute(),dtTmpDate.GetSecond());
		
		m_pRxExpirationDate->SetDateTime(dtExpirationDateTmp);

	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-03-26 17:33) - PLID 49204 load most recent contact lens Rx
// This will load only ordered priscription

void CContactLensOrderForm::LoadLastPatientRx()
{
	
	IRowSettingsPtr pRow = m_pdlPatientList->CurSel;
	long nPatientID = -1;
	if(pRow) {
		nPatientID = VarLong(pRow->GetValue(ConLensOrderPtList::ID),-1);
	}
	if(nPatientID == -1) {
		return;
	}
	long nConfig = GetRemotePropertyInt("GlassesOrder_CopyPatientRx", 1, 0, "<None>");
	if(!nConfig) {
		return;
	}

	if(m_pRxDate->GetStatus() == 1){
		return;
	}

	if(m_pRxExpirationDate->GetStatus() == 1){
		return;
	}

	CString str;
	GetDlgItemText(IDC_CON_LEN_OS_SPHERE, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OS_CYL, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OS_AXIS, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OS_ADD, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OS_BC, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OS_DIAM, str);
	if(!str.IsEmpty()) {
		return;
	}
	
	GetDlgItemText(IDC_CON_LENS_OS_NOTES, str);
	if(!str.IsEmpty()) {
		return;
	}

	GetDlgItemText(IDC_CON_LEN_OD_SPHERE, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OD_CYL, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OD_AXIS, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OD_ADD, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OD_BC, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LEN_OD_DIAM, str);
	if(!str.IsEmpty()) {
		return;
	}
	GetDlgItemText(IDC_CON_LENS_OD_NOTES, str);
	if(!str.IsEmpty()) {
		return;
	}


	_RecordsetPtr rsLastRx = CreateParamRecordset("SELECT TOP 1 "
		"LeftRxDetail.PrescriptionSphere AS SphereL, LeftRxDetail.CylinderValue AS CylinderL, "
		"LeftRxDetail.CylinderAxis AS AxisL, LeftRxDetail.AdditionValue AS AdditionL, "
		"LeftRxDetail.BC AS BCL, LeftRxDetail.Diameter AS DiameterL, "
		"LeftRxDetail.Color AS ColorL,LeftRxDetail.Note AS NoteL, "
		"RightRxDetail.PrescriptionSphere AS SphereR, RightRxDetail.CylinderValue AS CylinderR, "
		"RightRxDetail.CylinderAxis AS AxisR, RightRxDetail.AdditionValue AS AdditionR, "
		"RightRxDetail.BC AS BCR, RightRxDetail.Diameter AS DiameterR, "
		"RightRxDetail.Color AS ColorR,RightRxDetail.Note AS NoteR, "
		" LensRxT.RxExpirationDate, LensRxT.RxDate ,LensRxT.RxIssueDate "
		"FROM GlassesOrderT LEFT JOIN LensRxT ON GlassesOrderT.LensRxID = LensRxT.ID "
		"LEFT JOIN LensDetailRxT LeftRxDetail ON LensRxT.LeftLensDetailRxID = LeftRxDetail.ID "
		"LEFT JOIN LensDetailRxT RightRxDetail ON LensRxT.RightLensDetailRxID = RightRxDetail.ID "
		"WHERE GlassesOrderT.IsDelete = 0 AND GlassesOrderT.PersonID = {INT} "
		"AND LensRxT.RxExpirationDate >=Getdate()  AND LensRxT.RxExpirationDate IS NOT NULL "
		" AND GlassesOrderType =3 " //vwotContactLensPatient
		"ORDER BY GlassesOrderT.OrderCreateDate DESC", nPatientID);

	if(!rsLastRx->eof) {
		_variant_t varRxDate = rsLastRx->Fields->Item["RxDate"]->Value;
		if(varRxDate.vt == VT_DATE) {
			m_pRxDate->SetDateTime(VarDateTime(varRxDate));
		}
		else {
			m_pRxDate->Clear();
		}
		_variant_t varRxExpirationDate = rsLastRx->Fields->Item["RxExpirationDate"]->Value;
		if(varRxExpirationDate.vt == VT_DATE) {

			m_pRxExpirationDate->SetDateTime(VarDateTime(varRxExpirationDate));
		}
		else {
			m_pRxExpirationDate->Clear();
		}

		_variant_t varRxIssueDate= rsLastRx->Fields->Item["RxIssueDate"]->Value;
		if(varRxExpirationDate.vt == VT_DATE) {

			m_pRxIssueDate->SetDateTime(VarDateTime(varRxExpirationDate));
		}
		else {
			m_pRxIssueDate->Clear();
		}

		_variant_t varSphere = rsLastRx->Fields->Item["SphereL"]->Value; 
		if(varSphere.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_SPHERE, AsPrescriptionNumber(AsString(varSphere), pnfSignedFloat));
		}
		
		_variant_t varCylinder = rsLastRx->Fields->GetItem("CylinderL")->Value;
		if(varCylinder.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_CYL, AsPrescriptionNumber(AsString(varCylinder), pnfSignedFloat));
		}

		_variant_t varAxis = rsLastRx->Fields->GetItem("AxisL")->Value;
		if(varAxis.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_AXIS, AsPrescriptionNumber(AsString(varAxis), pnfInt));
		}

		_variant_t varAddition = rsLastRx->Fields->GetItem("AdditionL")->Value;
		if(varAddition.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_ADD, AsPrescriptionNumber(AsString(varAddition), pnfSignedFloat));
		}
		_variant_t varBC= rsLastRx->Fields->GetItem("BCL")->Value;
		if(varBC.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_BC, AsPrescriptionNumber(AsString(varBC), pnfUnsignedFloat));
		}


		_variant_t varDiameter = rsLastRx->Fields->GetItem("DiameterL")->Value;
		if(varDiameter.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_DIAM, AsPrescriptionNumber(AsString(varDiameter), pnfUnsignedFloat));
		}

		_variant_t varColor = rsLastRx->Fields->GetItem("ColorL")->Value;
		if(varColor.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OS_CLR,_bstr_t( varColor));
		}

		_variant_t varNote = rsLastRx->Fields->GetItem("NoteL")->Value;
		if(varNote.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LENS_OS_NOTES, _bstr_t(varNote));
		}


		varSphere = rsLastRx->Fields->GetItem("SphereR")->Value; 
		if(varSphere.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_SPHERE, AsPrescriptionNumber(AsString(varSphere), pnfSignedFloat));
		}
		
		varCylinder = rsLastRx->Fields->GetItem("CylinderR")->Value;
		if(varCylinder.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_CYL, AsPrescriptionNumber(AsString(varCylinder), pnfSignedFloat));
		}

		varAxis = rsLastRx->Fields->GetItem("AxisR")->Value;
		if(varAxis.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_AXIS, AsPrescriptionNumber(AsString(varAxis), pnfInt));
		}

		varAddition = rsLastRx->Fields->GetItem("AdditionR")->Value;
		if(varAddition.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_ADD, AsPrescriptionNumber(AsString(varAddition), pnfSignedFloat));
		}

		 varBC= rsLastRx->Fields->GetItem("BCR")->Value;
		if(varBC.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_BC, AsPrescriptionNumber(AsString(varBC), pnfUnsignedFloat));
		}

		varDiameter = rsLastRx->Fields->GetItem("DiameterR")->Value;
		if(varDiameter.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_DIAM, AsPrescriptionNumber(AsString(varDiameter), pnfUnsignedFloat));
		}

		 varColor = rsLastRx->Fields->GetItem("ColorR")->Value;
		if(varColor.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LEN_OD_CLR,_bstr_t( varColor));
		}

		varNote = rsLastRx->Fields->GetItem("NoteR")->Value;
		if(varNote.vt != VT_NULL) {
			SetDlgItemText(IDC_CON_LENS_OD_NOTES, _bstr_t( varNote));
		}
	}
}

// (s.dhole 2012-03-26 17:33) - PLID 47610 load past contact lens Rx
void CContactLensOrderForm::OnSelChosenConLenPatient(LPDISPATCH lpRow)
{
	try {
		// (j.dinatale 2012-04-12 10:22) - PLID 49631 - load the patient list
		NXDATALIST2Lib::IRowSettingsPtr pRow = NXDATALIST2Lib::IRowSettingsPtr(lpRow);
		long nPatientID = -1;


		// (b.spivey, May 10, 2012) - PLID 50195 - If we have a row, grab the patient name, 
		//	 If we don't, assume no patient is selected. 
		if (pRow) {

			CString strPatientName = VarString(pRow->GetValue(ConLensOrderPtList::Name), ""); 
			UpdateWindowCaption(strPatientName); 
		}
		else {
			UpdateWindowCaption(""); 
		}

		if(pRow) {
			nPatientID = VarLong(pRow->GetValue(ConLensOrderPtList::ID),-1);
			if(nPatientID > 0){
				// (s.dhole 2012-05-14 11:24) - PLID 49890 Show ALL  Vision plan
				// (s.dhole 2012-06-05 10:37) - PLID 50777 Alow only primary
				// (r.goldschmidt 2014-04-03 16:46) - PLID 56699 - show vision plans
				CString strWhere = FormatString(" (InsuredPartyT.PatientID = %li)", nPatientID);
				m_pdlVisionPlans->WhereClause = _bstr_t(strWhere);
				m_pdlVisionPlans->Requery();
			}
		}

		// (j.dinatale 2012-04-12 10:22) - PLID 48848 - enable or disable the previous rx button accordingly
		if (nPatientID > 0){
			m_btnPrevRx.EnableWindow(TRUE);
			// (s.dhole 2012-04-25 17:05) - PLID 49992 
			GetDlgItem(IDC_CON_LENS_VISION_PLANS)->EnableWindow(TRUE);
		}else{
			m_btnPrevRx.EnableWindow(FALSE);
			// (s.dhole 2012-04-25 17:05) - PLID 49992 
			GetDlgItem(IDC_CON_LENS_VISION_PLANS)->EnableWindow(FALSE);
		}
		// (s.dhole 2012-06-13 17:05) - PLID 49969 should cleared Emn selection if user change patient
		if(m_nEMNCLPatientID 	== nPatientID ){
			if (m_nCLEmnID <1 && m_nCLLastEMN  >0){
				m_nCLEmnID  =m_nCLLastEMN  ;
			}
		}
		else{
			m_nCLEmnID  =-1;
		}
		ReflectCLEmn();
		LoadLastPatientRx();

		// (j.dinatale 2012-04-27 17:22) - PLID 49896 - attempt to auto update the description after changing the patient
		UpdateDescription();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-28 17:38) - PLID 49169 - need to control the OS fields and when they are read only or not
void CContactLensOrderForm::HandleOSReadOnlyStatus()
{
	CString strTemp;
	GetDlgItemText(IDC_CON_LEN_OS_SPHERE, strTemp);
	SetOSReadOnly((BOOL)strTemp.IsEmpty());
}

// (j.dinatale 2012-03-28 17:38) - PLID 49169 - need to control the OS fields and when they are read only or not
void CContactLensOrderForm::HandleODReadOnlyStatus()
{
	CString strTemp;
	GetDlgItemText(IDC_CON_LEN_OD_SPHERE, strTemp);
	SetODReadOnly((BOOL)strTemp.IsEmpty());
}

// (j.dinatale 2012-03-29 09:00) - PLID 49169
void CContactLensOrderForm::SetODReadOnly(BOOL bReadOnly)
{
	// sphere is going to be field that indicates there is data
	//EnableDlgItem(IDC_CON_LEN_OD_SPHERE, bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OD_CYL, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OD_AXIS, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OD_ADD, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OD_BC, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OD_DIAM, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OD_CLR, !bReadOnly);
	//EnableDlgItem(IDC_CON_LEN_OD_QTY, !bReadOnly);
	EnableDlgItem(IDC_CON_LENS_OD_NOTES, !bReadOnly);
	//EnableDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, !bReadOnly);
	
	// (s.dhole 2012-04-12 16:22) - PLID 48968  make it Enabled 
	EnableDlgItem(IDC_CON_LEN_COPY_TO_OS, !bReadOnly);
	// (s.dhole 2012-04-12 16:22) - PLID 48968 
	m_pdlODProdList->Enabled  = !bReadOnly;
	if (bReadOnly== TRUE)  
	{
		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlODProdList->FindByColumn(ConLensProductRxDD::ID, (long)-1, NULL, VARIANT_TRUE) ;
		SelChosenConLensOdProduct(pRow);
	}
	else
	{
		//nothing
	}
	
	// (j.dinatale 2013-03-21 09:37) - PLID 55752 - on existing orders, these fields are read only
	((CEdit*)GetDlgItem(IDC_CON_LENS_OD_DOCINSTRUCT))->SetReadOnly(m_bPrevRxImported || bReadOnly);
}

// (j.dinatale 2012-03-29 09:00) - PLID 49169
void CContactLensOrderForm::SetOSReadOnly(BOOL bReadOnly)
{
	// sphere is going to be field that indicates there is data
	//EnableDlgItem(IDC_CON_LEN_OS_SPHERE, bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OS_CYL, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OS_AXIS, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OS_ADD, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OS_BC, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OS_DIAM, !bReadOnly);
	EnableDlgItem(IDC_CON_LEN_OS_CLR, !bReadOnly);
	//EnableDlgItem(IDC_CON_LEN_OS_QTY, !bReadOnly);
	EnableDlgItem(IDC_CON_LENS_OS_NOTES, !bReadOnly);
	//EnableDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, !bReadOnly);

	EnableDlgItem(IDC_CON_LEN_COPY_TO_OD, !bReadOnly);
	// (s.dhole 2012-04-12 16:22) - PLID 48968  make it Enabled 
	m_pdlOSProdList->Enabled  = !bReadOnly;
	if (bReadOnly== TRUE)  
	{
		NXDATALIST2Lib::IRowSettingsPtr pRow = m_pdlOSProdList->FindByColumn(ConLensProductRxDD::ID, (long)-1, NULL, VARIANT_TRUE) ;
		SelChosenConLensOsProduct(pRow);
	}
	else
	{
		//nothing
	}

	// (j.dinatale 2013-03-21 09:37) - PLID 55752 - on existing orders, these fields are read only
	((CEdit*)GetDlgItem(IDC_CON_LENS_OS_DOCINSTRUCT))->SetReadOnly(m_bPrevRxImported || bReadOnly);
}

// (j.dinatale 2012-03-29 09:00) - PLID 49169 - on kill focus, fix the readonly fields, update counts, and refresh our service list
void CContactLensOrderForm::OnEnKillfocusConLenOdSphere()
{
	try{
		HandleODReadOnlyStatus();
		UpdateContactLensProductQnt();
		RefreshCLServiceList();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-29 09:00) - PLID 49169 - on kill focus, fix the readonly fields, update counts, and refresh our service list
void CContactLensOrderForm::OnEnKillfocusConLenOsSphere()
{
	try{
		HandleOSReadOnlyStatus();
		UpdateContactLensProductQnt();
		RefreshCLServiceList();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-29 09:00) - PLID 49169 - when text changes, reflect changes in UI
void CContactLensOrderForm::OnEnChangeConLenOdSphere()
{
	try{
		HandleODReadOnlyStatus();
		UpdateContactLensProductQnt();
		RefreshCLServiceList();
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-03-29 09:00) - PLID 49169 - when text changes, reflect changes in UI
void CContactLensOrderForm::OnEnChangeConLenOsSphere()
{
	try{
		HandleOSReadOnlyStatus();
		UpdateContactLensProductQnt();
		RefreshCLServiceList();
	}NxCatchAll(__FUNCTION__);
}

//(r.wilson 3/26/2012) PLID 49193
LRESULT CContactLensOrderForm::OnBarcodeScan(WPARAM wParam, LPARAM lParam)
{
		// (r.wilson 5/9/2012) if item is a bill then we dont change anything
		if(m_bIsBilled == TRUE)
		{
			return 0;
		}
	
		//BOOLEAN bCompletedAction = FALSE;
		BOOL bIsProduct = TRUE;
		GlassesOrderServiceType nGlassesOrderServiceType = gostOther;

		//bstr holds the actual barcode that was received	
		_bstr_t bstrBarCodeDataRaw = (BSTR)lParam;

		IRowSettingsPtr pRow;
		try {		
			
			CString str;

			switch(GetSectionThatHasFocus())
			{
				case sectionOS: 				
					GetDlgItemText(IDC_CON_LEN_OS_SPHERE, str);
					if(str.IsEmpty()) {
					return 0;	
					}
					pRow = m_pdlOSProdList->FindByColumn(ConLensProductRxDD::Barcode,bstrBarCodeDataRaw,NULL, VARIANT_TRUE);				
					nGlassesOrderServiceType = gostContactLens;
					SelChosenConLensOsProduct(pRow);
					break;
				case sectionOD:
					GetDlgItemText(IDC_CON_LEN_OD_SPHERE, str);
					if(str.IsEmpty()) {
					return 0;	
					}
					pRow = m_pdlODProdList->FindByColumn(ConLensProductRxDD::Barcode,bstrBarCodeDataRaw,NULL, VARIANT_TRUE);		
					nGlassesOrderServiceType = gostContactLens;
					SelChosenConLensOdProduct(pRow);
					break;
				default: 
					nGlassesOrderServiceType = gostOther;
						pRow = m_pdlServiceList->FindByColumn(clscBarcode,bstrBarCodeDataRaw,NULL,VARIANT_TRUE);
					
					if(pRow)
					{					
						SelChosenConLensServices(pRow);					
					}
					else
					{
						pRow = m_pdlProductList->FindByColumn(clpcBarcode,bstrBarCodeDataRaw,NULL,VARIANT_TRUE);
						SelChosenConLensProducts(pRow);					
					}
					break;
		}
		
	}NxCatchAll(__FUNCTION__);
	return 0;
}

/*(r.wilson 3/26/2012) PLID 49193
   Function will tell is which area of the dialog has focus. This is used for barcode scanning because where the drop down that gets searched for a scanned
 barcode will depend of what area of the dialog has focus */
// (j.dinatale 2013-03-21 09:33) - PLID 55752 - added the doctor's ins fields to this
int CContactLensOrderForm::GetSectionThatHasFocus()
{
	int SectionWithFocus = -1;
	try{

		CWnd *itemWithFocus = GetFocus();

		int idWithFocus = itemWithFocus->GetDlgCtrlID();

		// (r.wilson 3/26/2012) PLID 49193 - Switch statement helps us determine which area of the dialog has focus
		switch(idWithFocus)
		{
			//(r.wilson 3/26/2012) PLID 49193 - First set if cases is when the OD section has focus
			case IDC_CON_LEN_OD_SPHERE:
			case IDC_CON_LEN_OD_CYL:
			case IDC_CON_LEN_OD_AXIS:
			case IDC_CON_LEN_OD_ADD: 
			case IDC_CON_LEN_OD_BC: 
			case IDC_CON_LEN_OD_DIAM: 
			case IDC_CON_LEN_OD_CLR:
			case IDC_CON_LENS_OD_NOTES:
			case IDC_CON_LEN_COPY_TO_OS:
			case IDC_CHK_CON_LENS_OD_TO_BE_ORDERED:
			case IDC_CON_LENS_OD_PRODUCT:
			case IDC_CON_LEN_OD_QTY: 
			case IDC_CON_LENS_OD_DOCINSTRUCT:
				if(m_pdlODProdList->Enabled != VARIANT_FALSE)
				{
					SectionWithFocus = sectionOD; 
				}				
				break;
			//(r.wilson 3/26/2012) PLID 49193 - First set if cases is when the OS section has focus
			case IDC_CON_LEN_OS_SPHERE:
			case IDC_CON_LEN_OS_CYL:
			case IDC_CON_LEN_OS_AXIS:
			case IDC_CON_LEN_OS_ADD: 
			case IDC_CON_LEN_OS_BC: 
			case IDC_CON_LEN_OS_DIAM: 
			case IDC_CON_LEN_OS_CLR: 
			case IDC_CON_LENS_OS_NOTES:
			case IDC_CON_LEN_COPY_TO_OD:
			case IDC_CHK_CON_LENS_OS_TO_BE_ORDERED:
			case IDC_CON_LENS_OS_PRODUCT:
			case IDC_CON_LEN_OS_QTY: 
			case IDC_CON_LENS_OS_DOCINSTRUCT:
				if(m_pdlOSProdList->Enabled != VARIANT_FALSE)
				{
					SectionWithFocus = sectionOS; 
				}
				break;
			default: 
				//(r.wilson 3/28/2012) PLID 49193 - If none of the above items have focus then the section with focus is Other...
				SectionWithFocus = sectionOther;
				break;
		}
			
	}NxCatchAll(__FUNCTION__);

	return SectionWithFocus;
}

// (s.dhole 2012-04-05 09:19) - PLID 49447
void CContactLensOrderForm::LeftClickConLensServices(LPDISPATCH lpRow, short nCol, long x, long y, long nFlags)
{
try {

		// (s.dhole 2012-04-16 12:37) - PLID  Makesure billed item can not be changed
		// (s.dhole 2012-04-16 11:22) - PLID 49893 allow dicount change if order is not billed 
		if (nCol==  ssclDiscount  && m_bIsBilled == FALSE )
		{
			IRowSettingsPtr pRow(lpRow);
			if (pRow)
			{
				for(int nCnt = 0 ; nCnt  < m_arLensContactServiceInfo.GetSize(); nCnt ++  )
				{ 
					if(( VarLong(  pRow->GetValue(ssclRowID ),-1)  == m_arLensContactServiceInfo[nCnt].nRowID)  &&
					(m_arLensContactServiceInfo[nCnt].bIsDelete ==FALSE )){
						COleCurrency cyUnitCost = m_arLensContactServiceInfo[nCnt].Price  ;
						COleCurrency cyOtherCost = COleCurrency(0,0);
						double dblQuantity = (double)m_arLensContactServiceInfo[nCnt].nQty ;
						CChargeDiscountDlg dlg(this, -2, m_arLensContactServiceInfo[nCnt].DiscountList , TRUE, FALSE, TRUE, cyUnitCost, cyOtherCost, dblQuantity, m_arLensContactServiceInfo[nCnt].strDescription );
						long nResult = dlg.DoModal();
						if (nResult ==IDOK ){
							RefreshCLServiceList(); 
						}
						break;
					}
				}
			}
		}
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-04-09 16:50) - PLID 49219 - clear out the selection when the none row is chosen
void CContactLensOrderForm::SelChosenConLenOptician(LPDISPATCH lpRow)
{
	try{
		if(lpRow){
			NXDATALIST2Lib::IRowSettingsPtr pRow(lpRow);
			long nOpticianID = VarLong(pRow->GetValue(ConLensOrderOpticianList::ID), -1);
			if(nOpticianID == -1){
				m_pdlOpticianList->CurSel = NULL;
			}
		}
	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2012-04-12 09:49) - PLID 48968
void CContactLensOrderForm::OnRequeryFinishedConLensOdProduct(short nFlags)
{
	try {
		m_pdlODProdList->FindByColumn(clpcID, m_nRightProdID, NULL, g_cvarTrue);

		if (m_bSavedProductToBeOrderedRight ==TRUE){
			GetDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)->EnableWindow(TRUE);
		}
		else {
			
				// (s.dhole 2012-05-17 16:33) - PLID 50479
			BOOL bIsTrackableStatus = FALSE;
			BOOL bIsBillable=FALSE;
			CheckProductBillable(m_nRightProdID,m_nLocationID, bIsBillable,bIsTrackableStatus);
			if (bIsTrackableStatus==TRUE){
				GetDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)->EnableWindow(TRUE);
			}
			else{
				SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED,FALSE);
				GetDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)->EnableWindow(FALSE);
			}
			
		}
		// (s.dhole 2012-06-20 16:33) - PLID 49893
		if (m_bIsBilled != FALSE){
			GetDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)->EnableWindow(FALSE);
		}

	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-12 09:49) - PLID 48968
void CContactLensOrderForm::OnRequeryFinishedConLensOsProduct(short nFlags)
{
	try {
		m_pdlOSProdList ->FindByColumn(clpcID, m_nLeftProdID, NULL, g_cvarTrue);
		if (m_bSavedProductToBeOrderedLeft ==TRUE){
				GetDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)->EnableWindow(TRUE);
			}
		else{
			
			// (s.dhole 2012-05-17 16:33) - PLID 50479
			BOOL bIsTrackableStatus = FALSE;
			BOOL bIsBillable=FALSE;
			CheckProductBillable(m_nLeftProdID,m_nLocationID, bIsBillable,bIsTrackableStatus);
			if (bIsTrackableStatus==TRUE){
				GetDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)->EnableWindow(TRUE);
			}
			else{
				SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED,FALSE);
				GetDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)->EnableWindow(FALSE);
			}
		}
		// (s.dhole 2012-06-20 16:33) - PLID 49893
		if (m_bIsBilled != FALSE){
			GetDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)->EnableWindow(FALSE);
		}
			
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-16 11:22) - PLID 49893 Apply Billed Order rulls 
void CContactLensOrderForm::ApplyCLBilledSetting()
{
	try {
		// If order is not billed than do not execut any code 
		if (m_bIsBilled==FALSE)
			return;
		BOOL bLockCtl = FALSE; 	
		
		EnableDlgItem(IDC_CON_LENS_PAT_LIST, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_SPHERE, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_SPHERE, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_CYL, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_CYL, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_AXIS, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_AXIS, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_ADD, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_ADD, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_BC, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_BC, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_DIAM, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_DIAM, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_CLR, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_CLR, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_QTY, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_QTY, bLockCtl);
		// (s.dhole 2012-04-16 12:59) - PLID 49890 
		EnableDlgItem(IDC_CON_LENS_VISION_PLANS, bLockCtl);

		EnableDlgItem(IDC_CON_LENS_PAT_LIST, bLockCtl);

		EnableDlgItem(IDC_CON_LENS_SERVICES, bLockCtl);
		EnableDlgItem(IDC_CON_LENS_PRODUCTS , bLockCtl);
		EnableDlgItem(IDC_CON_LEN_COPY_TO_OS , bLockCtl);
		EnableDlgItem(IDC_CON_LEN_COPY_TO_OD , bLockCtl);
		EnableDlgItem(IDC_CON_LEN_PRODUCTS_RADIO, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_SERVICES_RADIO, bLockCtl);
			
		m_pdlProductList->Enabled = bLockCtl ;
		m_pdlODProdList->Enabled = bLockCtl ; 
		m_pdlOSProdList->Enabled = bLockCtl ;
		EnableDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, bLockCtl);
		EnableDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OD_QTY, bLockCtl);
		EnableDlgItem(IDC_CON_LEN_OS_QTY, bLockCtl);
		m_pdlSelectedServiceList->GetColumn(ssclPrice)->PutEditable(VARIANT_FALSE);
		m_pdlSelectedServiceList->GetColumn(ssclQty)->PutEditable(VARIANT_FALSE);
		m_pdlSelectedServiceList->GetColumn(ssclVisionResp)->PutEditable(VARIANT_FALSE);
		m_pdlSelectedServiceList->GetColumn(ssclDiscount)->FieldType = cftTextSingleLine ;
		
	}NxCatchAll(__FUNCTION__);
}


// (s.dhole 2012-04-16 12:59) - PLID 49890 Apply settings if vision plan exist or not
void CContactLensOrderForm::ApplyCLVisionPlanSetting()
{
	try {
		// ot refresh data list aut width property , we will removw and add coluns
		if ((m_pdlSelectedServiceList->GetColumnCount() -1) == ssclPatientResp ){
			m_pdlSelectedServiceList->RemoveColumn(ssclPatientResp) ; 
		}
		if ((m_pdlSelectedServiceList->GetColumnCount() -1) == ssclVisionResp ){
			m_pdlSelectedServiceList->RemoveColumn(ssclVisionResp)  ;
		}

		if (m_bIsvisionPlanExist==TRUE)
		{
			// (s.dhole 2012-06-05 11:07) - PLID 50777
			IColumnSettingsPtr pServicesCol = m_pdlSelectedServiceList->GetColumn(m_pdlSelectedServiceList->InsertColumn(ssclVisionResp, _T("VisionResp"), _T("Insurance Resp."), 100, csVisible |csEditable | csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			pServicesCol = m_pdlSelectedServiceList->GetColumn(m_pdlSelectedServiceList->InsertColumn(ssclPatientResp, _T("PatientResp"), _T("Patient Resp."), 100, csVisible | csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			GetDlgItem(IDC_CON_LENS_VISION_RESP_AMOUNT)->ShowWindow(SW_SHOW);
			GetDlgItem(IDC_STATIC_CL_VISION_LABEL)->ShowWindow(SW_SHOW );
		}
		else
		{
			IColumnSettingsPtr pServicesCol = m_pdlSelectedServiceList->GetColumn(m_pdlSelectedServiceList->InsertColumn(ssclVisionResp, _T("VisionResp"), _T("Vision Resp."), 0,  csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			pServicesCol = m_pdlSelectedServiceList->GetColumn(m_pdlSelectedServiceList->InsertColumn(ssclPatientResp, _T("PatientResp"), _T("Patient Resp."), 100, csVisible | csFixedWidth));
			pServicesCol->FieldType = cftTextSingleLine;
			pServicesCol->DataType =VT_CY;
			GetDlgItem(IDC_CON_LENS_VISION_RESP_AMOUNT)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_STATIC_CL_VISION_LABEL)->ShowWindow(SW_HIDE);
		}
		RefreshCLServiceList ();
	}NxCatchAll(__FUNCTION__);


}

// (s.dhole 2012-04-16 12:59) - PLID 49890   
void CContactLensOrderForm::OnRequeryFinishedCLVisionPlans(short nFlags)
{
	try {
		// (s.dhole 2012-04-25 17:05) - PLID 49992 
			IRowSettingsPtr pRow = m_pdlPatientList->CurSel;
			long nPatientID = -1;
			if(pRow) {
				nPatientID = VarLong(pRow->GetValue(ConLensOrderPtList::ID),-1);
			}
			if(nPatientID != -1 ) {
			pRow = m_pdlVisionPlans->GetNewRow();
			pRow->PutValue(ConLensOrderVisPlanList::Name , _bstr_t(" <None>"));
			pRow->PutValue(ConLensOrderVisPlanList::Priority , (long)-1);
			// (s.dhole 2012-04-25 17:05) - PLID 49992 
			pRow->PutValue(ConLensOrderVisPlanList::PersonID , (long)-1);
			m_pdlVisionPlans->AddRowBefore(pRow, m_pdlVisionPlans->GetFirstRow());
		}
			
		// (s.dhole 2012-04-25 17:05) - PLID 49992 if this is new order then select primary vision plan 
		if (m_nOrderID>0 || (nPatientID != m_nSavedPatientID &&  m_nSavedPatientID !=-1)){
			pRow = m_pdlVisionPlans->FindByColumn(ConLensOrderVisPlanList::PersonID, (long)m_nCLInsuredPartyID, NULL, g_cvarTrue);
		}else{
			// (s.dhole 2012-06-05 10:45) - PLID 50777 Vision will be selected
			pRow = m_pdlVisionPlans->FindByColumn(ConLensOrderVisPlanList::CategoryCategoryType, 2L, NULL, g_cvarTrue);
		}
	// If no insurance company than select none
		if (!pRow ){
			pRow = m_pdlVisionPlans->FindByColumn(ConLensOrderVisPlanList::PersonID, -1L, NULL, g_cvarTrue);
			m_nCLInsuredPartyID = -1;
		} 
		else if  ( VarLong (pRow->GetValue( ConLensOrderVisPlanList::PersonID) ,-1)>0 ){
			m_nCLInsuredPartyID=VarLong (pRow->GetValue(ConLensOrderVisPlanList::PersonID) ,-1);
			
		}



		if(pRow  && m_nCLInsuredPartyID >0){
			// (s.dhole 2012-04-20 14:34) - PLID 49890  Set visionPlan  flag
			m_bIsvisionPlanExist = TRUE;
		}
		else{
			// (s.dhole 2012-04-20 14:34) - PLID 49890  Reset visionPlan  flag
			m_bIsvisionPlanExist = FALSE; 
		}
		if (nPatientID > 0 && m_bIsBilled==FALSE){
			// (s.dhole 2012-04-25 17:05) - PLID 49992 
			GetDlgItem(IDC_CON_LENS_VISION_PLANS)->EnableWindow(TRUE);
		}else{
			// (s.dhole 2012-04-25 17:05) - PLID 49992 
			GetDlgItem(IDC_CON_LENS_VISION_PLANS)->EnableWindow(FALSE);
		}

			
		// (s.dhole 2012-04-12 14:20) - PLID 48968 Show deleted product in dropdown if ist is used in existing order
		RefreshCLServiceList(); 
		CContactLensOrderForm::ApplyCLVisionPlanSetting();
	}NxCatchAll(__FUNCTION__);
}

void CContactLensOrderForm::ReflectCLEmn(){
	//- Do we have an EMN?
	//- Also make sure that we're licensed and have permission.
	// (j.armen 2012-05-31 14:39) - PLID 50718 - Check if we are licensed using the helper function
	if(m_nCLEmnID  == -1 
		|| !(g_pLicense->HasEMR(CLicense::cflrSilent) == 2) 
		|| !(GetCurrentUserPermissions(bioPatientEMR) & SPT__R_________ANDPASS)) 
	{
		//- No, so hide the controls
		m_lblEMRName.ShowWindow(SW_HIDE);
		m_btnGoToEMR.EnableWindow(FALSE);
		m_btnGoToEMR.ShowWindow(SW_HIDE);
		
	}
	else {
		//- Yes, so show the controls, and update the EMN description
		m_lblEMRName.ShowWindow(SW_SHOWNA);
		m_btnGoToEMR.EnableWindow(TRUE);
		m_btnGoToEMR.ShowWindow(SW_SHOWNA);
		m_lblEMRName.SetWindowText("EMN " );

	}
}

// (s.dhole 2012-04-25 12:20) - PLID 49969 
void CContactLensOrderForm::OnCLPreviewEmn()
{
	try {
				
		//- Create a Preview Popup dialog for our EMN
		if(m_nCLEmnID  == -1) {
			//- This button should have been disabled!
			ASSERT(FALSE);
			return;
		}

		//- Make sure we have permission
		if(!CheckCurrentUserPermissions(bioPatientEMR, sptRead)) {
			return;
		}

		//- Check if the EMN has been deleted.
		_RecordsetPtr rsDeleteInfo = CreateParamRecordset(
			"SELECT Deleted, DeletedBy, DeleteDate, EmnTabChartID, ModifiedDate \r\n"
			"FROM EmrMasterT \r\n"
			"LEFT JOIN EmnTabChartsLinkT ON EmrMasterT.ID = EmnTabChartsLinkT.EmnID \r\n"
			"WHERE ID = {INT} \r\n"
			, m_nCLEmnID );
		if(rsDeleteInfo->eof) {
			return;
		}
		if(AdoFldBool(rsDeleteInfo, "Deleted")) {
			MsgBox("This EMN was deleted by %s on %s, it cannot be previewed", AdoFldString(rsDeleteInfo, "DeletedBy"), 
				FormatDateTimeForInterface(AdoFldDateTime(rsDeleteInfo, "DeleteDate")));
			return;
		}

		// - Don't let them preview if they don't have permission to this EMN's chart.
		long nChartID = AdoFldLong(rsDeleteInfo, "EmnTabChartID", -1);
		if(nChartID != -1 && !CheckCurrentUserPermissions(bioEmrCharts, sptView, TRUE, nChartID)) {
			return;
		}

		COleDateTime dtEmnModifiedDate = AdoFldDateTime(rsDeleteInfo, "ModifiedDate");
		if (m_pEMRCLPreviewPopupDlg == NULL) {
			//- Create our dialog
			m_pEMRCLPreviewPopupDlg = new CEMRPreviewPopupDlg(this);
			m_pEMRCLPreviewPopupDlg->Create(IDD_EMR_PREVIEW_POPUP, this);

			//- Remember the size for previewing from Glasses Orders
			m_pEMRCLPreviewPopupDlg->RestoreSize("GlassesOrder");
		}
		
		//- Now give it our patient ID and EMN ID
		// (z.manning 2012-09-10 13:52) - PLID 52543 - Use the new EmnPreviewPopup object
		EmnPreviewPopup emn(m_nCLEmnID, dtEmnModifiedDate);
		m_pEMRCLPreviewPopupDlg->SetPatientID(m_nEMNCLPatientID, emn);
		//- Now preview the first (only) EMN that we gave it.
		m_pEMRCLPreviewPopupDlg->PreviewEMN(emn, 0);

		//- Now show the dialog, if we haven't already
		if (!m_pEMRCLPreviewPopupDlg->IsWindowVisible()) {
			m_pEMRCLPreviewPopupDlg->ShowWindow(SW_SHOWNA);
		}
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-20 14:34) - PLID 49992  
void CContactLensOrderForm::OnSelChosenCLVisionPlan(LPDISPATCH lpRow)
{
	try {
		IRowSettingsPtr pRow(lpRow);
		if(pRow == NULL) {
			return;
		}
		long  nCLInsuredPartyID = VarLong (pRow->GetValue(ConLensOrderVisPlanList::PersonID) ,-1);

		if(pRow  && nCLInsuredPartyID >0){
			// (s.dhole 2012-04-20 14:34) - PLID 49890  Set visionPlan  flag
			m_bIsvisionPlanExist = TRUE;
			m_nCLInsuredPartyID =nCLInsuredPartyID ;
		}
		else{
			// (s.dhole 2012-04-20 14:34) - PLID 49890  Reset visionPlan  flag
			m_bIsvisionPlanExist = FALSE; 
		}
		// (s.dhole 2012-05-01 16:57) - PLID 49890 Apply settings 
		CContactLensOrderForm::ApplyCLVisionPlanSetting();
		RefreshCLServiceList();
		
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-04-20 14:34) - PLID 49992
void CContactLensOrderForm::SelChangingCLVisionPlan(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		if(*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}
	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2012-04-26 17:42) - PLID 48596
void CContactLensOrderForm::SelChangingConLensOdProduct(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		if(*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}

		// (b.spivey, November 16, 2012) - PLID 53422 - Logic to update check in OnSelChosen
		// (j.dinatale 2013-02-11 09:42) - PLID 55093 - removed logic here that helped determine the auto set for the sold off shelf, it was wrong logic
	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2012-04-26 17:42) - PLID 48596
void CContactLensOrderForm::SelChangingConLensOsProduct(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		if(*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}

		// (b.spivey, November 16, 2012) - PLID 53422 - Logic to update check in OnSelChosen
		// (j.dinatale 2013-02-11 09:42) - PLID 55093 - removed logic here that helped determine the auto set for the sold off shelf, it was wrong logic

	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2012-04-27 10:44) - PLID 49896 - generate our description
CString CContactLensOrderForm::GetGeneratedDescription()
{
	CString strDescription = "Contact Lens Order";

	NXDATALIST2Lib::IRowSettingsPtr pRow;
	CString strPatientName;
	pRow = m_pdlPatientList->CurSel;
	if(pRow) {
		strPatientName = VarString(pRow->GetValue(ConLensOrderPtList::Name),"");
	}
	else if(m_pdlPatientList->IsComboBoxTextInUse) {
		strPatientName = CString((LPCTSTR)m_pdlPatientList->ComboBoxText);
	}

	if(!strPatientName.IsEmpty()) {
		strDescription += " for " + strPatientName;
	}

	return strDescription;
}

// (j.dinatale 2012-04-27 15:57) - PLID 49896 - need to determine if we should be auto updating our description
void CContactLensOrderForm::ConfigureDescriptionAutoUpdate()
{
	CString strDescription;
	GetDlgItemText(IDC_CON_LEN_DESCRIPTION, strDescription);
	if(strDescription.IsEmpty() || strDescription == GetGeneratedDescription()) {
		m_bAutoGenerateDescription = true;
	}
	else {
		m_bAutoGenerateDescription = false;
	}
}

// (j.dinatale 2012-04-27 16:11) - PLID 49896 - update our description
void CContactLensOrderForm::UpdateDescription()
{
	if(m_bAutoGenerateDescription) {
		SetDlgItemText(IDC_CON_LEN_DESCRIPTION, GetGeneratedDescription());
	}
}

// (j.dinatale 2012-04-27 16:11) - PLID 49896 - after losing focus, reconfigure whether we are auto updating or not
void CContactLensOrderForm::OnEnKillfocusConLenDescription()
{
	try{
		ConfigureDescriptionAutoUpdate();
	}NxCatchAll(__FUNCTION__);
}

// (b.spivey, May 10, 2012) - PLID 50195 - Function to update the window caption when data changes. 
void CContactLensOrderForm::UpdateWindowCaption(CString strPatientName) 
{
	try {

		//Order description.
		CString strOrderDescription = "Contact Lens Order";
		//Do we have a patient name?
		if (!strPatientName.IsEmpty()) {
			//Do we have an order ID?
			if (m_nOrderID <= 0)
			{
				//PatientName + OrderDescription
				SetWindowText(strPatientName + " - " + strOrderDescription );
			}
			else {
				//PatientName + OrderDescription + #OrderID
				SetWindowText(strPatientName + " - " + strOrderDescription + " #: " +  AsString(m_nOrderID)); 
			}
		}
		else {
			//OrderDescription
			SetWindowText(strOrderDescription);
		}

	}NxCatchAll(__FUNCTION__);
}
// (s.dhole 2012-05-17 16:33) - PLID 50479
void CContactLensOrderForm::CheckProductBillable(long nProductID,long  nLocationID,BOOL  &bIsBillable,BOOL  &bIsTrackableStatus )
{
	try {
		bIsTrackableStatus = FALSE;
		bIsBillable=FALSE;
		// We will consider Billable as primary flag, if it is true then only we cosider  Trackable
		// Quntity tracking =2 
		_RecordsetPtr rsProductLocation = CreateParamRecordset("Select  * from ProductLocationInfoT WHERE LocationID ={INT} AND ProductID = {INT}" ,
		(m_nLocationID != -1) ?nLocationID:GetCurrentLocationID(), nProductID );
		if (!rsProductLocation->eof){
			if (AdoFldBool(rsProductLocation , "Billable",FALSE) ==TRUE){
				bIsBillable = TRUE;
			}
			// We will consider Billable as primary flag, if it is true then only we cosider  Trackable
			// Quntity tracking =2 
			if (bIsBillable == TRUE && AdoFldLong(rsProductLocation , "TrackableStatus",-1) ==2){
				bIsTrackableStatus = TRUE;
			}
		}
	
	}NxCatchAll(__FUNCTION__);
}

// (s.dhole 2012-05-21 17:13) - PLID 50531
void CContactLensOrderForm::OnBtnOredrPrintPreviewRx()
{
	try {
	
		if(!SaveOrder()){
			return;
		}
		CReportInfo  infReport(CReports::gcs_aryKnownReports[CReportInfo::GetInfoIndex(729)]);
		CPrintInfo prInfo;
		CPtrArray aryParams;
		infReport.nExtraID = m_nOrderID; 
		RunReport(&infReport, &aryParams, TRUE, (CWnd*)this, "Contact lens Order",  &prInfo);
		ClearRPIParameterList(&aryParams);		//clear our parameters now that the report is done
		CloseCleanup(IDOK);
		}NxCatchAll(__FUNCTION__);
	CNxDialog::OnOK();
	
}

// (s.dhole 2012-05-25 18:34) - PLID 50667
void CContactLensOrderForm::SelChangingConLensLocation(LPDISPATCH lpOldSel, LPDISPATCH* lppNewSel)
{
	try {
		if(*lppNewSel == NULL) {
			SafeSetCOMPointer(lppNewSel, lpOldSel);
		}
	}NxCatchAll(__FUNCTION__);
}

// (j.dinatale 2013-05-02 10:22) - PLID 56530 - handle product quantity accordingly
void CContactLensOrderForm::HandleProductQuantity(bool bIsOS, long nProductID, long nQty, BOOL bOffTheShelf, BOOL bIsBillable, NXDATALIST2Lib::IRowSettingsPtr pProductRow)
{
	// loop through our items
	for(int nCnt = 0; nCnt < m_arLensContactServiceInfo.GetSize(); nCnt ++  ){
		if(!m_arLensContactServiceInfo[nCnt].bIsDefault){
			// not a default/spawned item, continue
			continue;
		}

		if((m_arLensContactServiceInfo[nCnt].bIsOD && bIsOS) || (m_arLensContactServiceInfo[nCnt].bIsOS && !bIsOS)){
			// ensure we are looking at an item for the correct lens
			continue;
		}

		// ok, if our product matches, we have quantity left, and we have a billable product
		if (m_arLensContactServiceInfo[nCnt].nServiceID == nProductID && nQty > 0 && bIsBillable){
			m_arLensContactServiceInfo[nCnt].bIsDelete = FALSE;
			if(m_bIncreaseItemToBillQty){
				m_arLensContactServiceInfo[nCnt].nQty = (double)nQty;
				nQty = 0;
			} else {
				m_arLensContactServiceInfo[nCnt].nQty = 1.0f;
				nQty--;
			}
		} else {
			// if the criteria above doesn't match, then we want to delete our item
			m_arLensContactServiceInfo[nCnt].bIsDelete = TRUE; 
		}
	}

	// if we have anything left over after it is all said and done, we need to add it to our list
	if (nQty > 0 && nProductID > 0 && bIsBillable){
		if(m_bIncreaseItemToBillQty){
			// at this point, it didnt exist and we want to have a line item for the entire quantity
			AddItemsToList(!bIsOS, bIsOS, pProductRow, gostContactLens, (double)nQty, TRUE, TRUE, bOffTheShelf);
			nQty = 0;
		}else{
			// otherwise, we want single line items for each row
			for(nQty; nQty > 0; nQty--){
				AddItemsToList(!bIsOS, bIsOS, pProductRow, gostContactLens, 1.0f, TRUE, TRUE, bOffTheShelf);
			}
		}
	}

	// assert that either we didnt have a valid product, or the quantity is indeed 0, or we had something that wasnt billable
	ASSERT(!nQty || nProductID <= 0 || !bIsBillable);
}

// (j.dinatale 2013-05-03 09:15) - PLID 56530 - utility to configure the UI based on the trackability of the inventory item
void CContactLensOrderForm::ConfigureOSTrackable(BOOL bIsTrackable)
{
	if (bIsTrackable){
		// (b.spivey, November 16, 2012) - PLID 53422 - update to true if it was previously not true.
		// (j.dinatale 2013-02-11 10:20) - PLID 55093 - changed how this works, if the sold off shelf value was manually set, restore what the user had set it to
		//		otherwise, we want to set it to true if its trackable as per the preference
		if(!m_bSoldOffShelfManualSetOS) {
			if (m_bAutoCheckSoldOffShelfNewOrder) {
				SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, TRUE);
			}
		}else{
			SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED, m_bSoldOffShelfManualLastValOS);
		}

		GetDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)->EnableWindow(TRUE);
	}
	else{
		SetDlgItemCheck(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED,FALSE);
		GetDlgItem(IDC_CHK_CON_LENS_OS_TO_BE_ORDERED)->EnableWindow(FALSE);
	}
}

// (j.dinatale 2013-05-03 09:15) - PLID 56530 - utility to configure the UI based on the trackability of the inventory item
void CContactLensOrderForm::ConfigureODTrackable(BOOL bIsTrackable)
{
	if (bIsTrackable){
		// (b.spivey, November 16, 2012) - PLID 53422 - Update to true if it was previously not true.
		// (j.dinatale 2013-02-11 10:20) - PLID 55093 - changed how this works, if the sold off shelf value was manually set, restore what the user had set it to
		//		otherwise, we want to set it to true if its trackable as per the preference
		if(!m_bSoldOffShelfManualSetOD) {
			if (m_bAutoCheckSoldOffShelfNewOrder) {
				SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, TRUE);
			}
		}else{
			SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED, m_bSoldOffShelfManualLastValOD);
		}

		GetDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)->EnableWindow(TRUE);
	}
	else{
		SetDlgItemCheck(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED,FALSE);
		GetDlgItem(IDC_CHK_CON_LENS_OD_TO_BE_ORDERED)->EnableWindow(FALSE);
	}
}