// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "nxcolor.h"

/////////////////////////////////////////////////////////////////////////////
// CNxColor

IMPLEMENT_DYNCREATE(CNxColor, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CNxColor properties

unsigned long CNxColor::GetColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CNxColor::SetColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CNxColor::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CNxColor::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

unsigned long CNxColor::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CNxColor::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

// (z.manning 2011-09-19 11:02) - PLID 44676
void CNxColor::EnableGradients(BOOL bEnable)
{
	// (z.manning 2011-09-19 11:58) - PLID 44676 - The propery is actually DisableGradient which is why we use the opposite bool value.
	SetProperty(0x3, VT_BOOL, bEnable ? VARIANT_FALSE : VARIANT_TRUE);
}

/////////////////////////////////////////////////////////////////////////////
// CNxColor operations

void CNxColor::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
